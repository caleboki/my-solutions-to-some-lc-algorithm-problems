{"id":566241924,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1633444234,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/566241924/","is_pending":"Not Pending","title":"Search in a Binary Search Tree","memory":"45.5 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} val\n * @return {TreeNode}\n */\n// var searchBST = function(root, val) {\n   \n//     if (root === null || root.val === val) return root\n    \n//     if (root.val < val) {\n//         return root.right = searchBST(root.right, val)\n//     } else if (root.val > val) {\n//         return root.left = searchBST(root.left, val)\n//     } else {\n//         return root\n//     }\n\n    \n// };\n\nvar searchBST = function(root, val) {\n    if (!root) return null\n    \n    if (val === root.val) return root\n    \n    if (val < root.val) {\n        return searchBST(root.left, val)\n    } else {\n        return searchBST(root.right, val)\n    }\n    \n    //return root\n}","compare_result":"111111111111111111111111111111111111","title_slug":"search-in-a-binary-search-tree","has_notes":false}