{"id":787406762,"lang":"javascript","lang_name":"JavaScript","time":"9 months, 3 weeks","timestamp":1661885926,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/787406762/","is_pending":"Not Pending","title":"Amount of Time for Binary Tree to Be Infected","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} start\n * @return {number}\n */\nvar amountOfTime = function(root, start) {\n    let buildGraph = (root) => {\n        let adjList = {}\n        let queue = [root]\n        \n        while (queue.length) {\n            let current = queue.shift()\n            adjList[current.val] = []\n            if (current.left) queue.push(current.left)\n            if (current.right) queue.push(current.right)\n        }\n        \n        //add edges\n        queue = [root]\n        \n        while (queue.length) {\n            let current = queue.shift()\n            if (current.left) {\n                \n                adjList[current.val].push(current.left.val)\n                adjList[current.left.val].push(current.val)\n                queue.push(current.left)\n            }\n            \n            if (current.right) {\n                adjList[current.val].push(current.right.val)\n                adjList[current.right.val].push(current.val)\n                queue.push(current.right)\n            }\n            \n        }\n        return adjList\n        \n    }\n    \n    let graph = buildGraph(root)\n    console.log(graph)\n    \n\n    let bfs = (graph, start) => {\n        let nodes = []\n        let queue = [start], visited = new Set()\n        \n        while (queue.length) {\n            let current = queue.shift()\n            let edges = graph[current]\n            let currentLevel = []\n            for (let edge of edges) {\n                if (visited.has(edge)) continue\n                visited.add(edge)\n                currentLevel.push(edge)\n                queue.push(edge)\n            }\n            nodes.push(currentLevel)\n        }\n        \n        return nodes.filter(f => f.length).length\n    }\n    \n    return bfs(graph, start)\n    \n    \n    \n    \n};","compare_result":"11100111001101011011111111010001111111011000111111111001010001010011001000001100","title_slug":"amount-of-time-for-binary-tree-to-be-infected","has_notes":false}