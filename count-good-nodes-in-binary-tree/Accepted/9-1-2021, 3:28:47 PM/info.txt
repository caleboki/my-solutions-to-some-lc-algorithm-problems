{"id":547972459,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 9 months","timestamp":1630524527,"status":10,"status_display":"Accepted","runtime":"303 ms","url":"/submissions/detail/547972459/","is_pending":"Not Pending","title":"Count Good Nodes in Binary Tree","memory":"73.7 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar goodNodes = function(root) {\n    //root to node, suggests preorder in dfs\n   //counter to count number of good nodes\n   let counter = 0;\n   \n   const preOrderTraversal = (node, maxValue) => {\n       if(!node) return;\n   \t\n   \t   //in preorder, we look at current node first and then left node then right node\n       //Add to counter and update max value for this path if the current node is equal or            //bigger than the largest value we have seen\n       \n       if(node.val >= maxValue) {\n           counter++;\n           maxValue = node.val;\n       }\n       preOrderTraversal(node.left, maxValue);\n       preOrderTraversal(node.right, maxValue);\n   }\n   \n   //start function call with initial root and negative number(or -100000)\n   preOrderTraversal(root, -Number.MAX_VALUE);\n   return counter;\n};\n\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-good-nodes-in-binary-tree","has_notes":false}