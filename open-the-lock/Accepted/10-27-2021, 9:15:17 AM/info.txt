{"id":578020534,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 7 months","timestamp":1635340517,"status":10,"status_display":"Accepted","runtime":"220 ms","url":"/submissions/detail/578020534/","is_pending":"Not Pending","title":"Open the Lock","memory":"52.8 MB","code":"/**\n * @param {string[]} deadends\n * @param {string} target\n * @return {number}\n */\n//See: https://leetcode.com/problems/open-the-lock/discuss/870846/Javascript-BFS\n\nvar openLock = function (deadends, target) {\n    if (target === null || target.length === 0) return  -1\n    \n    deadends = new Set (deadends)\n    let visited = new Set(['0000'])\n    let queue = ['0000']\n    let level = 0\n    \n    const getNextStates = (lock, ans = []) => {\n        for (let i = 0; i < 4; i++) {\n            // modulus % avoids negative numbers when using +1 or -1 (could get around this    //with an if statement)\n            ans.push(lock.slice(0,i) + ((+lock[i]+1)%10) + lock.slice(i+1)) //(i+1) is the rest of the string\n            ans.push(lock.slice(0,i) + ((+lock[i]+9)%10) + lock.slice(i+1))\n        }\n        \n        return ans\n    }\n    \n    while (queue.length) {\n        \n        const next = []\n        for (let comb of queue) {\n            if (comb === target) return level\n            if (deadends.has(comb)) continue\n            \n            for (let newComb of getNextStates(comb)) {\n                if (visited.has(newComb)) continue\n                visited.add(newComb)\n                next.push(newComb)\n            }\n            \n        }\n        level++\n        queue = next\n    }\n    \n    return -1\n}","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"open-the-lock","has_notes":false}