{"id":736882627,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 3 weeks","timestamp":1656792237,"status":10,"status_display":"Accepted","runtime":"154 ms","url":"/submissions/detail/736882627/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"51.8 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} key\n * @return {TreeNode}\n */\n\n//Brilliant explanation here: https://www.youtube.com/watch?v=gcULXE7ViZw\n// var deleteNode = function (root, key) {\n//     if (!root) return root\n    \n//     const findMin = (subroot, nodeValues = []) => {\n//         if (!subroot) return\n        \n//         findMin(subroot.left, nodeValues)\n//         nodeValues.push(subroot.val)\n//         findMin(subroot.right, nodeValues)\n     \n//         return nodeValues[0]\n//     }\n    \n//     if (key < root.val) {\n//         root.left = deleteNode(root.left, key)\n//     } else if (key > root.val) {\n//         root.right = deleteNode(root.right, key)\n//     } else {\n//         //Case 1 there is no child\n//         if (!root.left && !root.right) {\n//             root = null\n//         }\n        \n//         //Case 2 there is one child\n//         if (root && !root.left) { \n//             root = root.right\n//             return root\n//         }\n        \n//         if (root && !root.right) {\n//             root = root.left\n//             return root\n//         }\n        \n//         //Case 3 there are two children\n//         if (root && root.left && root.right) {\n//             let temp = findMin(root.right)\n//             //set data I am trying to delete as the value returned from temp\n//             root.val = temp \n//             root.right = deleteNode(root.right, temp)\n//         } \n//     }\n//     return root\n// }\n\n//Alternative approach: collect all nodes in an array, filter the node we dont want then recreate the tree\nvar deleteNode = function (root, key) {\n    \n    if (root === null || key === null) return root\n   \n    let nodeValues = []\n    \n    const dfs = (node) => {\n        if (!node) return\n        \n        nodeValues.push(node.val)\n       \n        dfs(node.left)\n        dfs(node.right)\n    }\n    dfs(root)\n    \n    nodeValues = nodeValues.filter(f => f !== key)\n    \n    if (nodeValues.length === 0) return null\n    \n    let tree = new TreeNode(nodeValues[0])\n    \n    const insertNode = (tree, value) => {\n        if (tree === null) {\n            tree = new TreeNode(value)\n            return tree\n        }\n        \n        if (tree.val > value) {\n            tree.left = insertNode(tree.left, value)\n        } else {\n            tree.right = insertNode(tree.right, value)\n        }\n        \n        return tree\n    }\n    \n    for (let i = 1; i < nodeValues.length; i++) {\n        insertNode(tree, nodeValues[i])\n    }\n    \n    return tree\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst","has_notes":false}