{"id":735483407,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 3 weeks","timestamp":1656637721,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/735483407/","is_pending":"Not Pending","title":"Binary Tree Preorder Traversal","memory":"42.7 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n//Preorder: Root, Left, Right\n// var preorderTraversal = function(root) {\n//     const nodeValues = []\n    \n//     const dfs = (node) => {\n//         if (!node) return\n        \n//         nodeValues.push(node.val)\n//         dfs(node.left)\n//         dfs(node.right)\n//     }\n    \n//     dfs(root)\n//     return nodeValues\n// };\n\nconst preorderTraversal = (root, result = []) => {\n    if (!root) return result\n    \n    result.push(root.val, ...preorderTraversal(root.left), ...preorderTraversal(root.right))\n\n    return result\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-preorder-traversal","has_notes":false}