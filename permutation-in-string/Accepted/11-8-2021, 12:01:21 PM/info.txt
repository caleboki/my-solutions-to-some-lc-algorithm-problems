{"id":584043026,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 7 months","timestamp":1636390881,"status":10,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/584043026/","is_pending":"Not Pending","title":"Permutation in String","memory":"40.6 MB","code":"/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\n\n\n//Further investigation needed!\nvar checkInclusion = function(s1, s2) {\n    let m = new Map(); // map of frequency of chars in s1\n    for(let a of s1) { m.set(a, m.get(a)+1 || 1); } \n    \n    let l = 0, r = 0, n = m.size; // n is number of uniq words in s1\n    \n    while(r<s2.length) { // increase r until the map is empty (n==0)\n        let a = s2[r]; \n        if(m.has(a)) m.set(a, m.get(a)-1);  // if we found a char from s1 in s2, decrease freq\n        if(m.get(a)==0) n--; // if we found all freq of that char, n-- \n        \n        while(n==0) { // if we foud all freq of all characters of s1 in s2, \n            let b = s2[l];\n            if (r-l+1 == s1.length) return true; // if curr window matches s1 length then we found the answer\n            if(m.has(b)) m.set(b, m.get(b)+1); // when moving window, add prev chars back\n            if(m.get(b)>0) n++; // we did not find all the chars in required window\n            l++; // keep  moving the window.\n        }\n        r++;\n    }\n    return false;\n};\n\n\n// var checkInclusion = function(s1, s2) {\n//     let j = 0, matched = 0, map = {}\n    \n//     for (let i = 0; i < s1.length; i++) {\n//         if (!(s1[i] in map)) map[s1[i]] = 0\n//         map[s1[i]]++  \n//     }\n    \n//     for (let i = 0; i < s2.length; i++) {\n//         if (s2[i] in map) {\n//             map[s[i]]--\n//         }\n    \n        \n            \n//     }\n    \n//     return false;\n// };","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"permutation-in-string","has_notes":false}