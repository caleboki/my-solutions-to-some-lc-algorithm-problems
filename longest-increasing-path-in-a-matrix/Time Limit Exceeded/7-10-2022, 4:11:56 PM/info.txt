{"id":743687431,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 2 weeks","timestamp":1657483916,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/743687431/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"N/A","code":"/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar longestIncreasingPath = function(matrix) {\n    if (matrix.length === 0) return 0\n    \n    let rows = matrix.length, cols = matrix[0].length, count = 0\n    let directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n    \n    const dfs = (matrix, i, j) => {\n        count = 0\n        \n        for (let d of directions) {\n            let x = d[0] + i, y = d[1] + j\n            if (0 <= x && x < rows && 0 <= cols && y < cols && matrix[x][y] > matrix[i][j]) {\n                count = Math.max(count, dfs(matrix, x, y))\n            }\n        }\n        count++\n        return count\n        \n    }\n    \n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            count = Math.max(count, dfs(matrix, i, j))\n        }\n    }\n    \n    return count\n    \n    \n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false}