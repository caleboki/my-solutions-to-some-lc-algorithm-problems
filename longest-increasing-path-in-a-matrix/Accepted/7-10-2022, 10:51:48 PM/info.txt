{"id":743888695,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 2 weeks","timestamp":1657507908,"status":10,"status_display":"Accepted","runtime":"208 ms","url":"/submissions/detail/743888695/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"51.7 MB","code":"/**\n * @param {number[][]} matrix\n * @return {number}\n */\n// var longestIncreasingPath = function(matrix) {\n//     if (matrix.length === 0) return 0\n    \n//     let rows = matrix.length, cols = matrix[0].length, count = 0\n//     let directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n    \n//     const dfs = (matrix, i, j) => {\n//         count = 0\n        \n//         for (let d of directions) {\n//             let x = d[0] + i, y = d[1] + j\n//             if (0 <= x && x < rows && 0 <= cols && y < cols && matrix[x][y] > matrix[i][j]) {\n//                 count = Math.max(count, dfs(matrix, x, y))\n//             }\n//         }\n//         count++\n//         return count\n//     }\n    \n//     for (let i = 0; i < rows; i++) {\n//         for (let j = 0; j < cols; j++) {\n//             count = Math.max(count, dfs(matrix, i, j))\n//         }\n//     }\n//     return count\n// };\n\nconst longestIncreasingPath = (matrix) => {\n    if (matrix.length === 0) return 0\n    \n    let rows = matrix.length, cols = matrix[0].length, count = 0, map = new Map()\n    \n    const isOutside = (i, j) => i < 0 || j < 0 || i >= rows || j >= cols\n    \n    const dfs = (matrix, i, j, prev) => {\n        const key = `${i}|${j}`\n        \n        if(isOutside(i, j) || matrix[i][j] <= prev) return 0\n        if (map.has(key)) return map.get(key)\n        \n        const num = matrix[i][j]\n        \n        const l = dfs(matrix, i, j - 1, num)\n        const r = dfs(matrix, i, j + 1, num)\n        const t = dfs(matrix, i - 1, j, num)\n        const d = dfs(matrix, i + 1, j, num)\n        \n        map.set(key, Math.max(l, r, t, d) + 1)\n        count = Math.max(count, map.get(key))\n        \n        return map.get(key)\n    }\n    \n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            const key = `${i}|${j}`\n            dfs(matrix, i, j, -Infinity) \n        }\n    }\n    return count\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false}