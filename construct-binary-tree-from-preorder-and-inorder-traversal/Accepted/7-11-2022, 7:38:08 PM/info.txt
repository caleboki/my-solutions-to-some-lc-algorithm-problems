{"id":744682799,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 2 weeks","timestamp":1657582688,"status":10,"status_display":"Accepted","runtime":"170 ms","url":"/submissions/detail/744682799/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"119.7 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} preorder\n * @param {number[]} inorder\n * @return {TreeNode}\n */\nvar buildTree = function(preorder, inorder) {\n    \n    if (!preorder.length || !inorder.length) return null\n    \n    let tree = new TreeNode(preorder[0]) //first element is always the root of the tree in preorder\n    let mid = inorder.indexOf(preorder[0])\n    \n    tree.left = buildTree(preorder.slice(1, mid+1), inorder.slice(0, mid))\n    tree.right = buildTree(preorder.slice(mid + 1), inorder.slice(mid + 1))\n    \n    return tree\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false}