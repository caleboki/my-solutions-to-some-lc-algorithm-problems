{"id":572094187,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1634390107,"status":10,"status_display":"Accepted","runtime":"290 ms","url":"/submissions/detail/572094187/","is_pending":"Not Pending","title":"Walls and Gates","memory":"46.5 MB","code":"/**\n * @param {number[][]} rooms\n * @return {void} Do not return anything, modify rooms in-place instead.\n */\n// var wallsAndGates = function(rooms) {\n    \n//     const distanceToNearestGate = (i, j, dist, rooms) => {\n        \n//         //handling out of bound and base case\n//         if (i < 0 || i >= rooms.length || j < 0 || j>=rooms[i].length || rooms[i][j] < dist) return\n        \n            \n//         rooms[i][j] = dist\n//         if (rooms[i+1]) distanceToNearestGate(i+1, j, dist+1, rooms)\n//         if (rooms[i-1]) distanceToNearestGate(i-1, j, dist+1, rooms)\n//         if (rooms[i][j+1]) distanceToNearestGate(i, j+1, dist+1, rooms)\n//         if (rooms[i][j-1]) distanceToNearestGate(i, j-1, dist+1, rooms)\n//     }\n    \n//     //traverse grid\n//     for (let i = 0; i < rooms.length; i++) {\n//         for (let j = 0; j < rooms[i].length; j++) {\n//             if (rooms[i][j] === 0) distanceToNearestGate(rooms, i, j, 0)\n//         }\n//     }\n    \n//     return rooms\n    \n// };\n\n\n// var wallsAndGates = function(rooms) {\n//     const distanceToNearestGate = (i, j, dist, rooms) => {\n        \n//         //handling out of bound and base case\n//         if (dist > 0 && rooms[i][j] <= 0) return\n        \n//         if (dist <= rooms[i][j]) {\n//             rooms[i][j] = dist\n//         } else {\n//             return\n//         }\n        \n//         if (rooms[i-1]) distanceToNearestGate(i-1, j, dist+1, rooms)\n        \n//         if (rooms[i][j+1]) distanceToNearestGate(i, j+1, dist+1, rooms)\n        \n//         if (rooms[i+1]) distanceToNearestGate(i+1, j, dist+1, rooms)\n        \n//         if (rooms[i][j-1]) distanceToNearestGate(i, j-1, dist+1, rooms)\n            \n//     }\n    \n//     //traverse grid\n//     for (let i = 0; i < rooms.length; i++) {\n//         for (let j = 0; j < rooms[i].length; j++) {\n//             if (!rooms[i][j]) distanceToNearestGate(i, j, 0, rooms)\n//         }\n//     }\n    \n//     return rooms\n// };\n\nvar wallsAndGates = function(rooms) {\n    let rows = rooms.length,\n        cols = rooms[0].length,\n        queue = [],\n        //      top     down     right   left\n        dirs = [[1, 0], [-1, 0], [0, 1], [0, -1]]\n    for (let i = 0; i < rows; i ++) {\n        for (let j = 0; j < cols; j ++) {\n            if (rooms[i][j] == 0) {\n                // save gate position\n                queue.push([i, j])\n            }\n        }\n    }\n    while (queue.length) {\n        let curr = queue.shift(),\n            cR = curr[0],\n            cC = curr[1];\n        for (let dir of dirs) {\n            let nR = cR + dir[0],\n                nC = cC + dir[1];\n            if (nR < 0 || nR > rows - 1 || nC < 0 || nC > cols - 1 || rooms[nR][nC] !== 2147483647) continue;\n            rooms[nR][nC] = rooms[cR][cC] + 1;\n            queue.push([nR, nC])\n        }\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates","has_notes":false}