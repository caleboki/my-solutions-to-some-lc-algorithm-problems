{"id":793866210,"lang":"javascript","lang_name":"JavaScript","time":"9 months, 2 weeks","timestamp":1662555905,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/793866210/","is_pending":"Not Pending","title":"Find the Town Judge","memory":"N/A","code":"/**\n * @param {number} n\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function(n, trust) {\n    const buildGraph = () => {\n        let adjList = {}\n        \n        for (let i = 1; i <= n; i++) {\n            adjList[i] = []\n        }\n        \n        for (t of trust) {\n            let [a, b] = t\n            adjList[a].push(b)\n        }\n        return adjList\n    }\n    \n    const hasPath = (g, src, dst, visited = new Set()) => {\n        if (src === dst) return true\n        visited.add(src)\n        \n        for (let neighbor of g[src]) {\n            if (visited.has(neighbor)) continue\n            visited.add(neighbor)\n            let isFound = hasPath(g, neighbor, dst, visited)\n            if (isFound) return true\n        }\n        return false\n    }\n    \n    let graph = buildGraph(), possibleJudge\n    \n    for (let i = 1; i <= n; i++) {\n        if (graph[i].length === 0) possibleJudge = i\n    }\n    \n    if (!possibleJudge) return -1\n    \n    for (let i = 1; i <=n; i++) {\n        if (!hasPath(graph, i, possibleJudge)) return -1\n    }\n    \n    return possibleJudge\n    \n};","compare_result":"11101111110111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-town-judge","has_notes":false}