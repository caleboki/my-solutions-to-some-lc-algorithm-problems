{"id":778170623,"lang":"javascript","lang_name":"JavaScript","time":"10Â months","timestamp":1660962222,"status":10,"status_display":"Accepted","runtime":"189 ms","url":"/submissions/detail/778170623/","is_pending":"Not Pending","title":"Find Distance in a Binary Tree","memory":"66 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} p\n * @param {number} q\n * @return {number}\n */\nvar findDistance = function(root, p, q) {\n    \n    const levelOrderTraversal = (root) => {\n        let adjList = {}, queue = [root]\n        \n        while (queue.length) {\n            let current = queue.shift()\n            adjList[current.val] = []\n            if (current.left) queue.push(current.left)\n            if (current.right) queue.push(current.right)\n        }\n        \n        queue = [root]\n        \n        while (queue.length) {\n            let current = queue.shift()\n\n            if (current.left) {\n                adjList[current.val].push([current.left.val, 'L'])\n                adjList[current.left.val].push([current.val, 'U'])\n                queue.push(current.left)\n            }\n        \n            if (current.right) {\n                adjList[current.val].push([current.right.val, 'R'])\n                adjList[current.right.val].push([current.val, 'U'])\n                queue.push(current.right)\n            }\n        }\n        return adjList\n    }\n    \n    let adjList = levelOrderTraversal(root)\n    \n    let queue = [[p, '']], visited = new Set()\n    \n    while (queue.length) {\n        let [currentValue, currentPath] = queue.shift()\n        \n        if (visited.has(currentValue)) continue\n        visited.add(currentValue)\n        \n        if (currentValue === q) return currentPath.length\n        \n        for (let [child, direction] of adjList[currentValue]) {\n            queue.push([child, currentPath + direction])\n        }\n    }\n    \n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"find-distance-in-a-binary-tree","has_notes":false}