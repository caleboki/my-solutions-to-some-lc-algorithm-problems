{"id":779650255,"lang":"javascript","lang_name":"JavaScript","time":"10Â months","timestamp":1661106442,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/779650255/","is_pending":"Not Pending","title":"Find if Path Exists in Graph","memory":"170 MB","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} start\n * @param {number} end\n * @return {boolean}\n */\nvar validPath = function(n, edges, start, end) {\n    const buildGraph = (edges) => {\n        let graph = new Map()\n        \n        for (let edge of edges) {\n            const [a, b] = edge\n            if (!graph.has(a)) graph.set(a, [])\n            if (!graph.has(b)) graph.set(b, [])\n            \n            graph.get(a).push(b)\n            graph.get(b).push(a)\n        }\n        \n        return graph\n    }\n    \n    let graph = buildGraph(edges)\n    \n    const hasPath = (g, s, e, visited = new Set()) => {\n        \n        if (s === e) return true\n        visited.add(String(s))\n        \n        for (let neighbor of g.get(s)) {\n            if (!visited.has(String(neighbor))) {\n                visited.add(String(neighbor))\n                let isFound = hasPath(g, neighbor, e, visited)\n                if (isFound) return true\n            }\n        }\n        return false\n    }\n    \n    const hasPath2 = (g, s, e, visited = new Set()) => {\n        let queue = [s]\n        \n        while (queue.length) {\n            let current = queue.shift()\n            if (current === e) return true\n            if (visited.has(String(current))) continue\n            visited.add(String(current))\n            for (let neighbor of g.get(current)) {\n                queue.push(neighbor)\n            }\n        }\n        return false\n    }\n    \n    return hasPath2(graph, start, end)\n};","compare_result":"11111111111111111111111111","title_slug":"find-if-path-exists-in-graph","has_notes":false}