{"id":570401356,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1634099683,"status":10,"status_display":"Accepted","runtime":"377 ms","url":"/submissions/detail/570401356/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"56.9 MB","code":"\n// var Trie = function() {\n    \n// };\n\n// /** \n//  * @param {string} word\n//  * @return {void}\n//  */\n// Trie.prototype.insert = function(word) {\n    \n// };\n\n// /** \n//  * @param {string} word\n//  * @return {boolean}\n//  */\n// Trie.prototype.search = function(word) {\n    \n// };\n\n// /** \n//  * @param {string} prefix\n//  * @return {boolean}\n//  */\n// Trie.prototype.startsWith = function(prefix) {\n    \n// };\n\n/** \n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */\n\n//https://www.youtube.com/watch?v=giiaIofn31A\n//for explanation\nclass Trie {\n    constructor() {\n        this.trie = {}\n    }\n    \n    insert(word) {\n        \n        let cur = this.trie;\n        for(let alpha of word){\n            if(!cur[alpha]) cur[alpha] = {};\n            cur = cur[alpha];\n        }\n        cur.word = word;\n    }\n    \n    search(word) {\n        let cur = this.trie;\n        for(let alpha of word){\n            if(!cur[alpha]) return false;\n            if(cur[alpha].word == word) return true\n            cur = cur[alpha];\n        }        \n        return false  \n    }\n    \n    startsWith(prefix) {\n        let cur = this.trie;\n        for(let alpha of prefix){\n            if(!cur[alpha] ) return false;\n            cur = cur[alpha];\n        }\n        return true;\n    }\n}","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false}