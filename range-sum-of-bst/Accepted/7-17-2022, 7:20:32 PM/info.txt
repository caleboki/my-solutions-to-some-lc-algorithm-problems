{"id":749793935,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 1 week","timestamp":1658100032,"status":10,"status_display":"Accepted","runtime":"256 ms","url":"/submissions/detail/749793935/","is_pending":"Not Pending","title":"Range Sum of BST","memory":"93.5 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} low\n * @param {number} high\n * @return {number}\n */\n// var rangeSumBST = function(root, low, high) {\n//     let sum = 0\n    \n//     const dfs = (node) => {\n//         if (node.val >= low && node.val <= high) sum += node.val\n//         if (node.left) dfs(node.left)\n//         if (node.right) dfs(node.right)\n//     }\n    \n//     dfs(root)\n//     return sum\n// };\n\nconst rangeSumBST = (root, low, high) => {\n    let sum = 0, queue = [root]\n    \n    while (queue.length) {\n        let size = queue.length\n        \n        for (let i = 0; i < size; i++) {\n            let current = queue.shift()\n            if (current.val >= low && current.val <= high) sum += current.val\n            \n            if (current.left) queue.push(current.left)\n            if (current.right) queue.push(current.right) \n        }\n    }\n    return sum\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"range-sum-of-bst","has_notes":false}