{"id":529069359,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 11 months","timestamp":1627385144,"status":10,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/529069359/","is_pending":"Not Pending","title":"Dot Product of Two Sparse Vectors","memory":"53.9 MB","code":"/**\n * @param {number[]} nums\n * @return {SparseVector}\n */\n// var SparseVector = function(nums) {\n    \n// };\n\n// // Return the dotProduct of two sparse vectors\n// /**\n//  * @param {SparseVector} vec\n//  * @return {number}\n//  */\n// SparseVector.prototype.dotProduct = function(vec) {\n    \n// };\n\n// Your SparseVector object will be instantiated and called as such:\n// let v1 = new SparseVector(nums1);\n// let v2 = new SparseVector(nums2);\n// let ans = v1.dotProduct(v2);\n\nclass SparseVector {\n    constructor(nums) {\n        this.nums = nums\n        this.map = {}\n    }\n    \n    dotProduct(vec){\n        \n        let result = 0\n        \n        for (let i = 0; i < this.nums.length; i++) {\n            if (this.nums[i] !== 0 && vec.nums[i] !== 0) this.map[i] = []\n        }\n        \n        let keys = Object.keys(this.map).map(Number)\n        \n        keys.forEach(k => {\n            result += this.nums[k] * vec.nums[k]\n        })\n        //console.log(keys)\n        return result\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"dot-product-of-two-sparse-vectors","has_notes":false}