{"id":548728679,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 9 months","timestamp":1630646788,"status":10,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/548728679/","is_pending":"Not Pending","title":"Partition to K Equal Sum Subsets","memory":"43.6 MB","code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nlet backtrack = (arr, index, count, currSum, k, targetSum, taken, memo) => {\n    let n = arr.length;\n      \n    // We made k - 1 subsets with target sum and last subset will also have target sum.\n    if (count == k - 1) { \n        return true;\n    }\n\n    // No need to proceed further.\n    if (currSum > targetSum) { \n        return false;\n    }\n    \n    // If we have already computed the current combination.\n    if (memo[taken] != null) {\n        return memo[taken];\n    }\n\n    // When curr sum reaches target then one subset is made.\n    // Increment count and reset current sum.\n    if (currSum == targetSum) {\n        return memo[taken] = backtrack(arr, 0, count + 1, 0, k, targetSum, taken, memo);\n    }\n\n    // Try not picked elements to make some combinations.\n    for (let j = index; j < n; ++j) {\n        if (!taken[j]) {\n            // Include this element in current subset.\n            taken[j] = true;\n\n            // If using current jth element in this subset leads to make all valid subsets.\n            if (backtrack(arr, j + 1, count, currSum + arr[j], k, targetSum, taken, memo)) {\n                return memo[taken] = true;\n            }\n\n            // Backtrack step.\n            taken[j] = false;\n        }\n    } \n\n    // We were not able to make a valid combination after picking each element from the array,\n    // hence we can't make k subsets.\n    return memo[taken] = false;\n};\n\nlet canPartitionKSubsets = (arr, k) => {\n    let totalArraySum = 0;\n    let n = arr.length;\n\n    for (let i = 0; i < n; ++i) {\n         totalArraySum += arr[i];\n    }\n\n    // If total sum not divisible by k, we can't make subsets.\n    if (totalArraySum % k != 0) { \n        return false;\n    }\n\n    // Sort in decreasing order.\n    arr.sort(function (a, b) { \n        return b - a; \n    });\n\n    let targetSum = totalArraySum / k;\n    let taken = new Array(n, false);\n    \n    let memo = {};\n\n    return backtrack(arr, 0, 0, 0, k, targetSum, taken, memo);\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-to-k-equal-sum-subsets","has_notes":false}