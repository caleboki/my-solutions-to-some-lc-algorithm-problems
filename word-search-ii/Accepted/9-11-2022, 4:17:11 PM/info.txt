{"id":797400117,"lang":"javascript","lang_name":"JavaScript","time":"9 months, 2 weeks","timestamp":1662927431,"status":10,"status_display":"Accepted","runtime":"3936 ms","url":"/submissions/detail/797400117/","is_pending":"Not Pending","title":"Word Search II","memory":"51.9 MB","code":"/**\n * @param {character[][]} board\n * @param {string[]} words\n * @return {string[]}\n */\n// var findWords = function(board, words) {\n//     let rows = board.length, cols = board[0].length, visited = new Set(), trie = new Trie()\n//     let output = []\n    \n//     const dfs = (grid, x, y, r, c, node, currentWord) => {\n//         let pos = x + ',' + y\n//         if (x < 0 || x >= r || y < 0 || y >= c || !trie.startsWith(grid[x][y]) || visited.has(pos)) {\n//             return\n//         }\n//         visited.add(pos)\n        \n//         node = node.trie[board[x][y]]\n//         //console.log(node.word)\n//         currentWord += board[x][y]\n        \n//         if (node.word) output.push(currentWord)\n        \n//         dfs(grid, x+1, y, r, c, node, currentWord)\n//         dfs(grid, x-1, y, r, c, node, currentWord)\n//         dfs(grid, x, y+1, r, c, node, currentWord)\n//         dfs(grid, x, y-1, r, c, node, currentWord)\n        \n//         visited.delete(pos)\n//     }\n    \n//     for (let word of words) {\n//         trie.insert(word)\n//     }\n    \n    \n//     for (let i = 0; i < rows; i++) {\n//         for (let j = 0; j < cols; j++) {\n//             if (trie.startsWith(board[i][j])) dfs(board, i, j, rows, cols, trie, '')\n//         }\n//     }\n    \n//     return output\n// };\n\n\n// class Trie {\n//     constructor() {\n//         this.trie = {}\n//     }\n//     insert(word) {\n//         let cur = this.trie\n//         for(let alpha of word){\n//             if(!(alpha in cur)) cur[alpha] = {}\n//             cur = cur[alpha]\n//         }\n//         cur.word = word\n//     }\n//     search(word) {\n//         let cur = this.trie\n//         for(let alpha of word){\n//             if(!(alpha in cur)) return false\n//             if(cur[alpha].word === word) return true\n//             cur = cur[alpha]\n//         }        \n//         return false  \n//     }\n//     startsWith(prefix) {\n//         let cur = this.trie\n//         for(let alpha of prefix){\n//             if(!(alpha in cur)) return false\n//             cur = cur[alpha]\n//         }\n//         return true\n//     }\n// }\n\nconst findWords = (board, words) => {\n\tconst directions = [\n\t\t[1, 0],\n\t\t[-1, 0],\n\t\t[0, 1],\n\t\t[0, -1],\n\t];\n\tconst output = [];\n\tconst root = {};\n\n\tconst insert = word => {\n\t\tlet node = root;\n\n\t\tfor (const char of word) {\n\t\t\tif (!node[char]) node[char] = {};\n\n\t\t\tnode = node[char];\n\t\t}\n\n\t\tnode.isEnd = true;\n\t};\n\n\tconst traverse = (node, x, y, word) => {\n\t\tif (node.isEnd) {\n\t\t\toutput.push(word);\n\t\t\tnode.isEnd = false; // prevent duplicates\n\t\t}\n\n\t\t// out of bounds || char DNE in Trie\n\t\tif (x < 0 || x >= board.length) return;\n\t\tif (y < 0 || y >= board[0].length) return;\n\t\tif (!node[board[x][y]]) return;\n\n\t\tconst cv = board[x][y];\n\t\tboard[x][y] = ''; // mark visited\n\n    // traverse down Trie\n\t\tdirections.forEach(([dx, dy]) => {\n\t\t\ttraverse(node[cv], x + dx, y + dy, word + cv);\n\t\t});\n\n\t\t// reset board\n\t\tboard[x][y] = cv;\n\t};\n\n\t// insert words into Trie\n\tfor (const word of words) insert(word);\n\n\t// search words\n\tfor (let r = 0; r < board.length; r++) {\n\t\tfor (let c = 0; c < board[0].length; c++) {\n\t\t\tconst cv = board[r][c];\n\n\t\t\tif (root[cv]) traverse(root, r, c, '');\n\t\t}\n\t}\n\n\treturn output;\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search-ii","has_notes":false}