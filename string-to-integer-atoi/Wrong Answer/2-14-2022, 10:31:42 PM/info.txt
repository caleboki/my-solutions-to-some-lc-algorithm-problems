{"id":641611067,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 4 months","timestamp":1644895902,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/641611067/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"/**\n * @param {string} s\n * @return {number}\n */\nvar myAtoi = function(s) {\n    \n    let sign = 1, result = 0, index = 0, n = s.length, INT_MAX = Math.pow(2,31) - 1, INT_MIN = Math.pow(2,31)\n    \n  //Discard all spaces from the beginning of the input string.\n    while (index < n && s[index] == ' ') { \n        index++; \n    } \n    \n    // sign = +1, if it's positive number, otherwise sign = -1. \n    if (index < n && s[index] == '+') {\n        sign = 1;\n        index++;\n    } else if (index < n && s[index] == '-') {\n        sign = -1;\n        index++;\n    }\n    \n    // Traverse next digits of input and stop if it is not a digit. \n    // End of string is also non-digit character.\n    while (index < n && s[index] >= '0' && s[index] <= '9') {\n        let digit = s[index] - '0'\n\n        // Check overflow and underflow conditions. \n        if ((result > Math.floor(INT_MAX / 10)) || \n            (result == Math.floor(INT_MAX / 10) && digit > INT_MAX % 10)) {     \n            // If integer overflowed return 2^31-1, otherwise if underflowed return -2^31.    \n            return sign == 1 ? INT_MAX : INT_MIN\n        }\n\n        // Append current digit to the result.\n        result = 10 * result + digit\n        index++\n    }\n\n    // We have formed a valid number without any overflow/underflow.\n    // Return it after multiplying it with its sign.\n    return sign * result\n    \n    \n    \n};","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false}