{"id":677227250,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 2 months","timestamp":1649544508,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/677227250/","is_pending":"Not Pending","title":"Delete the Middle Node of a Linked List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteMiddle = function(head) {\n    const getSize = (head) => {\n        let count = 0, current = head\n        \n        while (current) {\n            current = current.next\n            count++\n        }\n        return count\n    }\n    \n    let size = getSize(head)\n    \n    if (size % 2 === 0) {\n        size = (size/2) + 1\n    } else {\n        size = (size-1)/2\n    }\n    console.log(size)\n    return removeNthFromEnd(head, getSize(head)-size)\n    \n    \n    \n};\n\n\nvar removeNthFromEnd = function(head, n) {\n    let dummy = new ListNode(0, head);\n    let slow = dummy;\n    let fast = head;\n    let count = 1;\n    while (fast.next) {\n        if (count === n) {\n            slow = slow.next;\n        } else {\n            count++;\n        }\n        fast = fast.next;\n    }\n    slow.next = slow.next.next;\n    return dummy.next;\n    \n};\n","compare_result":"1001111111111111110000100000110001111001011110101010001011110010000110","title_slug":"delete-the-middle-node-of-a-linked-list","has_notes":false}