{"id":934351998,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 1 week","timestamp":1681591088,"status":10,"status_display":"Accepted","runtime":"67 ms","url":"/submissions/detail/934351998/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"45.8 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n    if (!root) return 0\n    \n    let left = maxDepth(root.left)\n    let right = maxDepth(root.right)\n    \n    return Math.max(left, right) + 1\n    \n};\n\n// const maxDepth = (root) => {\n//     if (!root) return 0\n//     let depth = 0, queue = [root]\n    \n//     while (queue.length) {\n//         let size = queue.length\n        \n//         for (let i = 0; i < size; i++) {\n//             let current = queue.shift()\n//             if (current.left) queue.push(current.left)\n//             if (current.right) queue.push(current.right)\n//         }\n//         depth++\n//     }\n    \n//     return depth\n// }\n\n","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree","has_notes":false}