{"id":624341953,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 5 months","timestamp":1642734243,"status":10,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/624341953/","is_pending":"Not Pending","title":"Design In-Memory File System","memory":"42.5 MB","code":"\n// var FileSystem = function() {\n    \n// };\n\n// /** \n//  * @param {string} path\n//  * @return {string[]}\n//  */\n// FileSystem.prototype.ls = function(path) {\n    \n// };\n\n// /** \n//  * @param {string} path\n//  * @return {void}\n//  */\n// FileSystem.prototype.mkdir = function(path) {\n    \n// };\n\n// /** \n//  * @param {string} filePath \n//  * @param {string} content\n//  * @return {void}\n//  */\n// FileSystem.prototype.addContentToFile = function(filePath, content) {\n    \n// };\n\n// /** \n//  * @param {string} filePath\n//  * @return {string}\n//  */\n// FileSystem.prototype.readContentFromFile = function(filePath) {\n    \n// };\n\n/** \n * Your FileSystem object will be instantiated and called as such:\n * var obj = new FileSystem()\n * var param_1 = obj.ls(path)\n * obj.mkdir(path)\n * obj.addContentToFile(filePath,content)\n * var param_4 = obj.readContentFromFile(filePath)\n */\n\n// class FileNode {\n//     constructor (isFile) {\n//         this.isFile = isFile\n//         this.fileContent = ''\n//         this.children = {}\n//     }\n    \n//     isFile\n//     fileContent\n//     children\n// }\n\n// class FileSystem {\n//     constructor() {\n//         this.root = new FileNode(false)\n//     }\n    \n//     root\n    \n//     ls (path) {\n//         let subdirs = path.split('/')\n//         let fileNode = this.root\n        \n//         for (let i = 1; i < subdirs.length; i++) {\n//             fileNode = fileNode.children[subdirs[i]]\n//         }\n        \n//         let fileAndDirs = []\n//         if (fileNode.isFile) {\n//             fileAndDirs.push(path)\n//             return fileAndDirs\n//         }\n        \n//         for (let child in fileNode.children) {\n//             fileAndDirs.push(path + '/' + child)\n//         }\n        \n//         return fileAndDirs\n//     }\n    \n//     mkdir(path) {\n//         let subdirs = path.split('/')\n//         let fileNode = this.root\n        \n//         for (let i = 1; i < subdirs.length; i++) {\n            \n//             if (subdirs[i] in fileNode.children) {\n//                 fileNode = fileNode.children[subdirs[i]]\n//                 continue\n//             }\n            \n//             let newNode = new FileNode(false)\n//             fileNode.children[subdirs[i]] = newNode\n//             fileNode = newNode\n//         }\n        \n//     }\n    \n//     addContentToFile(filePath, content) {\n//         let subdirs = filePath.split('/')\n        \n//         let fileNode = this.root\n        \n//         for (let i = 1; i < subdirs.length; i++) {\n//             let subdir = subdirs[i]\n            \n//             if (subdir in fileNode.children) {\n//                 fileNode = fileNode.children[subdir]\n//                 continue\n//             }\n            \n//             let newNode = new FileNode(i === subdir.length - 1)\n//             fileNode.children[subdir] = newNode\n//             fileNode = newNode\n            \n//         }\n        \n//     }\n    \n//     readContentFromFile(filePath) {\n//         let subdirs = filePath.split('/')\n//         let node = this.root\n        \n//         for (let i = 1; i < subdirs.length; i++) {\n//             let subdir = subdirs[i]\n//             node = node.children[subdir]\n//         }\n        \n//         return node.fileContent\n//     }\n// }\n\n\nclass TrieNode {\n    constructor() {\n        this.content = null\n        this.children = new Map()\n        \n    }\n}\n\nclass FileSystem {\n    constructor() {\n        this.root = new TrieNode()\n    }\n    \n    \n    ls (path) {   \n        let currentNode = this.root\n        \n        if (path !== '/') {\n            path = path.split('/')\n            let currentString\n            \n            for (let i = 1; i < path.length; i++) {\n                currentString = path[i]\n                currentNode = currentNode.children.get(currentString)\n                //Check if it is file path\n                \n                if (i === path.length - 1 && currentNode.content !== null) {\n                    return [currentString]\n                }\n            }\n        }\n        \n        \n        let children = Array.from(currentNode.children.keys())\n        //children.sort((a, b) => {return a-b})\n        children.sort()\n        \n        return children\n    }\n    \n    mkdir(path) {\n        let currentNode = this.root\n        \n        path = path.split('/')\n        let currentString\n        \n        for (let i = 1; i < path.length; i++) {\n            currentString = path[i]\n            \n            if (!currentNode.children.has(currentString)) {\n                currentNode.children.set(currentString, new TrieNode())\n            }\n            currentNode = currentNode.children.get(currentString)\n        }\n    }\n    \n    addContentToFile(filePath, content) {\n        let currentNode = this.root\n        let path = filePath.split('/'), currentString\n        \n        for (let i = 1; i < path.length; i++) {\n            currentString = path[i]\n            \n            if (!currentNode.children.has(currentString)) {\n                currentNode.children.set(currentString, new TrieNode())\n            }\n            currentNode = currentNode.children.get(currentString)\n        }\n        \n        if (currentNode.content !== null) {\n            currentNode.content += content\n        } else {\n            currentNode.content = content\n        }\n    }\n    \n    readContentFromFile(filePath) {\n        let currentNode = this.root\n        let path = filePath.split('/'), currentString\n        \n        for (let i = 1; i < path.length; i++) {\n            currentString = path[i]\n            \n            if (!currentNode.children.has(currentString)) {\n                currentNode.children.set(currentString, new TrieNode())\n            }\n            currentNode = currentNode.children.get(currentString)\n        }\n        console.log(currentNode)\n        return currentNode.content\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-in-memory-file-system","has_notes":false}