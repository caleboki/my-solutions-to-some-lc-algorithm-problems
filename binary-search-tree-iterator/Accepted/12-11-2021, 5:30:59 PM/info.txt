{"id":600422324,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 6 months","timestamp":1639261859,"status":10,"status_display":"Accepted","runtime":"140 ms","url":"/submissions/detail/600422324/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"51 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n */\n// var BSTIterator = function(root) {\n    \n// };\n\n// /**\n//  * @return {number}\n//  */\n// BSTIterator.prototype.next = function() {\n    \n// };\n\n// /**\n//  * @return {boolean}\n//  */\n// BSTIterator.prototype.hasNext = function() {\n    \n// };\n\n/** \n * Your BSTIterator object will be instantiated and called as such:\n * var obj = new BSTIterator(root)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */\n\nclass BSTIterator {\n    constructor(root) {\n        this.root = root\n        this.list = []\n        this.pointer = 0\n        this.dfs(root)\n    }\n    \n    next() {\n        return this.list[this.pointer++]\n    }\n    \n    hasNext() {\n        return this.pointer < this.list.length\n    }\n    \n    dfs(node) {\n        if (!node) return\n        \n        this.dfs(node.left)\n        this.list.push(node.val)\n        this.dfs(node.right)\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false}