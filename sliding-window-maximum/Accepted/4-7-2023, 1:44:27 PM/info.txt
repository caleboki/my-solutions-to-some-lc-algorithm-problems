{"id":929749265,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 2 weeks","timestamp":1680889467,"status":10,"status_display":"Accepted","runtime":"789 ms","url":"/submissions/detail/929749265/","is_pending":"Not Pending","title":"Sliding Window Maximum","memory":"76.1 MB","code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\n// var maxSlidingWindow = function(nums, k) {\n//     let output = []\n    \n//     for (let i = 0; i < nums.length-k+1; i++) {\n//         let max = nums[i]\n//         for (let j = i; j < i+k; j++) {\n//             max = Math.max(max, nums[j])\n//         }\n//         output.push(max)\n//     }\n//     return output\n// };\n\nconst maxSlidingWindow = (nums, k) => {\n  const n = nums.length;\n  const result = [];\n  const deque = [];\n\n  for (let i = 0; i < n; i++) {\n    // Remove indices that are out of range\n    while (deque.length && deque[0] < i - k + 1) {\n      deque.shift();\n    }\n\n    // Remove indices whose corresponding elements are smaller than the current element\n    while (deque.length && nums[deque[deque.length - 1]] < nums[i]) {\n      deque.pop();\n    }\n\n    // Add the current index to the deque\n    deque.push(i);\n\n    // Add the maximum element in the current window to the result array\n    if (i >= k - 1) {\n      result.push(nums[deque[0]]);\n    }\n  }\n\n  return result;\n};\n","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"sliding-window-maximum","has_notes":false}