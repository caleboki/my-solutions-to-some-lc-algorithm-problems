{"id":733380142,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 4 weeks","timestamp":1656415385,"status":10,"status_display":"Accepted","runtime":"915 ms","url":"/submissions/detail/733380142/","is_pending":"Not Pending","title":"Number of Submatrices That Sum to Target","memory":"65.1 MB","code":"/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {number}\n */\n// var numSubmatrixSumTarget = function(matrix, target) {\n//     let count = 0, sum = 0\n    \n//     for (let i = 0; i < matrix.length; i++) {\n        \n//         for (let j = 0; j < matrix[0].length; j++) {\n//             sum += matrix[i][j]\n\n//             if (sum === target) {\n//                 count++\n//             }\n//         }\n//         sum = 0\n        \n//     }\n//     count = 2 * count\n//     sum = 0\n    \n//     let rows = matrix.length, cols = matrix[0].length\n    \n//     for (let i = 0; i < rows; i++) {\n//         for (let j = 0; j < cols; j++) {\n//             sum += matrix[i][j]\n//         }\n//     }\n//     if (sum === target)count++\n    \n//     return count\n// };\n\nconst numSubmatrixSumTarget = (matrix, target) => {\n    let rows = matrix.length, cols = matrix[0].length, hash = {}, ans = 0\n    \n    for (let r = 0; r < rows; r++) {\n        for (let j = 1; j < cols; j++) {\n            matrix[r][j] += matrix[r][j-1]\n        }\n    }\n    \n    for (let j = 0; j < cols; j++) {\n        \n        for (let k = j; k < cols; k++) {\n            hash = {}\n            hash[0] = 1\n            \n            let csum = 0\n            \n            for (let i = 0; i < rows; i++) {\n                csum += matrix[i][k] - (j > 0 ? matrix[i][j-1] : 0)\n                ans += hash[csum - target] || 0\n                hash[csum] = (hash[csum] || 0) + 1\n            }\n            \n        }\n    }\n    \n    return ans\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"number-of-submatrices-that-sum-to-target","has_notes":false}