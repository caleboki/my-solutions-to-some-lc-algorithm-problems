{"id":670872928,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 2 months","timestamp":1648711882,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/670872928/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar exist = function(board, word) {\n    \n    let wordMap = new Map()\n    \n    for (let w of word) {\n        if (wordMap.has(w)) {\n            wordMap.set(w, wordMap.get(w) + 1)\n        } else {\n            wordMap.set(w, 1)\n        } \n    }\n    //console.log(wordMap)\n    \n    let count = 0, rows = board.length\n    \n    if (rows === 0) return 0\n    \n    let cols = board[0].length\n    \n    //traverse board\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            \n            if (wordMap.has(board[i][j]) && wordMap.get(board[i][j]) > 0) {   \n                dfs(wordMap, board, i, j, rows, cols)\n                \n                //wordMap.set(board[i][j], wordMap.get(board[i][j])-1)\n            }\n        }\n    }\n    //console.log(wordMap)\n    for (let [key, value] of wordMap) {\n        if (value > 0) return false\n    }\n    return true\n    \n};\n\nfunction dfs(map, matrix, x, y, r, c) {\n    //handling out of bound cases\n    if (x < 0 || x >=r || y < 0 || y >=c || !map.has(matrix[x][y]) || map.get(matrix[x][y]) === 0) return\n    \n    map.set(matrix[x][y], map.get(matrix[x][y])-1)\n    matrix[x][y] = '!'\n    \n    console.log(map)\n    dfs(map, matrix, x+1, y, r, c)\n    dfs(map, matrix, x-1, y, r, c)\n    dfs(map, matrix, x, y+1, r, c)\n    dfs(map, matrix, x, y-1, r, c)\n}\n\n\n// var numIslands = function(grid) {\n//     let nIslands = 0\n//     let rows = grid.length\n    \n//     if(rows === 0) return 0\n    \n//     //number of matrix columns. 0 because at least 1 row would always exist\n//     let cols = grid[0].length \n    \n//     //traverse grid\n//     for (let i = 0; i < rows; i++) {\n//         for(let j = 0; j < cols; j++) {\n//             if (grid[i][j] === '1') {\n//                 dfs(grid, i, j, rows, cols)\n//                 nIslands++\n//             }\n//         }\n//     }\n//     return nIslands\n// };\n\n// function dfs(matrix, x, y, r, c){\n//     //handling out of bound and base case\n//     if (x < 0 || x >= r || y < 0 || y>=c || matrix[x][y] !== '1') return \n    \n//     matrix[x][y] = '2'\n    \n//     dfs(matrix, x+1, y, r, c) //right\n//     dfs(matrix, x-1, y, r, c) //left\n//     dfs(matrix, x, y+1, r, c) //up\n//     dfs(matrix, x, y-1, r, c) //down\n// }","compare_result":"11111111111111111111101111111111111111111011011111011111110111111111111011101101111","title_slug":"word-search","has_notes":false}