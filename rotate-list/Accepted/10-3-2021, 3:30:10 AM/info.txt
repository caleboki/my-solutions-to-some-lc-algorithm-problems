{"id":564954643,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1633246210,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/564954643/","is_pending":"Not Pending","title":"Rotate List","memory":"40.6 MB","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\n\n//Investigate properly!\nvar rotateRight = function(head, k) {\n    if (head === null) {\n        return head;\n    }\n    let len = lengthOfLL(head);\n    k = k % len;\n    if (k === 0) {\n        return head;\n    }\n    // Reverse the entire list\n    head = reverseLL(head, null);\n    \n    // Find the tail of first k-node list\n    let tail1 = head;\n    for (let i = 0; i < k; i++) {\n        tail1 = tail1.next;\n    }\n    // Reverse the first k-node list\n    let head1 = reverseLL(head, tail1);\n    // Reverse the remaining list\n    let head2 = reverseLL(tail1, null);\n    // Chain two lists\n    let cur = head1;\n    while (cur.next !== null) {\n        cur = cur.next;\n    }\n    cur.next = head2;\n    return head1;\n    // T.C: O(N)\n    // S.C: O(1)\n};\n\nconst reverseLL = (head, tail) => {\n    let prev = null;\n    let cur = head;\n    while (cur !== tail) {\n        let next = cur.next;\n        cur.next = prev;\n        prev = cur;\n        cur = next;\n    }\n    return prev;\n}\n\nconst lengthOfLL = (head) => {\n    let count = 0;\n    let cur = head;\n    while (cur !== null) {\n        cur = cur.next;\n        count++;\n    }\n    return count;\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list","has_notes":false}