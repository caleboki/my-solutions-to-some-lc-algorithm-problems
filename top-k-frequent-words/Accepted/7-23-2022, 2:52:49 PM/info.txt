{"id":754775836,"lang":"javascript","lang_name":"JavaScript","time":"11Â months","timestamp":1658602369,"status":10,"status_display":"Accepted","runtime":"135 ms","url":"/submissions/detail/754775836/","is_pending":"Not Pending","title":"Top K Frequent Words","memory":"45.2 MB","code":"/**\n * @param {string[]} words\n * @param {number} k\n * @return {string[]}\n */\n// var topKFrequent = function(words, k) {\n//     words.sort()\n//     let wordsMap = {}\n    \n//     for (let word of words) {\n//         if (!(word in wordsMap)) wordsMap[word] = 0\n//         wordsMap[word]++\n//     }\n    \n//     let wordsPair = []\n    \n//     for (let word in wordsMap) wordsPair.push([word, wordsMap[word]])\n//     wordsPair.sort((a, b) => {return b[1] - a[1]})\n//     wordsPair.length = k\n    \n//     wordsPair = wordsPair.map(w => w[0])\n//     return wordsPair\n// };\n\n\nconst topKFrequent = (words, k) => {\n    words.sort()\n    \n    let wordMap = new Map(), wordPair = []\n    \n    for (let word of words) {\n        if (!wordMap.has(word)) wordMap.set(word, 0)\n        wordMap.set(word, wordMap.get(word) + 1)\n    }\n    \n    for ([key, value] of wordMap) wordPair.push([key, value])\n    \n    wordPair.sort((a, b) => {return b[1] - a[1]})\n    wordPair.length = k\n    \n    return wordPair.map(w => w[0])\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"top-k-frequent-words","has_notes":false}