{"id":625596287,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 5 months","timestamp":1642893112,"status":10,"status_display":"Accepted","runtime":"150 ms","url":"/submissions/detail/625596287/","is_pending":"Not Pending","title":"Construct Quad Tree","memory":"43.1 MB","code":"/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,bottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */\n\n/**\n * @param {number[][]} grid\n * @return {Node}\n */\n// var construct = function(grid) {\n    \n//     let n = grid.length\n//     if (n === 0) return null\n    \n//     const helper = (startX, endX, startY, endY, grid) => {\n       \n//         let val = grid[startX - 1][startY - 1]\n        \n//         let isSame = true\n        \n//         for (let i = startX - 1; i <= endX - 1; i++) {\n//             for (let j = startY - 1; j <= endY - 1; i++) {\n//                 if (grid[i][j] !== val) {\n//                     isSame = false\n//                     break\n//                 }\n//             }\n//             if (!isSame) break\n//         }\n        \n//         if (isSame) {\n//             let node = new Node(val == 1 ? true : false, true, null, null, null, null)\n//             return node\n//         } else {\n            \n//             let topLeft = helper(startX, (startX + endX - 1) / 2, startY, (startY + endY - 1) / 2, grid)\n//             let topRight = helper(startX, (startX + endX - 1) / 2, (startY + endY + 1) / 2, endY, grid)\n//             let bottomLeft = helper((startX + endX + 1) / 2, endX, startY, (startY + endY - 1) / 2, grid)\n//             let bottomRight = helper((startX + endX + 1) / 2, endX, (startY + endY + 1) / 2, endY, grid)\n            \n//             let node = new Node(false, false, topLeft, topRight, bottomLeft, bottomRight)\n//             return node\n            \n//         }\n//     }\n//     return helper(1, n, 1, n, grid) \n// };\n\nvar construct = function(grid, top=0, bottom=grid.length-1, left=0, right=grid.length-1) {\n    let sameValue = true\n    \n    //check if values are unique or not for the current grid (based on boundaries)\n    for (let row=top; row<=bottom; row++) {\n        if (!sameValue) break\n        for (let col=left; col<=right; col++) {\n            if (grid[row][col] !== grid[top][left]) {\n                sameValue = false\n                break\n            }\n        }\n    }\n    \n    if (sameValue) {\n        return new Node(grid[top][left], true, null, null, null, null)\n    } else {\n\t   //get the mid for vertical and horizontal based on current boundaries, this will help calculate next boundaries\n        let vMid = Math.floor((top+bottom)/2)\n        let hMid = Math.floor((left+right)/2)\n        \n        let node = new Node(0, false)\n        \n        node.topLeft = construct(grid, top, vMid, left, hMid)\n        node.topRight = construct(grid, top, vMid, hMid+1, right)\n        node.bottomLeft = construct(grid, vMid+1, bottom, left, hMid)\n        node.bottomRight = construct(grid, vMid+1, bottom, hMid+1, right)\n        \n        return node\n    } \n};","compare_result":"1111111111111111111111","title_slug":"construct-quad-tree","has_notes":false}