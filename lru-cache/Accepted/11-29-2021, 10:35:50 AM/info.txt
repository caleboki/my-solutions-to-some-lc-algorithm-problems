{"id":594477873,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 6 months","timestamp":1638200150,"status":10,"status_display":"Accepted","runtime":"672 ms","url":"/submissions/detail/594477873/","is_pending":"Not Pending","title":"LRU Cache","memory":"93.8 MB","code":"/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n    this.capacity = capacity;\n    this.cache = new Map();\n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n\n   if (!this.cache.has(key)) return -1\n    \n    let access = this.cache.get(key)\n    this.cache.delete(key)\n    this.cache.set(key, access)\n    \n    return access   \n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n    \n    if (this.cache.has(key)) {\n        this.cache.delete(key)\n        this.cache.set(key, value)\n    } else {\n       this.cache.set(key, value) \n    }  \n  \n    if(this.cache.size > this.capacity) this.cache.delete(this.cache.keys().next().value)\n};\n\n/** \n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false}