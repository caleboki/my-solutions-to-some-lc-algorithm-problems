{"id":734511436,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 4 weeks","timestamp":1656531242,"status":10,"status_display":"Accepted","runtime":"132 ms","url":"/submissions/detail/734511436/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"47.1 MB","code":"/**\n * @param {character[][]} matrix\n * @return {number}\n */\n//https://www.youtube.com/watch?v=dAVF2NpC3j4\n//https://leetcode.com/problems/largest-rectangle-in-histogram/\n\nvar maximalRectangle = function(matrix) {\n    if (!matrix.length) return 0\n    let rows = matrix.length, cols = matrix[0].length, result = 0\n    \n    //converting matrix to histogram by taking the cummulative sum of each element and ignoring 0s\n    for (let i = 1; i < rows; i++) {\n        \n        for (let j = 0; j < cols; j++) {\n            if (matrix[i][j] === \"0\") continue\n            matrix[i][j] = (+matrix[i-1][j] + +matrix[i][j]).toString()\n        }\n    }\n    \n    const largestRectangleArea = (heights) => {\n        let maxArea = 0, stack = []\n        heights = ['0', ...heights, '0']\n        \n        for (let i = 0; i < heights.length; i++) {\n            \n            while (stack && heights[stack[stack.length - 1]] > +heights[i]) {\n                let j = stack.pop()\n                maxArea = Math.max(maxArea, (i - stack[stack.length - 1] - 1) * +heights[j])\n            }\n            stack.push(i)\n        }\n        \n        return maxArea\n    }\n    \n    for (let row of matrix) {\n        result = Math.max(largestRectangleArea(row), result)\n    }\n    \n    return result\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle","has_notes":false}