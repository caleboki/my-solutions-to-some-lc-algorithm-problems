{"id":564949285,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1633245415,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/564949285/","is_pending":"Not Pending","title":"Insert into a Sorted Circular Linked List","memory":"N/A","code":"/**\n * // Definition for a Node.\n * function Node(val, next) {\n *     this.val = val;\n *     this.next = next;\n * };\n */\n\n/**\n * @param {Node} head\n * @param {number} insertVal\n * @return {Node}\n */\nvar insert = function(head, insertVal) {\n    \n    //Edge case: If the list is empty (i.e., the given node is null), you should create a new         //single circular list and return the reference to that single node. \n    \n    if (!head) {\n        head = new Node(insertVal)\n        head.next = head\n        return head\n    }\n    \n    //Case 1: insertVal is > current and < next\n    if (insertVal >= head.val && insertVal <= head.next.val) {\n        head.next = new Node(insertval, head.next)\n        return head\n    }\n    \n    //Define 2-pointers to traverse list\n    let slow = head.next\n    let fast = slow.next\n    \n    while(slow !== head) {\n        let toInsert = false\n        \n        if (insertVal >= slow.val && insertVal <= fast.val) toInsert = true\n        \n        if (slow.val > fast.val) {\n            if (insertVal >= slow.val || insertVal <= fast.val) {\n                toInsert = true\n            }\n        }\n        if (toInsert) {\n            slow.next = new Node(insertVal, fast)\n            return head\n        }\n        slow = fast\n        fast = fast.next\n    }\n    fast.next = new Node(insertVal, fast)\n    return head\n    \n    \n};","compare_result":"11100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"insert-into-a-sorted-circular-linked-list","has_notes":false}