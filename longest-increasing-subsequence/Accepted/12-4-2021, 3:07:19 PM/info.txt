{"id":596949649,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 6 months","timestamp":1638648439,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/596949649/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"40.7 MB","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n    const binarySearch = (arr, num) => {\n        let left = 0, right = arr.length - 1\n        \n        while (left < right) {\n            let mid = Math.floor((left + right)/2)\n            if (arr[mid] === num) return mid\n            \n            if (arr[mid] < num) {\n                left = mid + 1\n            } else {\n                right = mid\n            }\n        }\n        return left\n    }\n    \n    let result = [nums[0]]\n    //result.push(nums[0])\n    \n    for (let i = 1; i < nums.length; i++) {\n        let num = nums[i]\n        if (num > result[result.length - 1]) {\n            result.push(num)  \n        } else {\n            let j = binarySearch(result, num)\n            result[j] = num\n        } \n    }\n    return result.length\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false}