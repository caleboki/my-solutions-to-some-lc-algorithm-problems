{"id":758331281,"lang":"javascript","lang_name":"JavaScript","time":"11Â months","timestamp":1658945450,"status":10,"status_display":"Accepted","runtime":"86 ms","url":"/submissions/detail/758331281/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"44.2 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */\n\n//More investigation needed: https://leetcode.com/problems/flatten-binary-tree-to-linked-list/solution/\n\nvar flatten = function(root) {\n  const dfs = (node) => {\n      if (!node) return null\n      \n      if (!node.left && !node.right) return node\n      \n      let left = dfs(node.left)\n      let right = dfs(node.right)\n      \n      if (left !== null) {\n          left.right = node.right\n          node.right = node.left\n          node.left = null\n      }\n      \n      return right === null ? left : right\n  }\n  \n  dfs(root)\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list","has_notes":false}