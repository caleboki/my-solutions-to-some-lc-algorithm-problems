{"id":736582132,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 3 weeks","timestamp":1656764573,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/736582132/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} subRoot\n * @return {boolean}\n */\nvar isSubtree = function(root, subRoot) {\n    let queue = [root]\n    \n    while (queue.length) {\n        let currentRoot = queue.shift()\n        \n        if (currentRoot.val === subRoot.val) {\n            return traverseSubRoot(currentRoot, subRoot) \n        }\n        \n        if (currentRoot.left) queue.push(currentRoot.left)\n        if (currentRoot.right) queue.push(currentRoot.right)\n    }\n    return false\n};\n\nconst traverseSubRoot = (currentRoot, subRoot) => {\n    \n    if (!currentRoot && !subRoot) return true\n    if (!currentRoot || !subRoot) return false\n    if (currentRoot.val !== subRoot.val) return false\n    \n    if (traverseSubRoot(currentRoot.left, subRoot.left) && traverseSubRoot(currentRoot.right, subRoot.right)){\n        return true\n    }\n    \n    return false\n}","compare_result":"11111001111001111111111111111111100010000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false}