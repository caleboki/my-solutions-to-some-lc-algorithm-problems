{"id":736592519,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 3 weeks","timestamp":1656765720,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/736592519/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} subRoot\n * @return {boolean}\n */\nvar isSubtree = function(root, subRoot) {\n    if (!root) return false\n    if (isSameTree(root, subRoot)) return true\n    \n    return (isSameTree(root.left, subRoot) || isSameTree(root.right, subRoot))\n};\n\nconst isSameTree = (root, subRoot) => {\n    \n    if (!root && !subRoot) return true\n    if (!root || !subRoot) return false\n    if (root.val !== subRoot.val) return false\n    \n    return (isSameTree(root.left, subRoot.left) || isSameTree(root.right, subRoot.right))\n}","compare_result":"10011110011111001101010010101110000000000001000000010001000100110010000010000010000000000001000000000000100000001111111111111111111111111111111011111111111111111111111111111110010001","title_slug":"subtree-of-another-tree","has_notes":false}