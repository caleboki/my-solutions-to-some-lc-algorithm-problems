{"id":758351203,"lang":"javascript","lang_name":"JavaScript","time":"11Â months","timestamp":1658946880,"status":10,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/758351203/","is_pending":"Not Pending","title":"Number of Connected Components in an Undirected Graph","memory":"47.4 MB","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\n// var countComponents = function(n, edges) {\n//     const adjList = new Map()\n//     let counter = 0\n    \n//     const addNode = (list, node) => {\n//         list.set(node, [])\n//         return list\n//     }\n    \n//     const addEdges = (list, from, to) => {\n//         list.get(from).push(to)\n//         list.get(to).push(from)\n//         return list    \n//     }\n    \n//     for (let i = 0; i < n; i++) {\n//         addNode(adjList, i)\n//     }\n    \n//     for (let i = 0; i < edges.length; i++) {\n//         addEdges(adjList, edges[i][0], edges[i][1])\n//     }\n    \n//     const dfs = (start, visited = new Set()) => {\n        \n//         visited.add(start)\n//         const edges = adjList.get(start)\n        \n//         for (let i = 0; i < edges.length; i++) {\n        \n//             if (!visited.has(edges[i])) {\n//                 dfs(edges[i], visited)\n//             } else {\n//                 counter++\n//             } \n//         }\n       \n//         return counter\n//     }\n//     return dfs(0)\n// };\n\n// var countComponents = function(n, edges) {\n//     let adjList = new Map(), counter = 0, visited = new Set()\n    \n//     const addNode = (list, node) => {\n//         list.set(node, [])\n//         return list\n//     }\n    \n//     const addEdges = (list, from, to) => {\n//         list.get(from).push(to)\n//         list.get(to).push(from)\n//         return list    \n//     }\n    \n//     for (let i = 0; i < n; i++) {\n//         addNode(adjList, i)\n//     }\n    \n//     for (let i = 0; i < edges.length; i++) {\n//         addEdges(adjList, edges[i][0], edges[i][1])\n//     }\n    \n//     const dfs = (node) => {\n//         for (let neighbour of adjList.get(node)) {\n//             if(!visited.has(neighbour)) {\n//                 visited.add(neighbour)\n//                 dfs(neighbour)\n//             }\n//         }\n//     }\n    \n//     for (let i = 0; i < n; i++) {\n//         if (!visited.has(i) ){\n//             counter++\n//             dfs(i)\n//         }\n//     }\n//     return counter\n// };\n\nconst countComponents = (n, edges) => {\n    let count = 0, visited = new Set()\n    \n    const buildGraph = (n, edges, map = new Map()) => {\n        \n        \n        for (let i = 0; i < n; i++) map.set(i, [])\n        \n        for (let edge of edges) {\n            let [parent, child] = edge\n            if (map.has(parent)) map.get(parent).push(child)\n            if (map.has(child)) map.get(child).push(parent)\n        }\n    \n        return map\n    }\n    \n    let graph = buildGraph(n, edges)\n    \n    const dfs = (graph, startNode, visited) => {\n        if (visited.has(String(startNode))) return false\n        visited.add(String(startNode))\n        \n        for (let node of graph.get(startNode)) {\n            dfs(graph, node, visited)\n        }\n        return true\n    }\n    \n    for (let i = 0; i < n; i++) if (dfs(graph, i, visited)) count++\n    \n    return count\n}\n\n\n\n\n\n\n\n\n\n\n","compare_result":"11111111111111111111111111111111111111111111","title_slug":"number-of-connected-components-in-an-undirected-graph","has_notes":false}