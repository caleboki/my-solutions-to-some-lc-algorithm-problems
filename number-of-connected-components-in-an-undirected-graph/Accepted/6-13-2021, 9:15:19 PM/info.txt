{"id":507560974,"lang":"javascript","lang_name":"JavaScript","time":"2Â years","timestamp":1623633319,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/507560974/","is_pending":"Not Pending","title":"Number of Connected Components in an Undirected Graph","memory":"43.6 MB","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\n// var countComponents = function(n, edges) {\n//     const adjList = new Map()\n//     let counter = 0\n    \n//     const addNode = (list, node) => {\n//         list.set(node, [])\n//         return list\n//     }\n    \n//     const addEdges = (list, from, to) => {\n//         list.get(from).push(to)\n//         list.get(to).push(from)\n//         return list    \n//     }\n    \n//     for (let i = 0; i < n; i++) {\n//         addNode(adjList, i)\n//     }\n    \n//     for (let i = 0; i < edges.length; i++) {\n//         addEdges(adjList, edges[i][0], edges[i][1])\n//     }\n    \n//     const dfs = (start, visited = new Set()) => {\n        \n//         visited.add(start)\n//         const edges = adjList.get(start)\n        \n//         for (let i = 0; i < edges.length; i++) {\n        \n//             if (!visited.has(edges[i])) {\n//                 dfs(edges[i], visited)\n//             } else {\n//                 counter++\n//             } \n//         }\n       \n//         return counter\n//     }\n//     return dfs(0)\n// };\n\nvar countComponents = function(n, edges) {\n    const adjList = new Map()\n    let counter = 0\n    let visited = new Set()\n    \n    const addNode = (list, node) => {\n        list.set(node, [])\n        return list\n    }\n    \n    const addEdges = (list, from, to) => {\n        list.get(from).push(to)\n        list.get(to).push(from)\n        return list    \n    }\n    \n    for (let i = 0; i < n; i++) {\n        addNode(adjList, i)\n    }\n    \n    for (let i = 0; i < edges.length; i++) {\n        addEdges(adjList, edges[i][0], edges[i][1])\n    }\n    \n    const dfs = (node) => {\n        for (neighbour of adjList.get(node)) {\n            if(!visited.has(neighbour)) {\n                visited.add(neighbour)\n                dfs(neighbour)\n            }\n            \n         \n        }\n    }\n    \n    for (let i = 0; i < n; i++) {\n        if (!visited.has(i)){\n            counter++\n            visited.add(i)\n            dfs(i)\n        }\n    }\n    return counter\n};\n\n\n\n\n\n\n\n\n","compare_result":"11111111111111111111111111111111111111111111","title_slug":"number-of-connected-components-in-an-undirected-graph","has_notes":false}