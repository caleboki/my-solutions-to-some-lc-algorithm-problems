{"id":507430520,"lang":"javascript","lang_name":"JavaScript","time":"2Â years","timestamp":1623608549,"status":10,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/507430520/","is_pending":"Not Pending","title":"Number of Connected Components in an Undirected Graph","memory":"43.8 MB","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\n// var countComponents = function(n, edges) {\n//     const adjList = new Map()\n//     let counter = 0\n    \n//     const addNode = (list, node) => {\n//         list.set(node, [])\n//         return list\n//     }\n    \n//     const addEdges = (list, from, to) => {\n//         list.get(from).push(to)\n//         list.get(to).push(from)\n//         return list    \n//     }\n    \n//     for (let i = 0; i < n; i++) {\n//         addNode(adjList, i)\n//     }\n    \n//     for (let i = 0; i < edges.length; i++) {\n//         addEdges(adjList, edges[i][0], edges[i][1])\n//     }\n    \n//     const dfs = (start, visited = new Set()) => {\n        \n//         visited.add(start)\n//         const edges = adjList.get(start)\n        \n//         for (let i = 0; i < edges.length; i++) {\n        \n//             if (!visited.has(edges[i])) {\n//                 dfs(edges[i], visited)\n//             } else {\n//                 counter++\n//             } \n//         }\n       \n//         return counter\n//     }\n//     return dfs(0)\n// };\n\nvar countComponents = function(n, edges) {\n    // create visited array\n    let visited = [];\n    // create graph\n    let graph = buildGraph(n, edges);\n    // create res\n    let res = 0;\n    \n    // mark visited with false\n    for (let i = 0; i < n; i ++) {\n        visited.push(false);\n    }\n    \n    // traverse graph\n    for (let i = 0; i < n; i ++) {\n        // not visited\n        if (visited[i] === false) {\n            res ++;\n            dfs(i, graph, visited);\n        }\n    }\n    return res;\n};\n\nconst buildGraph = (n, edges) => {\n    let graph = Array.from({length: n}, () => []);\n    \n    for (let edge of edges) {\n        let [src, dist] = edge;\n        graph[src].push(dist);\n        graph[dist].push(src);\n    }\n    return graph\n}\n\nconst dfs = (index, graph, visited) => {\n    visited[index] = true;\n    let nodes = graph[index];\n    for (let i = 0; i < nodes.length; i ++) {\n        if (visited[nodes[i]] === false) {\n            dfs(nodes[i], graph, visited)\n        }\n    }\n}\n\n\n\n\n\n","compare_result":"11111111111111111111111111111111111111111111","title_slug":"number-of-connected-components-in-an-undirected-graph","has_notes":false}