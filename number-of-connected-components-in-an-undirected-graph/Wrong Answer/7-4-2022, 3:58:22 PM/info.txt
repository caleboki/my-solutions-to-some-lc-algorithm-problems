{"id":738536659,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 3 weeks","timestamp":1656964702,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/738536659/","is_pending":"Not Pending","title":"Number of Connected Components in an Undirected Graph","memory":"N/A","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\n// var countComponents = function(n, edges) {\n//     const adjList = new Map()\n//     let counter = 0\n    \n//     const addNode = (list, node) => {\n//         list.set(node, [])\n//         return list\n//     }\n    \n//     const addEdges = (list, from, to) => {\n//         list.get(from).push(to)\n//         list.get(to).push(from)\n//         return list    \n//     }\n    \n//     for (let i = 0; i < n; i++) {\n//         addNode(adjList, i)\n//     }\n    \n//     for (let i = 0; i < edges.length; i++) {\n//         addEdges(adjList, edges[i][0], edges[i][1])\n//     }\n    \n//     const dfs = (start, visited = new Set()) => {\n        \n//         visited.add(start)\n//         const edges = adjList.get(start)\n        \n//         for (let i = 0; i < edges.length; i++) {\n        \n//             if (!visited.has(edges[i])) {\n//                 dfs(edges[i], visited)\n//             } else {\n//                 counter++\n//             } \n//         }\n       \n//         return counter\n//     }\n//     return dfs(0)\n// };\n\n// var countComponents = function(n, edges) {\n//     const adjList = new Map()\n//     let counter = 0\n//     let visited = new Set()\n    \n//     const addNode = (list, node) => {\n//         list.set(node, [])\n//         return list\n//     }\n    \n//     const addEdges = (list, from, to) => {\n//         list.get(from).push(to)\n//         list.get(to).push(from)\n//         return list    \n//     }\n    \n//     for (let i = 0; i < n; i++) {\n//         addNode(adjList, i)\n//     }\n    \n//     for (let i = 0; i < edges.length; i++) {\n//         addEdges(adjList, edges[i][0], edges[i][1])\n//     }\n    \n//     const dfs = (node) => {\n//         for (let neighbour of adjList.get(node)) {\n//             if(!visited.has(neighbour)) {\n//                 visited.add(neighbour)\n//                 dfs(neighbour)\n//             }\n            \n         \n//         }\n//     }\n    \n//     for (let i = 0; i < n; i++) {\n//         if (!visited.has(i)){\n//             counter++\n//             //visited.add(i)\n//             dfs(i)\n//         }\n//     }\n//     return counter\n// };\n\nconst countComponents = (n, edges) => {\n    let count = 0, visited = new Set()\n    \n    const buildGraph = (edges) => {\n        let map = new Map()\n        \n        for (let edge of edges) {\n            let [parent, child] = edge\n            \n            if (!map.has(parent)) map.set(parent, [])\n            if (!map.has(child)) map.set(child, [])\n            map.get(parent).push(child)\n            map.get(child).push(parent)\n        }\n        return map\n    }\n    \n    let graph = buildGraph(edges)\n    \n    const dfs = (graph, start) => {\n        if (visited.has(String(start))) return false\n        visited.add(String(start))\n        \n        let children = graph.get(start)\n        \n        for (let child of children) {\n            dfs(graph, child)\n        }\n        \n        return true\n    }\n    \n    for (let i of graph.keys()) {\n        if (dfs(graph, i)) count++\n    }\n    \n    return count\n    \n}\n\n\n\n\n\n\n\n\n","compare_result":"11111111110010011001111111010110001000010011","title_slug":"number-of-connected-components-in-an-undirected-graph","has_notes":false}