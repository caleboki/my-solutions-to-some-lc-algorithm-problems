{"id":507368145,"lang":"javascript","lang_name":"JavaScript","time":"2Â years","timestamp":1623598929,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/507368145/","is_pending":"Not Pending","title":"Number of Connected Components in an Undirected Graph","memory":"N/A","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\nvar countComponents = function(n, edges) {\n    const adjList = new Map()\n    let counter = 0\n    \n    for (let i = 0; i < n; i++) {\n        addNode(adjList, i)\n    }\n    \n    for (let i = 0; i < edges.length; i++) {\n        addEdges(adjList, edges[i][0], edges[i][1])\n    }\n    //console.log(adjList) \n    \n    const dfs = (start, visited = new Set()) => {\n        \n        visited.add(start)\n        const edges = adjList.get(start)\n        \n        for (let i = 0; i < edges.length; i++) {\n        \n            if (!visited.has(edges[i])) {\n                dfs(edges[i], visited)\n            } else {\n                counter++\n            } \n        }\n        return counter\n        \n    }\n    return dfs(0)\n};\n\nfunction addNode(list, node) {\n    list.set(node, [])\n    return list\n}\n\nfunction addEdges(list, from, to) {\n    list.get(from).push(to)\n    list.get(to).push(from)\n    return list   \n}\n\nfunction dfs(list, start, visited = new Set()) {\n    let counter = 0\n    visited.add(start)\n    const edges = list.get(start)\n  \n    for (let i = 0; i < edges.length; i++) {\n        \n        if (!visited.has(edges[i])) {\n            dfs(list, edges[i], visited)\n        } else {\n            counter++\n        } \n    }\n    return counter\n}","compare_result":"10000000000000011000000000100000000000000000","title_slug":"number-of-connected-components-in-an-undirected-graph","has_notes":false}