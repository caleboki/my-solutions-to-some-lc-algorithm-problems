{"id":941798538,"lang":"javascript","lang_name":"JavaScript","time":"1 month, 3 weeks","timestamp":1682808224,"status":10,"status_display":"Accepted","runtime":"69 ms","url":"/submissions/detail/941798538/","is_pending":"Not Pending","title":"Longest Continuous Increasing Subsequence","memory":"44.3 MB","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLengthOfLCIS = function(nums) {\n    let stack = [], longest = 0\n\n    for (let i = 0; i < nums.length; i++) {\n        if (stack.length === 0 || stack[stack.length - 1] < nums[i]) {\n            stack.push(nums[i])\n        } else {\n            longest = Math.max(longest, stack.length)\n            stack = [nums[i]]\n        }\n    }\n\n    return Math.max(longest, stack.length)\n};\n\n// const findLengthOfLCIS = (nums) => {\n//     let ans = 0, anchor = 0\n\n//     for (let i = 0; i < nums.length; i++) {\n//         if (i > 0 && nums[i-1] >= nums[i]) anchor = i\n//         ans = Math.max(ans, i - anchor + 1)\n//     }\n//     return ans\n// }","compare_result":"11111111111111111111111111111111111","title_slug":"longest-continuous-increasing-subsequence","has_notes":false}