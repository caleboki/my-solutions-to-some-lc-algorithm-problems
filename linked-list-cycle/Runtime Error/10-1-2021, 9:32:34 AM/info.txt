{"id":564004536,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1633095154,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/564004536/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\n//Time complexity: O(N) We visit each of the nn elements in the list at most once. Adding a node to the hash table costs only O(1)O(1) time.\n//Space complexity: O(N) The space depends on the number of elements added to the hash table, which contains at most nn elements.\n\n// var hasCycle = function(head) {\n//     let current = head\n//     let seen = new Map()\n    \n//     while(current) {\n//         seen.set(current)\n//         if (seen.has(current.next)) return true\n//         current = current.next\n//     }\n//     return false\n    \n// };\n\n//Time complexity: O(N)\n//Space complexity: 0(1)\nvar hasCycle = function(head) {\n    let slow = head\n    let fast = head.next\n    \n    while (slow !== fast) {\n        if (fast === null || fast.next === null) return false\n        \n        slow = slow.next\n        fast = fast.next.next\n    }\n    return true\n};","compare_result":"11100000000000000000","title_slug":"linked-list-cycle","has_notes":false}