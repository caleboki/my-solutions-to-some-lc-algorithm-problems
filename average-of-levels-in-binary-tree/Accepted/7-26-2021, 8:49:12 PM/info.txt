{"id":528836714,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 11 months","timestamp":1627346952,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/528836714/","is_pending":"Not Pending","title":"Average of Levels in Binary Tree","memory":"44.8 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n// var averageOfLevels = function(root) {\n    \n//     let result = []\n//     if (root === null) return result\n//     let queue = []\n//     let sum = 0\n    \n//     queue.push(root)\n    \n//     while(queue.length > 0) {\n//         let size = queue.length\n//         for (let i = 0; i < size; i++) {\n//             let node = queue.shift()\n            \n//             sum += node.val\n//             if (node.left !== null) {\n//                 queue.push(node.left)\n//             }\n            \n//             if (node.right !== null) {\n//                 queue.push(node.right)\n//             }\n//         }\n        \n//         result.push(sum/size)\n//         sum = 0\n//     }\n//     return result\n// };\n\nvar averageOfLevels = function(root) {\n    if (root === null) return null\n    let map = {}\n    let result = []\n    \n    const getLevel = (node, map, depth = 0) => {\n        if (!node) return null\n        \n        if (map[depth] === undefined) map[depth] = []\n        map[depth].push(node.val)\n        \n        getLevel(node.left, map, depth + 1)\n        getLevel(node.right, map, depth + 1)\n    }\n    \n    getLevel(root, map)\n    \n    const computeAverage = (arr) => {\n        let average = (arr.reduce((a, b) => a + b, 0))/arr.length\n        return average\n    }\n    \n    let values = Object.values(map)\n    \n    values.forEach(value => {\n        result.push(computeAverage(value))\n    })\n    \n    // for (let i = 0; i < values.length; i++) {\n    //     result.push(computeAverage(values[i]))\n    // }\n    \n    return result\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"average-of-levels-in-binary-tree","has_notes":false}