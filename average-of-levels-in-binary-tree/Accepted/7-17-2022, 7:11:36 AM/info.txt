{"id":749347117,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 1 week","timestamp":1658056296,"status":10,"status_display":"Accepted","runtime":"123 ms","url":"/submissions/detail/749347117/","is_pending":"Not Pending","title":"Average of Levels in Binary Tree","memory":"46.7 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar averageOfLevels = function(root) {\n    \n    let result = []\n    if (root === null) return result\n    let queue = []\n    let sum = 0\n    \n    queue.push(root)\n    \n    while(queue.length > 0) {\n        let size = queue.length\n        for (let i = 0; i < size; i++) {\n            let node = queue.shift()\n            \n            sum += node.val\n            if (node.left) queue.push(node.left)\n            if (node.right !== null) queue.push(node.right)\n        }\n        \n        result.push(sum/size)\n        sum = 0\n    }\n    return result\n};\n\n// var averageOfLevels = function(root) {\n//     if (root === null) return null\n    \n//     let map = {}\n//     let result = []\n    \n//     const getLevel = (node, map, depth = 0) => {\n//         if (!node) return null\n        \n//         // if (map[depth] === undefined) map[depth] = []\n//         // map[depth].push(node.val)\n        \n//         if (map[depth] === undefined) {\n//             map[depth] = [node.val, 1] //1 is the initial length of the array\n//         } else {\n//             map[depth][0] += node.val //increment existing value of the node with current node\n//             map[depth][1]++ //increment to 2 because there is now at most 2 nodes accounted for\n//         }\n        \n//         getLevel(node.left, map, depth + 1) //repeat process for left nodes increasing depth\n//         getLevel(node.right, map, depth + 1) //repeat process for right nodes increasing depth\n//     }\n    \n//     getLevel(root, map) //initial call with root as starting point and default depth = 0\n    \n//     const computeAverage = (arr) => {\n//         let average = arr[0]/arr[1] //average is simply the accumulated sum/number of nodes\n//         return average\n//     }\n    \n//     let values = Object.values(map)\n    \n//     values.forEach(value => {\n//         result.push(computeAverage(value))\n//     })\n    \n//     return result\n// };","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"average-of-levels-in-binary-tree","has_notes":false}