{"id":693280282,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 1 month","timestamp":1651702014,"status":10,"status_display":"Accepted","runtime":"143 ms","url":"/submissions/detail/693280282/","is_pending":"Not Pending","title":"The Maze II","memory":"50.2 MB","code":"/**\n * @param {number[][]} maze\n * @param {number[]} start\n * @param {number[]} destination\n * @return {number}\n */\n// var shortestDistance = function(maze, start, destination) {\n//     const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    \n//     const N = maze.length, M = maze[0].length\n    \n//     const queue = [[start, 0]]\n    \n//     while (queue.length) {\n//         const len = queue.length\n        \n//         for (let i = 0; i < len; i++) {\n//             const [dRow, dCol] = destination\n//             const current = queue.shift()\n//             const [row, col] = current[0]\n//             let distance = current[1]\n            \n//             if (row === dRow && dCol === dCol) return 2*distance\n            \n//             for (const [dx, dy] of directions) {\n//                 let x = row + dx\n//                 let y = col + dy\n                \n//                 while (x >= 0 && x < N && y >= 0 && y < M && maze[x][y] !== 1) {\n//                     x += dx\n//                     y += dy\n//                 }\n                \n//                 x -= dx\n//                 y -= dy\n//                 distance--\n                \n//                 if (maze[x][y] !== 0) continue\n                \n//                 queue.push([[x, y], distance + 1])\n//                 maze[x][y] = 2\n//             }\n//         }\n//     }\n//     return -1\n// };\n\n// const shortestDistance = (maze, start, destination) => {\n//     const directions = [[0, -1], [0, 1], [-1, 0], [1, 0]]\n//     const visited = new Map()\n    \n//     const N = maze.length, M = maze[0].length\n//     const queue = [[start[0], start[1], 0]]\n    \n//     const result = []\n    \n//     while (queue.length) {\n//         const [row, col, posIdx] = queue.shift()\n        \n//         for (let [dx, dy] of directions) {\n//             let [x, y, pos] = [row, col, posIdx] //copy, so as not to modify original above\n            \n//             while (x >= 0 && x < N && y >= 0 && y < M && maze[x][y] !== 1 ) {\n//                 x += dx\n//                 y += dy\n//                 pos++\n//             }\n            \n//             x -= dx\n//             y -= dy\n//             pos--\n            \n//             if (maze[x][y] === 1) continue\n            \n//             if (visited.has(x.toString() + y.toString()) && visited.get(x.toString() + y.toString()) <= pos) {\n//                 continue\n//             }\n            \n//             visited.set(x.toString() + y.toString(), pos)\n            \n            \n//             if (x === destination[0] && y === destination[1]) {\n//                 result.push(pos)\n//                 break\n//             }\n//             queue.push([x, y, pos])\n//         }\n//     }\n    \n//     if (result.length) return Math.min(...result)\n//     return -1\n// }\n\nvar shortestDistance = function(m, s, d) {\n  const dir = [[1,0], [-1,0], [0,1], [0,-1]]\n  const map = new Map()\n  const q = [[s[0], s[1], 0]] //position 0\n  const res = []\n  while(q.length){\n    const [row, col, posIdx] = q.shift()    \n    for(let [x,y] of dir){\n      let [r,c,pos] = [row, col, posIdx] // initial copy, lets no modify the original values\n      while(r>=0 && r<m.length && c>=0 && c<m[r].length && m[r][c]!==1){ \n        r+=y\n        c+=x\n        pos++\n      }      \n      // go back one\n      r-=y\n      c-=x\n      pos--\n      \n      if(m[r][c] === 1) continue\n      if(map.has(`r${r}+c${c}`) && map.get(`r${r}+c${c}`) <= pos ) continue\n      map.set(`r${r}+c${c}`, pos)\n      if(r === d[0] && c === d[1]){\n        res.push(pos)\n        break\n      }      \n      q.push([r,c,pos])\n    }      \n  }\n  if(res.length) return Math.min(...res)\n  return -1\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-maze-ii","has_notes":false}