{"id":693236429,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 1 month","timestamp":1651695482,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/693236429/","is_pending":"Not Pending","title":"The Maze II","memory":"N/A","code":"/**\n * @param {number[][]} maze\n * @param {number[]} start\n * @param {number[]} destination\n * @return {number}\n */\nvar shortestDistance = function(maze, start, destination) {\n    const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    \n    const N = maze.length, M = maze[0].length\n    \n    const queue = [[start, 0]]\n    \n    while (queue.length) {\n        const len = queue.length\n        \n        for (let i = 0; i < len; i++) {\n            const [dRow, dCol] = destination\n            const current = queue.shift()\n            const [row, col] = current[0]\n            const distance = current[1]\n            \n            if (row === dRow && dCol === dCol) return 2*distance\n            \n            for (const [dx, dy] of directions) {\n                let x = row + dx\n                let y = col + dy\n                \n                while (x >= 0 && x < N && y >= 0 && y < M && maze[x][y] !== 1) {\n                    x += dx\n                    y += dy\n                }\n                \n                x -= dx\n                y -= dy\n                \n                if (maze[x][y] !== 0) continue\n                \n                queue.push([[x, y], distance + 1])\n                maze[x][y] = 2\n            }\n        }\n    }\n    return -1\n};","compare_result":"110100000101011000101001011000000000001001010100000000000000000000000010011000","title_slug":"the-maze-ii","has_notes":false}