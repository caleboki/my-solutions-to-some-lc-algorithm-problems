{"id":933810978,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 1 week","timestamp":1681501730,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/933810978/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"51.6 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxPathSum = function(root) {\n    let maxSum = -Infinity\n    \n    const dfs = (node) => {\n        if (!node) return 0\n       \n        let left = Math.max(dfs(node.left), 0) //Math.max because of -ve nodes\n        let right = Math.max(dfs(node.right), 0) //Math.max because of -ve nodes\n       \n        let path = node.val + left + right\n        \n        maxSum = Math.max(maxSum, path)\n        \n        return node.val + Math.max(left, right)\n    }\n    \n    dfs(root)\n    return maxSum\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false}