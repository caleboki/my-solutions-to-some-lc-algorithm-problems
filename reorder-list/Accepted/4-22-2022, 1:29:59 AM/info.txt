{"id":685233801,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 2 months","timestamp":1650605399,"status":10,"status_display":"Accepted","runtime":"129 ms","url":"/submissions/detail/685233801/","is_pending":"Not Pending","title":"Reorder List","memory":"50 MB","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {void} Do not return anything, modify head in-place instead.\n */\nvar reorderList = function(head) {\n    let slow = head;\n    let fast = head;\n    \n    //finding middle\n    while(fast && fast.next){\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n    \n    //reversing\n    slow = reverse(slow);\n    \n    //reseting the fast to head\n    fast = head;\n    \n\t//when we get to end of the node break the loop\n    while(slow.next !== null){\n        let ptr1 = fast.next;  //helper pointer for the normal half\n        let ptr2 = slow.next;  //helper pointer for the reversed half\n        fast.next = slow;\n        slow.next = ptr1;\n        fast = ptr1;\n        slow = ptr2;\n    }\n    return;\n};\n\n//reverses the given node and returns new reversed\n//here, head paramenter refers to the passed in start of the linked list\nfunction reverse(head){\n    let back = null;\n    let front = head;   //technically start of given linked list\n    let curr = head;\n    \n    while(curr !== null){\n        front = front.next;\n        curr.next = back;\n        back = curr;\n        curr = front;\n    }\n    \n    return back;  //returns the head of reversed linked list\n}","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false}