{"id":781645339,"lang":"javascript","lang_name":"JavaScript","time":"10Â months","timestamp":1661296797,"status":10,"status_display":"Accepted","runtime":"106 ms","url":"/submissions/detail/781645339/","is_pending":"Not Pending","title":"Alien Dictionary","memory":"44.5 MB","code":"/**\n * @param {string[]} words\n * @return {string}\n */\nvar alienOrder = function(words) {\n    let seeing = new Set(), seen = new Set()\n    \n    const buildGraph = () => {\n        let adjList = new Map()\n    \n        for (let word of words) {\n            for (let c of word) {\n                if (!adjList.has(c)) adjList.set(c, new Set())\n            }\n        }\n        return adjList\n    }\n    \n    let graph = buildGraph()\n    console.log(graph)\n    \n    for (let i = 0; i < words.length-1; i++) {\n        let first = words[i], second = words[i+1]\n        let minLength = Math.min(first.length, second.length)\n\n        if (first.length > second.length && first.startsWith(second)) return ''\n\n        for (let j = 0; j < minLength; j++) {\n            if (first[j] !== second[j]) {\n                graph.get(first[j]).add(second[j])\n                break\n            }\n        }\n    }\n    const dfs = (start) => {\n        if (seen.has(start)) return true\n        if (seeing.has(start)) return false\n        \n        seeing.add(start)\n        \n        let edges = graph.get(start)\n        \n        for (let edge of edges) {\n            if (!dfs(edge)) return false\n        }\n            \n        seeing.delete(start)\n        seen.add(start)\n        \n        return true\n    }\n    \n    for (let i of graph.keys()) if (!dfs(i)) return ''\n    \n    if (seen.size === 0) return ''\n    \n    seen = Array.from(seen)\n    let sb = ''\n    \n    for (let i = seen.length - 1; i >= 0; i--) sb += seen[i]\n    return sb\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"alien-dictionary","has_notes":false}