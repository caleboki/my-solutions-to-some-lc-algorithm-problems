{"id":779004593,"lang":"javascript","lang_name":"JavaScript","time":"10Â months","timestamp":1661046690,"status":10,"status_display":"Accepted","runtime":"218 ms","url":"/submissions/detail/779004593/","is_pending":"Not Pending","title":"Search Suggestions System","memory":"53.5 MB","code":"/**\n * @param {string[]} products\n * @param {string} searchWord\n * @return {string[][]}\n */\n// var suggestedProducts = function(products, searchWord) {\n//     if (products.length === 0 || searchWord.length === 0) return []\n    \n//     let result = []\n    \n//     searchWord = searchWord.toLowerCase()\n//     products = products.map(function(v) {\n//         return v.toLowerCase()\n//     })\n    \n//     for (let i = 0; i < searchWord.length; i++) {\n//         let matches = []\n//         for (let j = 0; j < products.length; j++) {\n//             let strP = products[j].substring(0, i+2).toLowerCase()\n//             let strS = searchWord.substring(0, i+2).toLowerCase()\n            \n//             if (strP === strS) matches.push(products[j])\n//         }\n//         matches.sort()\n//         if (matches.length > 3) matches.length = 3\n//         result.push(matches)\n//     }\n//     return result\n// };\n\n// const suggestedProducts = (products, searchWord) => {\n//     //products.sort()\n    \n//     let trie = new Trie(), result = []\n//     const dfs = () => {}\n    \n//     const findTopThree = (root, searchTerm) => {\n//         let result = []\n        \n//         let node = root\n        \n//         for (let i = 0; i < searchTerm.length; i++) {\n//             if (!(searchTerm[i] in node)) return result\n//             node = node[searchTerm[i]]\n//         }\n        \n//         if (node.word) result.push(searchTerm)\n        \n//         for (let child of node[searchTerm[i]]) {\n//             if (!child) {\n//                 let thisResult = dfs(child, searchTerm, [])\n//             }\n//         }\n        \n//         return result\n        \n//     }\n    \n//     products.forEach(product => trie.insert(product))\n    \n//     for (let i = 1; i <= searchWord.length; i++) {\n//         result.push(findTopThree(searchWord.substring(0, i)))\n//     }\n    \n//     return result\n    \n    \n// }\n\n// class Trie {\n//     constructor() {\n//         this.trie = {}\n//     }\n    \n//     insert(word) {\n        \n//         let cur = this.trie\n//         for(let alpha of word){\n//             if(!(alpha in cur)) cur[alpha] = {}\n//             cur = cur[alpha]\n//         }\n//         cur.word = word\n//     }\n    \n//     search(word) {\n//         let cur = this.trie\n//         for(let alpha of word){\n//             if(!(alpha in cur)) return false\n//             if(cur[alpha].word === word) return true\n//             cur = cur[alpha]\n//         }        \n//         return false  \n//     }\n    \n//     startsWith(prefix) {\n//         let cur = this.trie\n//         for(let alpha of prefix){\n//             if(!(alpha in cur)) return false\n//             cur = cur[alpha]\n//         }\n//         return true\n//     }\n    \n// }\n\nconst suggestedProducts = (products, searchWord) => {\n    products.sort()\n    \n    let result = []\n    \n    for (let i = 1; i < searchWord.length + 1; i++) {\n        let searchTerm = searchWord.substring(0, i)\n        \n        let matches = []\n        \n        for (let product of products) {\n            if (product.startsWith(searchTerm)) matches.push(product)\n            if (matches.length === 3) break\n        }\n        \n        result.push(matches)\n    }\n    return result\n    \n}\n\n","compare_result":"11111111111111111111111111111111111111111","title_slug":"search-suggestions-system","has_notes":false}