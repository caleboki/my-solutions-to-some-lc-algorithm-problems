{"id":513718363,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 12 months","timestamp":1624762265,"status":10,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/513718363/","is_pending":"Not Pending","title":"House Robber","memory":"38 MB","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\n\n//https://leetcode.com/problems/house-robber/discuss/1299367/DP-Explanation\nvar rob = function(nums) {\n    //this problem should satisfy this dynamic programming relationship\n    //rob = max(nums[0] + rob(nums[2:n]), rob(nums[1:n]))\n    \n    let rob1 = 0, rob2 = 0\n    \n    for (let i = 0; i < nums.length; i++) {\n        let temp = Math.max(nums[i] + rob1, rob2)\n        rob1 = rob2\n        rob2 = temp\n    }\n    return rob2\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber","has_notes":false}