{"id":689892274,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 1 month","timestamp":1651268029,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/689892274/","is_pending":"Not Pending","title":"Reconstruct Itinerary","memory":"N/A","code":"/**\n * @param {string[][]} tickets\n * @return {string[]}\n */\nvar findItinerary = function(tickets) {\n    \n    const buildGraph = (edges) => {\n        const graph = {}\n        \n        for (let edge of edges) {\n            if (!(edge[0] in graph)) graph[edge[0]] = []\n            if (!(edge[1] in graph)) graph[edge[1]] = []\n            \n            graph[edge[0]].push(edge[1])\n            graph[edge[1]].push(edge[0])\n        }\n        \n        return graph\n    }\n    \n    let graph = buildGraph(tickets), result = ['JFK']\n    for (a in graph) graph[a].sort()\n    console.log(graph)\n    const dfs = (start, graph, visited = new Set()) => {\n        visited.add(start)\n        \n        const destinations = graph[start]\n        for (let destination of destinations) {\n            if (!visited.has(destination)) {\n                result.push(destination)\n                dfs(destination, graph, visited) \n            }\n            \n        }\n        \n    }\n    \n//     const bfs = (start) => {\n//         const queue = [start]\n//         const visited = new Set()\n        \n//         while (queue.length > 0) {\n//             const airport = queue.shift()\n//             const destinations = graph[airport]\n            \n//             for (let destination of destinations) {\n//                 if (destination === 'JFK') result.push()\n//             }\n//         }\n//     }\n    \n    \n    dfs('JFK', graph)\n    return result\n    \n};","compare_result":"10100000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"reconstruct-itinerary","has_notes":false}