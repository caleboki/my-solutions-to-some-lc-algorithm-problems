{"id":725319429,"lang":"javascript","lang_name":"JavaScript","time":"1Â year","timestamp":1655576080,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/725319429/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} target\n * @param {number} k\n * @return {number[]}\n */\nvar distanceK = function(root, target, k) {\n    \n    if (!root || !target) return []\n    if (k === 0) return [target]\n    \n    //turn the tree into into a graph\n    \n    //do bfs on the graph\n    \n    const treeToGraph = (root) => {\n        let adjList = {}\n        let queue = [root]\n        //queue.push(root)\n        \n        while (queue.length) {\n            let current = queue.shift()\n            \n            if (!(current in adjList)) {\n                adjList[current] = []\n            }\n            //add child to parent adjlist\n            //add parent to child adjlist\n            //add child to queue\n            \n            if (current.left) {\n                adjList[current].push(current.left)\n                \n                if (!(current.left in adjList)) adjList[current.left] = []\n                adjList[current.left].push(current)\n                \n                queue.push(current.left)\n            }\n            \n            if (current.right) {\n                adjList[current].push(current.right)\n                \n                if (!(current.right in adjList)) adjList[current.right] = []\n                adjList[current.right].push(current)\n                \n                queue.push(current.right)\n            }\n        }\n        \n        return adjList\n    }\n    \n    const adjList = treeToGraph(root)\n    \n    let result = [], depth = 0, visited = new Set()\n    let queue = [target] //start from target node\n    \n    while (queue.length && depth <= k) {\n        for (let i = 0; i < queue.length; i++) {\n            let current = queue.shift()\n            \n            for (let child of adjList[current]) {\n                \n            }\n        }\n    }\n    \n    return result\n   \n   \n    \n};","compare_result":"010000000000000000000000000000001000010000100100110101100","title_slug":"all-nodes-distance-k-in-binary-tree","has_notes":false}