{"id":735997660,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 3 weeks","timestamp":1656695098,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/735997660/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"52.1 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function(root, p, q) {\n    let ans = null\n    \n    const dfs = (node) => {\n        if (!node) return false\n        \n        let left = dfs(node.left, p, q) ? 1 : 0\n        let right = dfs(node.right, p, q) ? 1 : 0\n        let mid = (node === p || node === q) ? 1 : 0\n        \n        if (mid + left + right >= 2) ans = node\n        \n        return (mid + left + right > 0)\n    }\n    \n    dfs(root, p, q)\n    return ans\n    \n};","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false}