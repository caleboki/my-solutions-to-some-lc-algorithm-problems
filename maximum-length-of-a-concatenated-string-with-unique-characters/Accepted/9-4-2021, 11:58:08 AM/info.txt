{"id":549406214,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 9 months","timestamp":1630771088,"status":10,"status_display":"Accepted","runtime":"115 ms","url":"/submissions/detail/549406214/","is_pending":"Not Pending","title":"Maximum Length of a Concatenated String with Unique Characters","memory":"45.3 MB","code":"/**\n * @param {string[]} arr\n * @return {number}\n */\n// var maxLength = function(arr) {\n//     let results = [\"\"]\n//     let best = 0\n    \n//     for (let word of arr) {\n//         let resultsLen = results.length\n//         for (let i = 0; i < resultsLen; i++) {\n//             let newRes = results[i] + word\n            \n//             let newResSet = new Set(newRes.split(\"\"))\n         \n//             if (newRes.length !== newResSet.size) continue //i.e sub-sequence is not unique\n            \n//             results.push(newRes)\n//             best = Math.max(best, newRes.length)\n//         }\n        \n//     }\n//     return best\n    \n// };\n\nvar maxLength = function(arr) {\n    const dfs = (arr, position, resMap) => {\n        for (let value of resMap.values()) if (value > 1) return 0\n        let best = resMap.size\n        \n        for (let i = position; i < arr.length; i++) {\n            let word = arr[i]\n            for (let c of word) resMap.set(c, (resMap.get(c) || 0) + 1)\n            best = Math.max(best, dfs(arr, i+1, resMap))\n            \n            for (let c of word) {\n                if (resMap.get(c) === 1) {\n                    resMap.delete(c)\n                } else {\n                    resMap.set(c, resMap.get(c) - 1)\n                }\n            }\n        }\n        return best\n    }\n    return dfs(arr, 0, new Map())\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-length-of-a-concatenated-string-with-unique-characters","has_notes":false}