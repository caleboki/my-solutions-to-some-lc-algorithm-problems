{"id":557196409,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 9 months","timestamp":1632006780,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/557196409/","is_pending":"Not Pending","title":"Course Schedule II","memory":"N/A","code":"/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {number[]}\n */\n// var findOrder = function(numCourses, prerequisites) {\n//     let isPossible = true\n//     let s = []\n    \n//     if (prerequisites.length === 0) {\n//         for (let i = 0; i < numCourses; i++) {\n//             s.push(i)\n//         }\n//         return s\n//     }\n    \n//     let adjList = new Map()\n    \n//     const addNode = (course) => {\n//         adjList.set(course, [])\n//     }\n    \n//     const addEdge = (edge1, edge2) => {\n//         adjList.get(edge2).push(edge1)\n//     }\n    \n//     const dfs = (start, map, visited = new Map()) => {\n//         visited.set(start)\n//         const edges = map.get(start)\n        \n//         for (edge of edges) {\n//             if (!visited.has(edge)) dfs(edge, map, visited)\n            \n//         }\n       \n//         s.push(start)\n      \n        \n//     }\n    \n//     for (let i = 0; i < numCourses; i++) {\n//         addNode(i)\n//     }\n    \n//     for (let i = 0; i < prerequisites.length; i++) {\n//         addEdge(prerequisites[i][0], prerequisites[i][1])\n//     }\n    \n//     console.log(adjList)\n    \n//     dfs(prerequisites[0][1], adjList)\n\n//     return (s.reverse())\n   \n// };\n\nvar findOrder = function(numCourses, prerequisites) {\n    let s = []\n    let adjList = new Map()\n    \n    const addNode = (course) => {\n        adjList.set(course, [])\n    }\n    \n    const addEdge = (edge1, edge2) => {\n        adjList.get(edge2).push(edge1)\n    }\n    \n    const dfs = (start, map, visited = new Set(), cycle = new Set()) => {\n        if (cycle.has(start)) return false\n        if (visited.has(start)) return true\n        \n        cycle.add(start)\n        visited.add(start)\n        \n        const edges = map.get(start)\n        \n        for (edge of edges) {\n            if (!dfs(edge, map, visited, cycle)) return false\n            continue\n        }\n        \n        cycle.delete(start)\n        s.push(start)\n        \n        return true\n   \n    }\n    \n    for (let i = 0; i < numCourses; i++) {\n        addNode(i)\n    }\n    \n    for (let i = 0; i < prerequisites.length; i++) {\n        addEdge(prerequisites[i][0], prerequisites[i][1])\n    }\n    \n    //console.log(adjList)\n    \n    dfs(prerequisites[0][1], adjList)\n    \n    return s.reverse()\n    \n    \n}","compare_result":"11000000000000000000000000000000000000000000","title_slug":"course-schedule-ii","has_notes":false}