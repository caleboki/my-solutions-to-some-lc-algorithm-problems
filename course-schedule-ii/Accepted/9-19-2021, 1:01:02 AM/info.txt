{"id":557342681,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 9 months","timestamp":1632027662,"status":10,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/557342681/","is_pending":"Not Pending","title":"Course Schedule II","memory":"45.9 MB","code":"/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {number[]}\n */\n// var findOrder = function(numCourses, prerequisites) {\n//     let isPossible = true\n//     let s = []\n    \n//     if (prerequisites.length === 0) {\n//         for (let i = 0; i < numCourses; i++) {\n//             s.push(i)\n//         }\n//         return s\n//     }\n    \n//     let adjList = new Map()\n    \n//     const addNode = (course) => {\n//         adjList.set(course, [])\n//     }\n    \n//     const addEdge = (edge1, edge2) => {\n//         adjList.get(edge2).push(edge1)\n//     }\n    \n//     const dfs = (start, map, visited = new Map()) => {\n//         visited.set(start)\n//         const edges = map.get(start)\n        \n//         for (edge of edges) {\n//             if (!visited.has(edge)) dfs(edge, map, visited)\n            \n//         }\n       \n//         s.push(start)\n      \n        \n//     }\n    \n//     for (let i = 0; i < numCourses; i++) {\n//         addNode(i)\n//     }\n    \n//     for (let i = 0; i < prerequisites.length; i++) {\n//         addEdge(prerequisites[i][0], prerequisites[i][1])\n//     }\n    \n//     console.log(adjList)\n    \n//     dfs(prerequisites[0][1], adjList)\n\n//     return (s.reverse())\n   \n// };\n\n// var findOrder = function(numCourses, prerequisites) {\n//     let s = []\n//     let adjList = new Map()\n    \n//     const addNode = (course) => {\n//         adjList.set(course, [])\n//     }\n    \n//     const addEdge = (edge1, edge2) => {\n//         adjList.get(edge2).push(edge1)\n//     }\n    \n//     const dfs = (start, map, visited = new Set(), cycle = new Set()) => {\n//         if (cycle.has(start)) return false\n//         if (visited.has(start)) return true\n        \n//         cycle.add(start)\n//         visited.add(start)\n        \n//         const edges = map.get(start)\n        \n//         for (edge of edges) {\n//             if (!dfs(edge, map, visited, cycle)) return false\n//             continue\n//         }\n        \n//         cycle.delete(start)\n//         s.push(start)\n        \n//         return true\n   \n//     }\n    \n//     for (let i = 0; i < numCourses; i++) {\n//         addNode(i)\n//     }\n    \n//     for (let i = 0; i < prerequisites.length; i++) {\n//         addEdge(prerequisites[i][0], prerequisites[i][1])\n//     }\n    \n//     for (let i = 0; i < numCourses; i++) {\n//        if (!dfs(i, adjList)) return []\n//     }\n    \n//     return s.reverse()\n// }\n\n// var findOrder = function(numCourses, prerequisites) {\n//     const adjList = new Map()\n//     const s = []\n    \n//     const seeing = new Set(), seen = new Set()\n    \n//     const addNode = (course) => {\n//         adjList.set(course, [])\n//     }\n    \n//     const addEdge = (edge1, edge2) => {\n//         adjList.get(edge2).push(edge1)\n//     }\n    \n//     const dfs = (start) => {\n//         if (seen.has(start)) return true\n//         if (seeing.has(start)) return false\n        \n//         seeing.add(start)\n//         const edges = adjList.get(start)\n        \n//         for (edge of edges) {\n//             if (!dfs(edge)) return false\n//         }\n        \n//         seeing.delete(start)\n//         seen.add(start)\n        \n//         return true\n//     }\n    \n//     for (let i = 0; i < numCourses; i++) {\n//         addNode(i)\n//     }\n    \n//     for (let i = 0; i < prerequisites.length; i++) {\n//         addEdge(prerequisites[i][0], prerequisites[i][1])\n//     }\n    \n//     //console.log(adjList)\n//     dfs(0)\n//     return [...seen].reverse()\n// }\n\nvar findOrder = function (numCourses, prerequisites) {\n    const seen = new Set();\n    const seeing = new Set();\n    const adj = [...Array(numCourses)].map((_) => []);\n    for (const [a, b] of prerequisites) {\n        adj[a].push(b);\n    }\n    for (let v = 0; v < numCourses; v++) {\n        if (!dfs(v)) return [];\n    }\n    return [...seen];\n\n    function dfs(v) {\n        if (seen.has(v)) return true;\n        if (seeing.has(v)) return false;\n        seeing.add(v);\n        for (const neighbour of adj[v]) {\n            if (!dfs(neighbour)) return false;\n        }\n        seeing.delete(v);\n        seen.add(v);\n        return true;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"course-schedule-ii","has_notes":false}