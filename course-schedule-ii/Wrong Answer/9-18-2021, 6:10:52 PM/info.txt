{"id":557175476,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 9 months","timestamp":1632003052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/557175476/","is_pending":"Not Pending","title":"Course Schedule II","memory":"N/A","code":"/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {number[]}\n */\nvar findOrder = function(numCourses, prerequisites) {\n    let isPossible = true\n    let s = []\n    \n    if (prerequisites.length === 0) {\n        for (let i = 0; i < numCourses; i++) {\n            s.push(i)\n        }\n        return s\n    }\n    \n    let adjList = new Map()\n    \n    const addNode = (course) => {\n        adjList.set(course, [])\n    }\n    \n    const addEdge = (edge1, edge2) => {\n        adjList.get(edge2).push(edge1)\n    }\n    \n    const dfs = (start, map, visited = new Map()) => {\n        visited.set(start)\n        const edges = map.get(start)\n        \n        for (edge of edges) {\n            if (!visited.has(edge)) {\n                dfs(edge, map, visited)\n                if (s=[]) return\n            } else if (s.includes(edge)) {\n                s = []\n                return\n            }\n        }\n       \n        s.push(start)\n      \n        \n    }\n    \n    for (let i = 0; i < numCourses; i++) {\n        addNode(i)\n    }\n    \n    for (let i = 0; i < prerequisites.length; i++) {\n        addEdge(prerequisites[i][0], prerequisites[i][1])\n    }\n    \n    console.log(adjList)\n    \n    dfs(prerequisites[0][1], adjList)\n\n    return (s.reverse())\n   \n};","compare_result":"00110111000001011111111110111000100111010001","title_slug":"course-schedule-ii","has_notes":false}