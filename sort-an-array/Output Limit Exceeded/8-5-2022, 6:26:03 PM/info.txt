{"id":766231810,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 2 weeks","timestamp":1659738363,"status":13,"status_display":"Output Limit Exceeded","runtime":"N/A","url":"/submissions/detail/766231810/","is_pending":"Not Pending","title":"Sort an Array","memory":"N/A","code":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\n// var sortArray = function(nums) {\n//     if (nums.length <= 1) return nums\n//     let mid = Math.floor(nums.length/2)\n    \n//     let pivot = nums.splice(mid, 1), left = [], right = [], newData = []\n    \n//     for (let num of nums) {\n//         if (num < pivot) {\n//             left.push(num)\n//         } else {\n//             right.push(num)\n//         }\n//     }\n    \n//     return [...sortArray(left), pivot, ...sortArray(right)]\n// };\n\n//USING HEAP SORT\n\n// class MinHeap{\n//   constructor(){\n//       this.storage = [];\n//       this.size = 0;\n//   }\n\n//   getLeftChildIndex(index){\n//       return 2 * index + 1;\n//   }\n\n//   getRightChildIndex(index){\n//       return 2 * index + 2;\n//   }\n\n//   getParentIndex(index){\n//       return Math.floor((index - 1) / 2)\n//   }\n\n//   hasLeftChild(index){\n//       return this.getLeftChildIndex(index) < this.size;\n//   }\n\n//   hasRightChild(index){\n//       return this.getRightChildIndex(index) < this.size;\n//   }\n\n//   hasParent(index){\n//       return this.getParentIndex(index) >= 0;\n//   }\n\n//   leftChild(index){\n//       return this.storage[this.getLeftChildIndex(index)];\n//   }\n\n//   rightChild(index){\n//       return this.storage[this.getRightChildIndex(index)];\n//   }\n\n//   parent(index){\n//       return this.storage[this.getParentIndex(index)];\n//   }\n\n//   isFull(){\n//       return this.size == this.capacity;\n//   }\n\n//   swap(index1,index2){\n//       let temp = this.storage[index1];\n//       this.storage[index1] = this.storage[index2];\n//       this.storage[index2] = temp;\n//   }\n\n//   insert(data){\n//       this.storage[this.size] = data;\n//       this.size += 1;\n//       this.heapifyUp();\n//   }\n\n//   heapifyUp(){\n//        let index = this.size - 1;\n//        while(this.hasParent(index) &&\n//                this.parent(index) > this.storage[index]){\n//           this.swap(this.getParentIndex(index),index);\n//           index = this.getParentIndex(index);\n//        }\n//   }\n\n//   removeMin(){\n//       if(this.size == 0)\n//           throw new Error(\"Empty Heap\");\n//       let data = this.storage[0];\n//       this.storage[0] = this.storage[this.size - 1];\n//       this.size -= 1;\n//       this.heapifyDown();\n//       return data;\n//   }\n\n//   heapifyDown(){\n//       let index = 0;\n//       while(this.hasLeftChild(index)){\n//           let smallerChildIndex = this.getLeftChildIndex(index);\n//           if(this.hasRightChild(index) && this.rightChild(index) < this.leftChild(index))\n//               smallerChildIndex = this.getRightChildIndex(index);\n//           if(this.storage[index] < this.storage[smallerChildIndex])\n//               break;\n//           else\n//               this.swap(index,smallerChildIndex);\n//           index = smallerChildIndex;\n//       }\n//   }\n// }\n\n// const sortArray = (nums) => {\n//     let result = [], heap1 = new MinHeap()\n    \n//     for (let i = 0; i < nums.length; i++) {\n//         heap1.insert(nums[i])\n//     }\n    \n//     for (let i = 0; i < nums.length; i++) {\n//         result.push(heap1.removeMin())\n//     } \n//     return result\n// }\n\nconst sortArray = (nums) => {\n    let mid = Math.floor(nums.length/2)\n    \n    if (nums.length <= 1) return nums\n    \n    let left = nums.splice(0, mid)\n    let right = nums\n    \n    const merge = (l, r) => {\n        let result = []\n        \n        while (l.length > 0 && r.length > 0) {\n            if (l[0] < r[0]) {\n                result.push(l.shift())\n            } else {\n                result.push(r.shift())\n            }\n            console.log(result)\n        }\n        \n        return [...result, ...l, ...r]\n        \n    }\n    \n    return merge(sortArray(left), sortArray(right))\n    \n}","compare_result":"1111111110000","title_slug":"sort-an-array","has_notes":false}