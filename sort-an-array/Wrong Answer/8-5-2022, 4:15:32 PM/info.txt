{"id":766171270,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 3 weeks","timestamp":1659730532,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/766171270/","is_pending":"Not Pending","title":"Sort an Array","memory":"N/A","code":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\n// var sortArray = function(nums) {\n//     if (nums.length <= 1) return nums\n//     let mid = Math.floor(nums.length/2)\n    \n//     let pivot = nums.splice(mid, 1), left = [], right = [], newData = []\n    \n//     for (let num of nums) {\n//         if (num < pivot) {\n//             left.push(num)\n//         } else {\n//             right.push(num)\n//         }\n//     }\n    \n//     return [...sortArray(left), pivot, ...sortArray(right)]\n// };\n\n//USING HEAP SORT\n\nclass minHeap {\n    constructor() {\n        this.heap = []\n    }\n    \n    parentIndex(index) {\n        return Math.floor((index-1)/2)\n    }\n    \n    leftChildIndex(index) {\n        return (2*index + 1)\n    }\n\n    rightChildIndex(index){\n        return (2*index + 2)\n    }\n\n    parent(index) {\n        return this.heap[this.parentIndex[index]]\n    }\n    \n    insert(data) {\n        this.heap.push(data)\n        this.heapifyUp()\n    }\n    \n    delete() {\n        let item = this.heap.shift()\n        this.heap.unshift(this.heap.pop())\n        this.heapifyDown()\n        \n        return item\n    }\n    \n    swap(a, b) {\n        let temp = this.heap[a]\n        this.heap[a] = this.heap[b]\n        this.heap[b] = temp\n    }\n    \n    heapifyUp() {\n        let index = this.heap.length - 1\n        let parent = this.parentIndex(index)\n\n        while (this.heap[parent] && this.heap[parent] > this.heap[index]) {\n          this.swap(parent, index)\n          index = this.parentIndex(index)\n          parent = this.parentIndex(index)\n        }\n    }\n    \n    heapifyDown() {\n        let index = 0\n        let leftChild = this.leftChildIndex(index)\n        let rightChild = this.rightChildIndex(index)\n        \n        while (this.heap[leftChild] && this.heap[leftChild] < this.heap[index] || this.heap[rightChild] < this.heap[index] ) \n        {\n            let max = leftChild\n\n            if(this.heap[rightChild] && this.heap[rightChild] < this.heap[max]){\n                max = rightChild\n            }\n            this.swap(max, index)\n            index = max\n            leftChild = this.leftChildIndex(max)\n            rightChild = this.rightChildIndex(max)\n\n        }\n    }\n    \n}\n\nconst sortArray = (nums) => {\n    let result = [], heap1 = new minHeap()\n    \n    for (let i = 0; i < nums.length; i++) {\n        heap1.insert(nums[i])\n    }\n    \n    for (let i = 0; i < nums.length; i++) {\n        result.push(heap1.delete())\n    } \n    return result\n    \n}","compare_result":"1011110110011","title_slug":"sort-an-array","has_notes":false}