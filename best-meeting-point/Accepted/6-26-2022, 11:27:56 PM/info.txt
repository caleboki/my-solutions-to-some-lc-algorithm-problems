{"id":732227409,"lang":"javascript","lang_name":"JavaScript","time":"12Â months","timestamp":1656300476,"status":10,"status_display":"Accepted","runtime":"125 ms","url":"/submissions/detail/732227409/","is_pending":"Not Pending","title":"Best Meeting Point","memory":"46.5 MB","code":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minTotalDistance = function(grid) {\n  // rows and cols collected here are sorted already\n  // takes the advantage of going in rows first or column first order\n  let rows = collectRows1D(grid);\n  let cols = collectColumns1D(grid);\n  \n  // median gets the smallest standard deviation, so \n  // we collect medians for both rows and columns\n  let medianRows = rows[Math.floor(rows.length/2)];\n  let medianCols = cols[Math.floor(cols.length/2)];\n  \n  // rows and column distance is independent to each other, because we want\n  // to calculate manhattan distance (addition of rows and columns walked)\n  return minDistance(rows, medianRows) + minDistance(cols, medianCols);\n};\n\nfunction minDistance(list, median) {\n  let distance = 0;\n  for(let item of list) {\n    distance += Math.abs(median-item);\n  }\n  return distance;\n}\n\n// collect row indices in sorted order\nfunction collectRows1D(grid) {\n  let result = [];\n  for(let i = 0; i < grid.length; i++) {\n    for(let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        result.push(i);\n      }\n    }\n  }\n  return result;\n}\n\n// collect column indices in sorted order\nfunction collectColumns1D(grid) {\n  let result = [];\n  for(let i = 0; i < grid[0].length; i++) {\n    for(let j = 0; j < grid.length; j++) {\n      if (grid[j][i] === 1) {\n        result.push(i);\n      }\n    }\n  }\n  return result;\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"best-meeting-point","has_notes":false}