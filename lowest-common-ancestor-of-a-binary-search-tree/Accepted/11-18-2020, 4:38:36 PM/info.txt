{"id":421768953,"lang":"javascript","lang_name":"JavaScript","time":"2 years, 7 months","timestamp":1605735516,"status":10,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/421768953/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"48.7 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function(root, p, q) {\n    var parentVal = root.val;\n    var pVal = p.val;\n    var qVal = q.val;\n    \n    if (pVal > parentVal && qVal > parentVal) {\n        return lowestCommonAncestor(root.right, p, q);\n    }\n    else if (pVal < parentVal && qVal < parentVal) {\n        return lowestCommonAncestor(root.left, p, q);\n    }\n    else {\n        return root;\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false}