{"id":769422195,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 2 weeks","timestamp":1660058366,"status":10,"status_display":"Accepted","runtime":"117 ms","url":"/submissions/detail/769422195/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"42.3 MB","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\n// var maxProduct = function(nums) {\n//     if (nums.length === 1) return nums[0]\n//     if (nums.length === 0) return []\n//     let current = nums[0] === 0 ? 1 : nums[0]\n//     let max = nums[0]\n    \n//     for (let i = 1; i < nums.length; i++) {\n//        let num = nums[i]\n//        current =  current * num\n//         max = Math.max(max, current)\n//     }\n    \n//     return max\n// };\n\n\nconst maxProduct = (nums) => {\n    if (nums.length === 0) return 0\n    \n    let max = nums[0]\n    let min = nums[0]\n    let result = max\n    \n    for (let i = 1; i < nums.length; i++) {\n        let num = nums[i]\n        let temp = Math.max(num, Math.max(max * num, min * num))\n        min = Math.min(num, Math.min(max * num, min * num))\n        \n        max = temp\n        result = Math.max(max, result)\n    }\n    \n    return result\n    \n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-subarray","has_notes":false}