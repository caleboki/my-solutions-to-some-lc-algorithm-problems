{"id":768984514,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 2 weeks","timestamp":1660018465,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/768984514/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"N/A","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxProduct = function(nums) {\n    if (nums.length === 1) return nums[0]\n    if (nums.length === 0) return []\n    let current = nums[0] === 0 ? 1 : nums[0]\n    let max = nums[0]\n    \n    for (let i = 1; i < nums.length; i++) {\n       let num = nums[i]\n       current =  current * num\n        max = Math.max(max, current)\n    }\n    \n    return max\n};\n\n\n// var maxSubArray = function(nums) {\n    \n//     if (nums.length === 1) return nums[0];\n//     if (nums.length === 0) return [];\n//     let current = nums[0];\n//     let max = nums[0];\n    \n//     for (let i = 1; i < nums.length; i++) {\n//         let num = nums[i];\n//         current = Math.max(num, current + num);\n//         max = Math.max(max, current);\n//     }\n    \n//     return max;\n    \n// };","compare_result":"11111111111101110011000111111110011011011110100101111111010111110111101101111101011111101011000101011101011101111110111100111011001111110000110101111011111101111010110011111101000101010011","title_slug":"maximum-product-subarray","has_notes":false}