{"id":768976097,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 2 weeks","timestamp":1660017671,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/768976097/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"N/A","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxProduct = function(nums) {\n    if (nums.length === 1) return nums[0]\n    if (nums.length === 0) return []\n    let current = nums[0] === 0 ? 1 : nums[0]\n    let max = nums[0]\n    \n    for (let i = 1; i < nums.length; i++) {\n       let num = nums[i]\n       current = Math.max(num, current * num)\n        max = Math.max(max, current)\n    }\n    \n    return max\n};\n\n\n// var maxSubArray = function(nums) {\n    \n//     if (nums.length === 1) return nums[0];\n//     if (nums.length === 0) return [];\n//     let current = nums[0];\n//     let max = nums[0];\n    \n//     for (let i = 1; i < nums.length; i++) {\n//         let num = nums[i];\n//         current = Math.max(num, current + num);\n//         max = Math.max(max, current);\n//     }\n    \n//     return max;\n    \n// };","compare_result":"11111111111110101101000000111110111111110101111110011101011011111111011111111111111010101011110101010110100010010011110010101001111000011011000100111000110011100101100011010001000000000001","title_slug":"maximum-product-subarray","has_notes":false}