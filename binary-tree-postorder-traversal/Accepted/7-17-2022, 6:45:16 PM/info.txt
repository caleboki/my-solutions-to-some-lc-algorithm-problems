{"id":749778168,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 1 week","timestamp":1658097916,"status":10,"status_display":"Accepted","runtime":"71 ms","url":"/submissions/detail/749778168/","is_pending":"Not Pending","title":"Binary Tree Postorder Traversal","memory":"42.4 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n//Postorder: Left, Right, Root\n// var postorderTraversal = function(root) {\n//     const nodeValues = []\n    \n//     const dfs = (node) => {\n//         if (!node) return\n        \n//         dfs(node.left)\n//         dfs(node.right)\n//         nodeValues.push(node.val)  \n//     }\n    \n//     dfs(root)\n    \n//     return nodeValues\n// };\n\nconst postorderTraversal = (root, result = []) => {\n    if (!root) return result\n    result.push(...postorderTraversal(root.left), ...postorderTraversal(root.right), root.val)\n    return result\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-postorder-traversal","has_notes":false}