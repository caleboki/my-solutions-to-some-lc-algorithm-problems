{"id":934728864,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 1 week","timestamp":1681652009,"status":10,"status_display":"Accepted","runtime":"69 ms","url":"/submissions/detail/934728864/","is_pending":"Not Pending","title":"Insert Interval","memory":"43.9 MB","code":"/**\n * @param {number[][]} intervals\n * @param {number[]} newInterval\n * @return {number[][]}\n */\n// var insert = function(intervals, newInterval) {\n//     if(!intervals.length) return [newInterval]\n    \n//     let inserted = false\n//     // insert the newInterval in the correct spot i.e sorting by start time\n//     for(let i = 0; i < intervals.length; i++) {\n//         const start = intervals[i][0]\n//         if(newInterval[0] <= start) {\n//             intervals.splice(i, 0, newInterval) //put newInterval in i's place shifting i\n//             inserted = true\n//             break\n//         }\n//     }\n//     if(!inserted) intervals.push(newInterval);\n    \n//     const result = [intervals[0]]\n//     // merge overlapping intervals\n//     for(let i = 1; i < intervals.length; i++) {\n            \n//         const [prevStart, prevEnd] = result[result.length-1]\n//         const [currStart, currEnd] = intervals[i]\n        \n//         if(currStart > prevEnd) {\n//             result.push(intervals[i]);\n//             continue;\n//         }\n//         const newStart = Math.min(prevStart, currStart);\n//         const newEnd = Math.max(prevEnd, currEnd);\n//         result.pop()\n//         result.push([newStart, newEnd]);\n//     }\n//     return result;\n// };\n\nconst insert = (intervals, newInterval) => {\n    intervals.push(newInterval)\n\n    const merge = (intervals) => {\n        let merged = []\n        intervals.sort((a, b) => {return a[0] - b[0]})\n\n        for (let interval of intervals) {\n            if (merged.length === 0 || merged[merged.length - 1][1] < interval[0]) {\n                merged.push(interval)\n            } \n            else {\n                merged[merged.length - 1][1] = Math.max(merged[merged.length - 1][1], interval[1])\n            }\n        }\n        return merged\n    }\n\n    return merge(intervals)\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"insert-interval","has_notes":false}