{"id":700891104,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 1 month","timestamp":1652726855,"status":10,"status_display":"Accepted","runtime":"243 ms","url":"/submissions/detail/700891104/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"73.6 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */\n/**\n * @constructor\n * @param {NestedInteger[]} nestedList\n */\n// var NestedIterator = function(nestedList) {\n//     this.queue = flatten(nestedList)\n// };\n\n\n// /**\n//  * @this NestedIterator\n//  * @returns {boolean}\n//  */\n// NestedIterator.prototype.hasNext = function() {\n//    return this.queue.length !== 0\n\n// };\n\n// /**\n//  * @this NestedIterator\n//  * @returns {integer}\n//  */\n// NestedIterator.prototype.next = function() {\n//     return this.queue.shift()\n// };\n\n// function flatten(arr, result = []){\n//     for (let i = 0; i < arr.length; i++) {\n//         if (arr[i].isInteger()) {\n//             result.push(arr[i].getInteger())\n//         } else {\n//             flatten(arr[i].getList(), result)\n//         }\n//     }\n//     return result\n    \n// }\n\n/**\n * Your NestedIterator will be called like this:\n * var i = new NestedIterator(nestedList), a = [];\n * while (i.hasNext()) a.push(i.next());\n*/\n\nclass NestedIterator {\n    \n    constructor(nestedList) {\n        this.queue = this.flatten(nestedList)\n    }\n    \n    hasNext() {\n        return this.queue.length !== 0\n    }\n    \n    next() {\n        return this.queue.shift()\n    }\n    \n    flatten(arr, result = []) {\n        if (arr.length === 0) return result\n        \n        let first = arr[0]\n        let rest = arr.slice(1)\n        \n        if (!first.isInteger()) return this.flatten(first.getList().concat(rest), result)\n        \n        result.push(first.getInteger())\n        \n        return this.flatten(rest, result)\n    }\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator","has_notes":false}