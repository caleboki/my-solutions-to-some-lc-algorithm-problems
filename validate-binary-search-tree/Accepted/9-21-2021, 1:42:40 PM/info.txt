{"id":558733942,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 9 months","timestamp":1632246160,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/558733942/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"43.3 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\n// var isValidBST = function(root) {\n    \n//     const dfs = (node, min = -Infinity, max = Infinity) => {\n//         if (!node) return true\n        \n//         if (node.val <= min || node.val >= max) return false\n        \n//         return dfs(node.left, min, node.val) && dfs(node.right, node.val, max)\n//     }\n//     return dfs(root)\n// };\n\nvar isValidBST = function(root) {\n    if (!root) return true\n    \n    const dfs = (node, min = null, max = null) => {\n        if (!node) return true\n        \n        if ((min !== null && node.val <= min) || (max !== null && node.val >= max)) return false\n        \n        //update max value when traversing left part of tree\n        //update min value when traversing right part of tree\n        return dfs(node.left, min, node.val) && dfs(node.right, node.val, max)\n        \n    }\n    \n    return dfs(root)\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"validate-binary-search-tree","has_notes":false}