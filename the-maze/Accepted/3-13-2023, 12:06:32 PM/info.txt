{"id":914465898,"lang":"javascript","lang_name":"JavaScript","time":"3 months, 1 week","timestamp":1678723592,"status":10,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/914465898/","is_pending":"Not Pending","title":"The Maze","memory":"45.6 MB","code":"/**\n * @param {number[][]} maze\n * @param {number[]} start\n * @param {number[]} destination\n * @return {boolean}\n */\n\nconst hasPath = (maze, start, destination) => {\n    const directions = [\n\t\t[1, 0],\n\t\t[-1, 0],\n\t\t[0, 1],\n\t\t[0, -1],\n\t]\n    \n    const N = maze.length, M = maze[0].length\n    \n    const queue = [start]\n   \n    while (queue.length) {\n        const len = queue.length\n        \n        for (let i = 0; i < len; i++) {\n            const [dRow, dCol] = destination\n            const [row, col] = queue.shift()\n            \n            if (row === dRow && col === dCol) return true\n            \n            for (const [dx, dy] of directions) {\n                let x = row + dx\n                let y = col + dy\n                \n                // keep rolling in the current direction\n\t\t\t\t// x, y is within bounday and is not a wall\n                while (x >= 0 && x < N && y >= 0 && y < M && maze[x][y] !== 1) {\n                    x += dx\n                    y += dy\n                }\n                //break in while loop means we hit a wall\n                // ball will be on the wall, take a step back\n                x -= dx\n                y -= dy\n                \n                // if invalid continue\n                if (maze[x][y] !== 0) continue\n              \n                // continue rolling and mark as visited\n                queue.push([x, y])\n                maze[x][y] = 2\n            }\n        }\n    }\n    \n    return false\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-maze","has_notes":false}