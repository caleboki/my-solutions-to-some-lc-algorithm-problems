{"id":692687990,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 1 month","timestamp":1651630018,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/692687990/","is_pending":"Not Pending","title":"The Maze","memory":"N/A","code":"/**\n * @param {number[][]} maze\n * @param {number[]} start\n * @param {number[]} destination\n * @return {boolean}\n */\nvar hasPath = function(maze, start, destination, visited = new Set()) {\n    let startString = start.join(''), destinationString = destination.join('')\n    if (startString === destinationString) return true\n    \n    let rows = maze.length, cols = maze[0].length\n    \n    visited.add(startString)\n    \n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            \n            if (!visited.has(i.toString() + j.toString())) {\n                visited.add(i.toString() + j.toString())\n                let isFound = hasPath(maze, [i, j], destination, visited)\n                if (isFound) return true\n            }\n        }\n    }\n    return false\n};\n\n// const hasPath = (maze, start, destination) => {\n//     const dfs = (maze, start, destination, visited = []) => {\n//         if (visited[start[0]][start[1]]) return false\n//         if (start[0] === destination[0] && start[1] === destination[1]) return true\n        \n//         visited[start[0]][start[1]] = true\n        \n//         let right = start[1] + 1, left = start[1] - 1, up = start[0] - 1, down = start[0] + 1\n//         let rows = maze.length, cols = maze[0].length\n        \n//         while (right < cols && maze[start[0]][right] === 0) right++\n//         if (dfs(maze, [start[0], right-1], destination, visited)) return true\n        \n//         while (left >= 0 && maze[start[0]][left] === 0) left--\n//         if (dfs(maze, [start[0], left + 1]), destination, visited) return true\n        \n//         while (up >= 0 && maze[up][start[1]] === 0) up--\n//         if (dfs(maze, [up + 1, start[1]], destination, visited)) return true\n        \n//         while (down < maze.length && maze[down][start[1]] === 0) d++\n//         if (dfs(maze, [down - 1, start[1]], destination, visited)) return true\n        \n//         return false\n//     }\n    \n//     return dfs(maze, start, destination)\n// }","compare_result":"100011110010000011001110100011111111010000000011111111111111111111111000000000","title_slug":"the-maze","has_notes":false}