{"id":918725358,"lang":"javascript","lang_name":"JavaScript","time":"3Â months","timestamp":1679312508,"status":10,"status_display":"Accepted","runtime":"742 ms","url":"/submissions/detail/918725358/","is_pending":"Not Pending","title":"Kth Largest Sum in a Binary Tree","memory":"86 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */\nvar kthLargestLevelSum = function(root, k) {\n    let result = [], queue = [root]\n\n    while (queue.length) {\n        const length = queue.length\n        let currentSum = 0\n\n        for (let i = 0; i < length; i++) {\n            const current = queue.shift()\n            currentSum += current.val\n\n            if (current.left) queue.push(current.left)\n            if (current.right) queue.push(current.right)\n        }\n        result.push(currentSum)\n    }\n    \n    if (k > result.length) return -1\n\n    result.sort(function(a, b){return b-a})\n    return result[k-1]\n    \n};","compare_result":"111111111111111111111111111111111111111111111","title_slug":"kth-largest-sum-in-a-binary-tree","has_notes":false}