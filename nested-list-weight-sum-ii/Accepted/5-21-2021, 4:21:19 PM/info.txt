{"id":496386303,"lang":"javascript","lang_name":"JavaScript","time":"2 years, 1 month","timestamp":1621628479,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/496386303/","is_pending":"Not Pending","title":"Nested List Weight Sum II","memory":"39 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single integer equal to value.\n *     @return {void}\n *     this.setInteger = function(value) {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n *     @return {void}\n *     this.add = function(elem) {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */\n/**\n * @param {NestedInteger[]} nestedList\n * @return {number}\n */\n\n\n// var depthSum = function(nestedList) {\n    \n//     const dfs = (list, depth) => { \n//         let total = 0\n//         for (let i = 0; i < list.length; i++) {\n//             if (list[i].isInteger()) {\n//                 total += depth * list[i].getInteger()\n               \n//             } else {\n//                 total += dfs(list[i].getList(), (depth + 1))\n//             }   \n//         }\n//         return total\n//     }\n//     return dfs(nestedList, 1)   \n// };\n\nvar depthSumInverse = function(nestedList) {\n    let maxDepth = getMaxDepth(nestedList)\n    return dfs(nestedList, maxDepth)\n};\n\nfunction dfs (list, depth) {\n    let total = 0\n    for (let i = 0; i < list.length; i++) {\n        if (list[i].isInteger()) {\n            total += depth * list[i].getInteger()\n        } else {\n            total += dfs(list[i].getList(), (depth - 1))\n        }   \n    }\n    return total  \n}\n\nfunction getMaxDepth(list) {\n    let depth = 0\n    for (let i = 0; i < list.length; i++) {\n        if (!list[i].isInteger()) depth = Math.max(depth, getMaxDepth(list[i].getList()))\n    }\n    return depth + 1\n}","compare_result":"11111111111111111111111111","title_slug":"nested-list-weight-sum-ii","has_notes":false}