{"id":619166444,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 5 months","timestamp":1642099923,"status":10,"status_display":"Accepted","runtime":"2764 ms","url":"/submissions/detail/619166444/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"92 MB","code":"\n// var MedianFinder = function() {\n    \n// };\n\n// /** \n//  * @param {number} num\n//  * @return {void}\n//  */\n// MedianFinder.prototype.addNum = function(num) {\n    \n// };\n\n// /**\n//  * @return {number}\n//  */\n// MedianFinder.prototype.findMedian = function() {\n    \n// };\n\n/** \n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */\n\n// class MedianFinder {\n//     constructor() {\n//         this.data = []\n//     }\n    \n//     addNum(num) {\n//         //this.data.push(num)\n        \n//         if (this.data.length === 0) {\n//             this.data.push(num)\n//         } else {\n//             if (num > this.data[this.data.length - 1]) {\n//                 this.data.push(num)\n//             } else {\n//                 this.data.unshift(num)\n//             }\n//         }\n//     }\n    \n//     findMedian() {\n//         //this.data.sort((a, b) => {return a-b})\n        \n//         let length = this.data.length, mid\n        \n//         //odd length\n//         if ((length % 2) > 0) {\n//             mid = (length-1)/2\n//             return this.data[mid]\n//         }\n//         //even length\n//         let high = this.data.length/2, low = this.data.length/2 - 1\n        \n//         return (this.data[high] + this.data[low])/2\n//     }\n// }\n\n// class MedianFinder {\n//     constructor() {\n//         this.data = []\n//     }\n    \n//     addNum(num) {\n//         if (this.data.length === 0) {\n//             this.data.push(num)\n//             return\n//         }\n        \n//         let left = 0, right = this.data.length\n        \n//         while (left < right) {\n//             const mid = Math.floor((left + right)/2)\n            \n//             if (num > this.data[mid]) {\n//                 left = mid + 1\n//             } else {\n//                 right = mid\n//             }\n//         }\n        \n//         this.data.splice(left, 0, num)\n//     }\n    \n//     findMedian() {\n//         this.data.sort((a, b) => {return a - b})\n//         let length = this.data.length, mid\n        \n//         //odd length\n//         if ((length % 2) > 0) {\n//             mid = (length-1)/2\n//             return this.data[mid]\n//         }\n//         //even length\n//         let high = this.data.length/2, low = this.data.length/2 - 1\n        \n//         return (this.data[high] + this.data[low])/2\n//     }\n// }\n\nclass MedianFinder {\n    constructor() {\n        // set up array\n        this.arr = [];\n    }\n\t\n    /**\n     * @param {number} num\n     * @return {void}\n     */\n    addNum(num) {\n        // check if array is size 0, just push\n        if (this.arr.length === 0) {\n            this.arr.push(num);\n            return;\n        }\n\t\t\n        // left and right pointers for binary search\n        let l = 0;\n        let r = this.arr.length;\n\t\t\n        // keep going until pointers meet\n        while (l < r) {\n            // get mid point\n            const mid = Math.floor((l + r) / 2);\n            // check if we can insert at mid\n            if (num > this.arr[mid]) {\n                // search right half of array\n                l = mid + 1;\n            } else {\n                // search left half of array\n                r = mid;\n            }\n        }\n\t\t\n        // we can insert at left pointer\n        this.arr.splice(l, 0, num);\n    }\n\t\n    /**\n     * @return {number}\n     */\n    findMedian() {\n        // if odd, return middle, if even, return avg of two middle\n        const mid = Math.floor(this.arr.length / 2);\n        return (this.arr.length & 1) === 1\n            ? this.arr[mid]\n            : (this.arr[mid] + this.arr[mid - 1]) / 2;\n    }\n}","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false}