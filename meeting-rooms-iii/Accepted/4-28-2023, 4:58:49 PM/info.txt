{"id":941288359,"lang":"javascript","lang_name":"JavaScript","time":"1 month, 3 weeks","timestamp":1682715529,"status":10,"status_display":"Accepted","runtime":"289 ms","url":"/submissions/detail/941288359/","is_pending":"Not Pending","title":"Meeting Rooms III","memory":"79.3 MB","code":"/**\n * @param {number} n\n * @param {number[][]} meetings\n * @return {number}\n */\n\n\nconst mostBooked = (n, meetings) => {\n    let roomsMeetingCount=[], roomsSchedule=[]\n\n    //Intially all the rooms are available and meeting count for eacy room is set to 0\n    for(let i=0; i<n; i++){\n        roomsSchedule[i] = -1\n        roomsMeetingCount[i] = 0\n    }\n    //Sort meeting by their start time\n    meetings.sort(function(a,b){return a[0]-b[0]})\n\n    for (let [start, end] of meetings) {\n        let earliestRoom = -1\n        let earliestTime = Infinity\n        let freeRoomFound = false\n\n        for (let i = 0; i < n; i++) {\n            //This is the room with the smallest index which is free on or before \n            //start time of the current meeting\n            if(roomsSchedule[i] <= start){\n                roomsMeetingCount[i]++\n\n                //This room will be avialable at 'end' time of the current meeting.\n                roomsSchedule[i]=end\n                freeRoomFound=true\n                break\n            }\n\n            //Let's keep track of the \"room with smallest index and being available \n            //at the earliest\"\n            if(roomsSchedule[i] < earliestTime){\n                earliestTime = roomsSchedule[i]\n                earliestRoom = i\n            }\n        }\n\n        //If we couldn't find any meeting room then we will wait for the room with \n        //smallest index being available at the earliest\" \n\n        if(freeRoomFound===false){\n            roomsMeetingCount[earliestRoom]++\n            //Time to vacant for the room will be increased by the duration of current meeting.\n            roomsSchedule[earliestRoom]+=(end-start)\n        }\n    }\n\n    //Now we have count of meetings for each meeting. We just need to find the room \n    //index with the maximum number of meetings.\n\n    let max=0, maxi = -1\n\n    for(let i=0; i < n; i++){\n        if(roomsMeetingCount[i] > max){\n            max = roomsMeetingCount[i]\n            maxi=i\n        }\n    }\n    return maxi\n}\n\n\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"meeting-rooms-iii","has_notes":false}