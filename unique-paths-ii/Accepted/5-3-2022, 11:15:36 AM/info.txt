{"id":692373368,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 1 month","timestamp":1651590936,"status":10,"status_display":"Accepted","runtime":"130 ms","url":"/submissions/detail/692373368/","is_pending":"Not Pending","title":"Unique Paths II","memory":"42.5 MB","code":"/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */\n// var uniquePathsWithObstacles = function(obstacleGrid) {\n    \n//     const m = obstacleGrid.length, n = obstacleGrid[0].length\n    \n//     if (obstacleGrid[0][0] === 1) return 0\n//     if (obstacleGrid[m-1][n-1] === 1) return 0\n//     if (m === 0 || n === 0) return 0\n    \n//     const dfs = (m, n, memo = new Map()) => {\n//         const key = '' + m + n\n//         if (memo.has(key)) return memo.get(key)\n//         if (m === 1 && n === 1) return 1\n//         if (m === 0 || n === 0) return 0\n//         if (obstacleGrid[m-1][n-1] === 1) return 0\n        \n//         memo.set(key, dfs(m-1, n, memo) + dfs(m, n-1, memo))\n//         return memo.get(key)\n//     } \n    \n//     return dfs(m, n)\n    \n// };\n\n// var uniquePathsWithObstacles = function(obstacleGrid) {\n    \n//     const m = obstacleGrid.length, n = obstacleGrid[0].length\n    \n//     if (obstacleGrid[0][0] === 1) return 0\n//     if (obstacleGrid[m-1][n-1] === 1) return 0\n//     if (m === 0 || n === 0) return 0\n//     if (m === 1 && n === 1 && obstacleGrid[0][0] === 0 ) return 1\n    \n//     const top = (row, col) => {\n//         let path = 0\n        \n//         for (let i = 0; i < row-1; i++) {\n//             if (obstacleGrid[i][0] === 1) return path\n//         }\n        \n//         for (let j = 0; j < col-1; j++) {\n            \n//             if (obstacleGrid[0][j] === 1) return path\n//         }\n        \n//         path++\n        \n//         return path\n        \n//     }\n    \n//     const side = (row, col) => {\n//         let path = 0\n        \n//         for (let j = 0; j < col; j++) {\n            \n//             if (obstacleGrid[0][j] === 1) {\n//                 return path\n//             }\n            \n//         }\n        \n//         for (let i = 0; i < row; i++) {\n            \n//             if (obstacleGrid[i][0] === 1) return path\n//         }\n        \n//         path++\n//         return path \n//     }\n    \n//     return top(m, n) + side(m, n)\n// };\n\n//Runtime O(n*m)\n//Space O(n + m)\nvar uniquePathsWithObstacles = function(obstacleGrid) {\n    \n    const dfs = (grid, i, j, memo = new Map()) => {\n        //check if we are within bounds\n        if (i > grid.length - 1 || j > grid[0].length) return 0\n        \n        if (grid[i][j] === 1) return 0 //check if the particular cell has an obstacle\n        \n        //check if have reached the bottom of the grid\n        if (i === grid.length - 1 && j === grid[0].length - 1) return 1\n        \n        let key = '' + i + j\n        if (memo.has(key)) return memo.get(key)\n        \n        let down = dfs(grid, i+1, j, memo) //movement down\n        let right = dfs(grid, i, j+1, memo) //movement right\n        \n        memo.set(key, down+right) //store value in memo\n        return memo.get(key)\n    }\n    return dfs(obstacleGrid, 0, 0)\n    \n};\n\n","compare_result":"11111111111111111111111111111111111111111","title_slug":"unique-paths-ii","has_notes":false}