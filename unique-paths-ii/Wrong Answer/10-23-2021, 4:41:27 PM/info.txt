{"id":576025899,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1635021687,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/576025899/","is_pending":"Not Pending","title":"Unique Paths II","memory":"N/A","code":"/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */\n// var uniquePathsWithObstacles = function(obstacleGrid) {\n    \n//     const m = obstacleGrid.length, n = obstacleGrid[0].length\n    \n//     if (obstacleGrid[0][0] === 1) return 0\n//     if (obstacleGrid[m-1][n-1] === 1) return 0\n//     if (m === 0 || n === 0) return 0\n    \n//     const dfs = (m, n, memo = new Map()) => {\n//         const key = '' + m + n\n//         if (memo.has(key)) return memo.get(key)\n//         if (m === 1 && n === 1) return 1\n//         if (m === 0 || n === 0) return 0\n//         if (obstacleGrid[m-1][n-1] === 1) return 0\n        \n//         memo.set(key, dfs(m-1, n, memo) + dfs(m, n-1, memo))\n//         return memo.get(key)\n//     } \n    \n//     return dfs(m, n)\n    \n// };\n\nvar uniquePathsWithObstacles = function(obstacleGrid) {\n    \n    const m = obstacleGrid.length, n = obstacleGrid[0].length\n    \n    if (obstacleGrid[0][0] === 1) return 0\n    if (obstacleGrid[m-1][n-1] === 1) return 0\n    if (m === 0 || n === 0) return 0\n    if (m === 1 && n === 1 && obstacleGrid[0][0] === 0 ) return 1\n    \n    const top = (row, col) => {\n        let path = 0\n        \n        for (let i = 0; i < row-1; i++) {\n            if (obstacleGrid[i][0] === 1) return path\n        }\n        \n        for (let j = 0; j < col-1; j++) {\n            \n            if (obstacleGrid[0][j] === 1) return path\n        }\n        \n        path++\n        \n        return path\n        \n    }\n    \n    const side = (row, col) => {\n        let path = 0\n        \n        for (let j = 0; j < col; j++) {\n            \n            if (obstacleGrid[0][j] === 1) {\n                return path\n            }\n            \n        }\n        \n        for (let i = 0; i < row; i++) {\n            \n            if (obstacleGrid[i][0] === 1) return path\n        }\n        \n        path++\n        return path \n    }\n    \n    return top(m, n) + side(m, n)\n};\n\n","compare_result":"11111011101110111010100011100000000000000","title_slug":"unique-paths-ii","has_notes":false}