{"id":933839646,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 1 week","timestamp":1681506913,"status":10,"status_display":"Accepted","runtime":"1202 ms","url":"/submissions/detail/933839646/","is_pending":"Not Pending","title":"Step-By-Step Directions From a Binary Tree Node to Another","memory":"117 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} startValue\n * @param {number} destValue\n * @return {string}\n */\n\n//we need the parent of every node here. so convert tree to graph which stroes the edges of each node. then do a bfs //on the graph.\n\n//Time complexity: O(N + N)  i.e time to build the graph and do the bfs on it\n//Space complexity: O(N + N)\n\nconst getDirections = (root, startValue, destValue) => {\n    \n    let adjList = levelOrderTraversal(root)\n    \n    let queue = [[startValue, '']], visited = new Set()\n    \n    while (queue.length) {\n        let [currentValue, currentPath] = queue.shift()\n        \n        if (visited.has(currentValue)) continue\n        visited.add(currentValue)\n        \n        if (currentValue === destValue) return currentPath\n        \n        for (let [child, direction] of adjList[currentValue]) {\n            queue.push([child, currentPath + direction])\n        }\n    }\n};\n\nconst levelOrderTraversal = (root) => {\n   \n    let adjList = {}\n\n    let queue = [root]\n    \n    while (queue.length) {\n        let current = queue.shift()\n        adjList[current.val] = []\n        if (current.left) queue.push(current.left)\n        if (current.right) queue.push(current.right)\n    }\n    \n    queue = [root] //reset the queue so we can add the edges\n    \n    while (queue.length) {\n        let current = queue.shift()\n        \n        if (current.left) {\n            adjList[current.val].push([current.left.val, 'L'])\n            adjList[current.left.val].push([current.val, 'U'])\n            queue.push(current.left)\n        }\n        \n        if (current.right) {\n            adjList[current.val].push([current.right.val, 'R'])\n            adjList[current.right.val].push([current.val, 'U'])\n            queue.push(current.right)\n        }\n    }\n    return (adjList)\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"step-by-step-directions-from-a-binary-tree-node-to-another","has_notes":false}