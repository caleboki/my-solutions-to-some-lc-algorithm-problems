{"id":575529534,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1634930902,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/575529534/","is_pending":"Not Pending","title":"01 Matrix","memory":"N/A","code":"/**\n * @param {number[][]} mat\n * @return {number[][]}\n */\nvar updateMatrix = function(mat) {\n    if (!mat || mat.length === 0) return mat\n    \n    let rows = mat.length, cols = mat[0].length\n    let queue = []\n    let visited = new Set()\n    \n    //Put the co-ordinates of all 0s in the queue\n    \n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (mat[i][j] === 0) {\n                let zeroNodes = '' + i + j\n                queue.push(zeroNodes)\n                visited.add(zeroNodes)\n            }\n        }\n    }\n    \n    let directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    \n    while (queue.length) {\n        let length = queue.length\n        for (let i = 0; i < length; i++) {\n            let currentNode = queue.shift()\n            \n            for (d of directions) {\n                let x = +currentNode[0] + d[0]\n                let y = +currentNode[1] + d[1]\n                \n                //check boundaries\n                if (x < 0 || x > rows-1 || y < 0 || y > cols-1 || visited.has('' + x + y)) {\n                   continue \n                }\n                //console.log(mat[x][y])\n                mat[x][y] = mat[+currentNode[0]][+currentNode[1]] + 1\n                \n                queue.push('' + x + y)\n                visited.add('' + x + y)\n                \n                \n            }\n        }\n        \n        \n    }\n    \n    return (mat)\n};","compare_result":"11111111111111111110000000000000000000000000000000","title_slug":"01-matrix","has_notes":false}