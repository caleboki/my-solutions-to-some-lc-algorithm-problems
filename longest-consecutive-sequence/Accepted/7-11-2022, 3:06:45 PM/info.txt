{"id":744534279,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 2 weeks","timestamp":1657566405,"status":10,"status_display":"Accepted","runtime":"201 ms","url":"/submissions/detail/744534279/","is_pending":"Not Pending","title":"Longest Consecutive Sequence","memory":"68.6 MB","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\n// var longestConsecutive = function(nums) {\n//     nums = new Set(nums)\n    \n//     let longestStreak = 0\n    \n//     for (let num of nums) {\n//         if (!nums.has(num-1)) {\n//             let currentNum = num\n//             let currentStreak = 1\n            \n//             while (nums.has(currentNum + 1)) {\n//                 currentStreak++\n//                 currentNum++\n//             }\n            \n//             longestStreak = Math.max(longestStreak, currentStreak)\n//         }\n//     }\n    \n//     return longestStreak\n// };\n\nconst longestConsecutive = (nums) => {\n    nums = new Set(nums)\n    let visited = new Set(), longestStreak = 0\n    \n    for (let num of nums) {\n        //if (visited.has(num)) continue\n        let current = 0, stack = [num]\n        \n        while (stack.length) {\n            let node = stack.pop()\n            visited.add(node)\n            current++\n            \n            if (!visited.has(node + 1) && nums.has(node + 1)) stack.push(node + 1)\n            if (!visited.has(node - 1) && nums.has(node - 1)) stack.push(node - 1)\n        }\n        \n        longestStreak = Math.max(longestStreak, current)\n    }\n    return longestStreak\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-consecutive-sequence","has_notes":false}