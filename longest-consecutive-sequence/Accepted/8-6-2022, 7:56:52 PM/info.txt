{"id":767079252,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 2 weeks","timestamp":1659830212,"status":10,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/767079252/","is_pending":"Not Pending","title":"Longest Consecutive Sequence","memory":"57 MB","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestConsecutive = function(nums) {\n    nums = new Set(nums)\n    \n    let longestStreak = 0\n    \n    for (let num of nums) {\n        if (!nums.has(num-1)) {\n            let currentNum = num\n            let currentStreak = 1\n            \n            while (nums.has(currentNum + 1)) {\n                currentStreak++\n                currentNum++\n            }\n            \n            longestStreak = Math.max(longestStreak, currentStreak)\n        }\n    }\n    \n    return longestStreak\n};\n\n// const longestConsecutive = (nums) => {\n//     nums = new Set(nums)\n//     let  longestStreak = 0, visited = new Set()\n    \n//     for (let num of nums) {\n//         let currentStreak = 0, stack = [num]\n        \n//         while (stack.length) {\n//             let node = stack.pop()\n//             visited.add(node)\n//             currentStreak++\n            \n//             if (!visited.has(node + 1) && nums.has(node + 1)) stack.push(node + 1)\n//             if (!visited.has(node - 1) && nums.has(node - 1)) stack.push(node - 1)\n//         }\n        \n//         longestStreak = Math.max(longestStreak, currentStreak)\n//     }\n//     return longestStreak\n// }\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-consecutive-sequence","has_notes":false}