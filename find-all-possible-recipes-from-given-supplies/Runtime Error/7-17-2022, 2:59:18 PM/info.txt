{"id":749647332,"lang":"javascript","lang_name":"JavaScript","time":"11Â months, 1Â week","timestamp":1658084358,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/749647332/","is_pending":"Not Pending","title":"Find All Possible Recipes from Given Supplies","memory":"N/A","code":"/**\n * @param {string[]} recipes\n * @param {string[][]} ingredients\n * @param {string[]} supplies\n * @return {string[]}\n */\n// var findAllRecipes = function(recipes, ingredients, supplies) {\n//     let ingredientsMap = {}, suppliesSet = new Set(supplies), visited = new Set(),  seeing = new Set(), res = [], adjList = {}\n    \n//     for (let i in recipes) adjList[recipes[i]] = ingredients[i]\n//     console.log(adjList)\n//     let queue = recipes\n    \n//     while (queue.length) {\n//         const current = queue.shift()\n//         const ingredients = adjList[current]\n//         let count = ingredients.length\n        \n//         //seeing.add(current)\n        \n//         for (let ingredient of ingredients) {\n            \n//             if (visited.has(ingredient)) {\n//                 count--\n//                 continue\n//             }\n//             if (seeing.has(ingredient)) break\n//             if (adjList[ingredient]) queue.push(ingredient)\n//             if (suppliesSet.has(ingredient)) count--\n//         }\n        \n//         if (count === 0 && ingredients.length > 0) res.push(current)\n//         suppliesSet.add(current)\n        \n//         seeing.delete(current)\n//         visited.add(current)\n        \n//     }\n//     return res\n// };\n\n\nconst findAllRecipes = (recipes, ingredients, supplies) => {\n    let suppliesSet = new Set(supplies), recipeMap = {}, result = []\n    \n    for (let i in recipes) recipeMap[recipes[i]] = ingredients[i] //creating an adjacency list\n    console.log(recipeMap)\n    const canMake = (target, suppliesSet, recipeMap, visited = new Set()) => {\n        if (suppliesSet.has(target)) return true\n        if (visited.has(target)) return false\n        //if (!(target in recipeMap)) return false\n        \n        visited.add(target)\n        \n        for (let ingredient of recipeMap[target]) {\n            if (!canMake(ingredient, suppliesSet, recipeMap, visited)) return false\n        }\n        \n        suppliesSet.add(target)\n        return true\n    }\n    \n    for(let recipe in recipeMap) {\n        if (canMake(recipe, suppliesSet, recipeMap)) result.push(recipe) \n    }\n    \n    return result\n}","compare_result":"1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-all-possible-recipes-from-given-supplies","has_notes":false}