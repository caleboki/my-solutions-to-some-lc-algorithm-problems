{"id":751996270,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 1 week","timestamp":1658320172,"status":10,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/751996270/","is_pending":"Not Pending","title":"Most Common Word","memory":"45.8 MB","code":"/**\n * @param {string} paragraph\n * @param {string[]} banned\n * @return {string}\n */\n// var mostCommonWord = function(paragraph, banned) {\n//     paragraph = paragraph.toLowerCase()\n//     paragraph = paragraph.replace(/[^a-zA-Z0-9 ]/g, '')\n//     console.log(paragraph)\n//     paragraph = paragraph.split(' ')\n//     console.log(paragraph)\n    \n    \n//     let bannedSet = new Set(), paragraphMap = new Map()\n//     for (let b of banned) bannedSet.add(b)\n    \n//     for (let p of paragraph) {\n//         if (!paragraphMap.has(p)) paragraphMap.set(p, 0)\n//         paragraphMap.set(p, paragraphMap.get(p) + 1)\n//     }\n    \n//     let paragraphPair = []\n    \n//     for (let [key, value] of paragraphMap) {\n//         paragraphPair.push([key, value])\n//     }\n//     paragraphPair.sort((a, b) => {return b[1] - a[1]})\n    \n//     for (let i = 0; i < paragraphPair.length; i++) {\n//         if (bannedSet.has(paragraphPair[i][0])) continue\n//         return paragraphPair[i][0] \n//     }\n    \n// };\n\n// const mostCommonWord = (paragraph, banned) => Object.entries(paragraph.toLowerCase().replaceAll(/[^a-zA-Z ]/g, ` `).split(/\\s+/).filter(w => w).reduce((c, w) => (c[w] = (c[w] ?? 0) + 1, c), {})).sort(([, f1], [, f2]) => f2 - f1).find(([w,]) => !banned.includes(w))[0];\n\nvar mostCommonWord = function(paragraph, banned) {\n  paragraph = paragraph.toLowerCase().split(/\\W+/g);\n  // .split(/\\W+/g) --> splits on one or more non-word chars (the + indicates the \"one or more\" part. It's important to use capital W! https://www.tutorialspoint.com/w-vs-w-in-javascript-regex)\nconsole.log(paragraph)\n  let wordFreq = {}; // hashmap\n  \n  for(let word of paragraph) {\n    if(!banned.includes(word) && word.length > 0) wordFreq[word] = wordFreq[word] + 1 || 1; // put non-banned words in wordFreq\n  }\n\n  return Object.keys(wordFreq).sort((a,b) => wordFreq[b] - wordFreq[a])[0]; // wordFreq is sorted by freq and we return the first value *index 0*\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"most-common-word","has_notes":false}