{"id":942114603,"lang":"javascript","lang_name":"JavaScript","time":"1 month, 3 weeks","timestamp":1682860966,"status":10,"status_display":"Accepted","runtime":"286 ms","url":"/submissions/detail/942114603/","is_pending":"Not Pending","title":"Word Ladder","memory":"86.6 MB","code":"/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\n// var ladderLength = function(beginWord, endWord, wordList) {\n//     wordList = new Set(wordList), alpha = []\n//     if(!wordList.has(endWord)) return 0\n//     let queue = [beginWord], currentLevel = 1\n//     while(queue.length) {\n//         let length = queue.length\n//         for (let i = 0; i < length; i++) {\n//             let currentWord = queue.shift()\n//             let temp = Array.from(currentWord)\n//             for (let j = 0; j < currentWord.length; j++) {\n//                 let originalChar = currentWord[j]\n//                 for (let k = 'A'.charCodeAt(0); k <= 'Z'.charCodeAt(0); k++) {\n//                     let letter = String.fromCharCode(k)\n//                     if (currentWord[j] === letter)  continue\n//                     let temp = Array.from(currentWord)\n//                     temp[j] = letter\n//                     let newWord = temp.join('')\n//                     if (newWord === endWord) return currentLevel + 1\n//                     if (wordList.has(newWord)) {\n//                         queue.push(newWord)\n//                         wordList.delete(newWord)\n//                     }\n//                 }\n//                 temp[j] = originalChar\n//                 currentWord = temp.join('')\n//             }\n//         }\n//         currentLevel++\n//     }\n//     return 0 \n// };\nconst ladderLength = (beginWord, endWord, wordList) => {\n    wordList = new Set(wordList)\n    if(!wordList.has(endWord)) return 0\n    wordList.add(beginWord)\n\n    let visited = new Set(), queue = [beginWord], result = 1\n    visited.add(beginWord)\n\n    let nei = {}\n    for (const word of wordList) {\n        for (let j = 0; j < word.length; j++) {\n            let pattern = word.slice(0, j) + '*' + word.slice(j+1)\n            nei[pattern] = nei[pattern] || []\n            nei[pattern].push(word)\n        }\n    }\n    console.log(nei)\n    while(queue.length) {\n        let length = queue.length\n        for (let k = 0; k < length; k++) {\n            let word = queue.shift()\n            if (word === endWord) return result\n\n            for (let l = 0; l < word.length; l++) {\n                let pattern = word.slice(0, l) + '*' + word.slice(l+1);\n                for (neiWord of nei[pattern]) {\n                    if (!visited.has(neiWord)) {\n                        visited.add(neiWord)\n                        queue.push(neiWord)\n                    }\n                    \n                }\n            }\n\n        }\n        result += 1\n    }\n    return 0\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false}