{"id":942256932,"lang":"javascript","lang_name":"JavaScript","time":"1 month, 3 weeks","timestamp":1682882508,"status":10,"status_display":"Accepted","runtime":"153 ms","url":"/submissions/detail/942256932/","is_pending":"Not Pending","title":"Word Ladder","memory":"69.5 MB","code":"/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\n\nconst ladderLength = (beginWord, endWord, wordList) => {\n    wordList = new Set(wordList)\n    if(!wordList.has(endWord)) return 0\n    wordList.add(beginWord)\n\n    let visited = new Set(), queue = [beginWord], result = 1\n    visited.add(beginWord)\n\n    //Building the graph of words\n    let graph = {}\n    for (const word of wordList) {\n        for (let i = 0; i < word.length; i++) {\n            let pattern = word.slice(0, i) + '*' + word.slice(i+1)\n            graph[pattern] = graph[pattern] || []\n            graph[pattern].push(word)\n        }\n    }\n    \n    while(queue.length) {\n        let length = queue.length\n        for (let i = 0; i < length; i++) {\n            let word = queue.shift()\n            if (word === endWord) return result\n\n            for (let j = 0; j < word.length; j++) {\n                let pattern = word.slice(0, j) + '*' + word.slice(j+1);\n                for (let neigbourWord of graph[pattern]) {\n                    if (!visited.has(neigbourWord)) {\n                        visited.add(neigbourWord)\n                        queue.push(neigbourWord)\n                    }\n                    \n                }\n            }\n        }\n        result += 1\n    }\n    return 0\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false}