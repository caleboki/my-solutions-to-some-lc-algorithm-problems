{"id":685199582,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 2 months","timestamp":1650601346,"status":10,"status_display":"Accepted","runtime":"82 ms","url":"/submissions/detail/685199582/","is_pending":"Not Pending","title":"Read N Characters Given read4 II - Call Multiple Times","memory":"42.1 MB","code":"/**\n * Definition for read4()\n * \n * @param {character[]} buf Destination buffer\n * @return {number} The number of characters read\n * read4 = function(buf4) {\n *     ...\n * };\n */\n\n/**\n * @param {function} read4()\n * @return {function}\n */\nvar solution = function(read4) {\n    /**\n     * @param {character[]} buf Destination buffer\n     * @param {number} n Number of characters to read\n     * @return {number} The number of actual characters read\n     */\n    \n    // Variables for tracking buf4's state\n    this.buf4 = new Array(4);\n    this.buf4_ptr = 0;\n    this.buf4_size = 0;\n    \n    return function(buf, n) {\n\t\t// Variable for tracking the output array's state\n        let buf_ptr = 0;\n        \n        // Keep looping until we've read the number of characters we want\n        while(n > 0){\n            // Find out how many characters are available to read in buf4\n            const num_available = this.buf4_size - this.buf4_ptr;\n            // Find out how many characters should we read from buf4\n            // - If the number of characters we want \"n\" is less that what is available in buf4, we read \"n\" characters\n            // - If the number of characters we want \"n\" is greater than what is available in buf4, we read to the end of buf4\n            const num_to_get = Math.min(num_available, n);\n            \n            // Read \"num_to_get\" characters from buf4\n            for(let i = 0; i < num_to_get; ++i){\n                buf[buf_ptr] = this.buf4[this.buf4_ptr];\n                ++buf_ptr;\n                ++this.buf4_ptr;\n                --n;\n            }\n            \n            // Try to refill buf4 if it's empty\n            if(this.buf4_ptr === this.buf4_size){\n                this.buf4_size = read4(this.buf4);\n                this.buf4_ptr = 0;\n                // If we failed to fill buf4 with any characters then theres nothing more we can read ... stop looping and return\n                if(this.buf4_size === 0){\n                    break;\n                }\n            }\n        }\n        return buf_ptr;\n    };\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"read-n-characters-given-read4-ii-call-multiple-times","has_notes":false}