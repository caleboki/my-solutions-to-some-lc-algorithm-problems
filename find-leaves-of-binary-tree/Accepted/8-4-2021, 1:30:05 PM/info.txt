{"id":533297973,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 10 months","timestamp":1628098205,"status":10,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/533297973/","is_pending":"Not Pending","title":"Find Leaves of Binary Tree","memory":"39.9 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\n// var findLeaves = function(root) {\n    \n//     let solution = []\n    \n//     const getHeight = (root) => {\n//         if (!root) return -1\n        \n//         let leftHeight = getHeight(root.left)\n//         let rightHeight = getHeight(root.right)\n        \n//         let currentHeight = Math.max(leftHeight, rightHeight) + 1\n        \n//         if (solution.length === currentHeight) solution.push([])\n//         solution[currentHeight] = root.val\n        \n//         return currentHeight\n//     }\n    \n//     getHeight(root)\n//     return solution\n    \n// };\n\n// var findLeaves = function(root) {\n//     let result = []\n//     let temp = []\n    \n//     if (!root) return result\n    \n//     const remove = (node, temp) => {\n//         if (!node) return\n       \n//         if (!node.left && !node.right){\n//             temp.push(node.val)\n//             result.push(temp)\n           \n//         } \n        \n//         if (node.left) node.left = remove(node.left, temp)\n//         if (node.right) node.right = remove(node.right, temp)\n//     }\n    \n//     remove(root, temp)\n//     return result\n// }\n\nvar findLeaves = function(root) {\n    let result = []\n    \n    const dfs = (node, list) => {\n        if (!node) return null\n        \n        //if we are at leaf node\n        if (!node.left && !node.right) {\n            list.push(node.val)\n            return null\n        }\n        node.left = dfs(node.left, list)\n        node.right = dfs(node.right, list)\n       \n        return node\n    }\n    \n    while (root.left !== null || root.right !== null) {\n        let temp = []\n        dfs(root, temp) //gets leaf nodes for each level?\n        result.push(temp)\n    }\n    \n    result.push([root.val])\n    \n    return result\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-leaves-of-binary-tree","has_notes":false}