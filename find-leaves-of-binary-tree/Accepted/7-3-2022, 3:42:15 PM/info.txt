{"id":737689601,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 3 weeks","timestamp":1656877335,"status":10,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/737689601/","is_pending":"Not Pending","title":"Find Leaves of Binary Tree","memory":"42.2 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\n\nconst findLeaves = (root) => {\n    let result = []\n    \n    const dfs = (node, list) => {\n        if (!node) return null\n        \n        //if we are at leaf node\n        if (!node.left && !node.right) {\n            list.push(node.val)\n            return null\n        }\n        node.left = dfs(node.left, list)\n        node.right = dfs(node.right, list)\n       \n        return node\n    }\n    \n    //repeatedly call dfs while there are still nodes in the tree\n    while (root.left || root.right) {\n        dfs(root, temp = []) //gets leaf nodes for each level?\n        result.push(temp)\n    }\n    \n    result.push([root.val]) //and finally the root node\n    return result\n}\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-leaves-of-binary-tree","has_notes":false}