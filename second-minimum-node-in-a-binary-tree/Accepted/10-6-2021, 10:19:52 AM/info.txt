{"id":566815300,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1633529992,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/566815300/","is_pending":"Not Pending","title":"Second Minimum Node In a Binary Tree","memory":"38.8 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findSecondMinimumValue = function(root) {\n    let nodeValues = []\n    \n    const dfs = (node) => {\n        if (!node) return\n        nodeValues.push(node.val)\n        dfs(node.left)\n        dfs(node.right)\n        \n    }\n    dfs(root)\n    \n    nodeValues.sort(function(a,b) {return a-b})\n    \n    let i = 1\n    \n    while (i < nodeValues.length) {\n        if (nodeValues[i] !== nodeValues[i-1]) return nodeValues[i]\n        i++\n    }\n    \n    return -1\n    \n    \n};","compare_result":"111111111111111111111111111111111111111","title_slug":"second-minimum-node-in-a-binary-tree","has_notes":false}