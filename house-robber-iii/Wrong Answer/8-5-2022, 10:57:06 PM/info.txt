{"id":766323904,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 2 weeks","timestamp":1659754626,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/766323904/","is_pending":"Not Pending","title":"House Robber III","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\n// var rob = function(root) {\n//     if (!root) return 0\n    \n//    const evenBfs = (node) => {\n//        let queue = [node], result = 0, k = 0\n       \n//        while (queue.length) {\n//            let size = queue.length\n           \n//            for (let i = 0; i < size; i++) {\n//                let current = queue.shift()\n//                if ((k % 2) === 0) result += current.val\n               \n//                if (current.left) queue.shift(current.left)\n//                if (current.right) queue.shift(current.right)\n//            }\n//            k++\n//        }\n//        return result\n//    }\n   \n//    const oddBfs = (node) => {\n//        let queue = [node], result = 0, k = 1\n       \n//        while (queue.length) {\n//            let size = queue.length\n           \n//            for (let i = 0; i < size; i++) {\n//                let current = queue.shift()\n//                if ((k % 2) > 0) result += current.val\n               \n//                if (current.left) queue.shift(current.left)\n//                if (current.right) queue.shift(current.right)\n//            }\n//            k++\n//        }\n//        return result\n//    }\n//    return evenBfs(root)\n//    //return Math.max(evenBfs(root), oddBfs(root)) \n// };\n\nconst rob = (root) => {\n    \n    const dfs = (root, sum = 0, flag) => {\n        if (!root) return sum\n        let stack = [root]\n        \n        while (stack.length > 0) {\n            let current = stack.pop()\n            \n            if (flag === true) sum += current.val\n            flag = !flag\n                \n            if (current.right) stack.push(current.right)\n            if (current.left) stack.push(current.left) \n        }\n        return sum\n    }\n    \n    return Math.max(dfs(root, 0, true), dfs(root, 0, false))\n}","compare_result":"1101111011101000010110101101011110010110000010011111110011011110111001000000000000000000000000000000000000000000000000000000","title_slug":"house-robber-iii","has_notes":false}