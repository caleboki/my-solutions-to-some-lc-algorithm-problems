{"id":766972197,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 2 weeks","timestamp":1659816348,"status":10,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/766972197/","is_pending":"Not Pending","title":"House Robber III","memory":"47.1 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\n// var rob = function(root) {\n//     if (!root) return 0\n    \n//    const evenBfs = (node) => {\n//        let queue = [node], result = 0, k = 0\n       \n//        while (queue.length) {\n//            let size = queue.length\n           \n//            for (let i = 0; i < size; i++) {\n//                let current = queue.shift()\n//                if ((k % 2) === 0) result += current.val\n               \n//                if (current.left) queue.shift(current.left)\n//                if (current.right) queue.shift(current.right)\n//            }\n//            k++\n//        }\n//        return result\n//    }\n   \n//    const oddBfs = (node) => {\n//        let queue = [node], result = 0, k = 1\n       \n//        while (queue.length) {\n//            let size = queue.length\n           \n//            for (let i = 0; i < size; i++) {\n//                let current = queue.shift()\n//                if ((k % 2) > 0) result += current.val\n               \n//                if (current.left) queue.shift(current.left)\n//                if (current.right) queue.shift(current.right)\n//            }\n//            k++\n//        }\n//        return result\n//    }\n//    return evenBfs(root)\n//    //return Math.max(evenBfs(root), oddBfs(root)) \n// };\n\n// const rob = (root) => {\n    \n//     const dfs = (root, sum = 0, flag) => {\n//         if (!root) return sum\n//         let stack = [root]\n        \n//         while (stack.length > 0) {\n//             let current = stack.pop()\n            \n//             if (flag === true) sum += current.val\n//             flag = !flag\n                \n//             if (current.right) stack.push(current.right)\n//             if (current.left) stack.push(current.left) \n//         }\n//         return sum\n//     }\n    \n//     return Math.max(dfs(root, 0, true), dfs(root, 0, false))\n// }\n\n// const rob = (root) => {\n//     const bfs = (root, sum = 0, flag) => {\n//         if (!root) return sum\n        \n//         let queue = [root]\n//         while (queue.length) {\n//             const length = queue.length\n            \n//             for (let i = 0; i < length; i++) {\n//                 const current = queue.shift()  \n//                 if (flag === true) sum += current.val\n                \n//                 if (current.left) queue.push(current.left)\n//                 if (current.right) queue.push(current.right)\n//             }\n            \n//             flag = !flag\n//         }\n        \n//         return sum\n//     }\n    \n//     return Math.max(bfs(root, 0, true), bfs(root, 0, false)) \n// }\n\n// const rob = (root) => {\n    \n//     const bfs = (root, result = []) => {\n//         if (!root) return result\n    \n//         const queue = [root]\n    \n//         while (queue.length > 0) {\n//             const length = queue.length\n//             const currentLevel = []\n\n//             for (let i = 0; i < length; i++) {\n//                 const current = queue.shift()\n//                 currentLevel.push(current.val)\n                \n//                 if (current.left) queue.push(current.left)\n//                 if (current.right) queue.push(current.right)\n//             }\n//             result.push([...currentLevel])\n//         }\n//         return result\n//     }\n    \n//     const nodes = bfs(root)\n//     console.log(nodes)\n//     let rob1 = [], rob2 = []\n    \n//     const sum = (arr) => {\n//         return arr.reduce((a, b) => a + b, 0)\n//     }\n    \n//     for (let i = 0; i < nodes.length; i++) {\n//         let temp = Math.max(sum(nodes[i]) + rob1, rob2)\n//         rob1 = rob2\n//         rob2 = temp\n//     }\n    \n//     return rob2\n    \n// }\n\n\n\nconst rob = (root, map = new Map()) => {\n    \n    if (!root) return 0\n    \n    if (map.has(root)) return map.get(root)\n    \n    let sum = root.val\n    \n    if (root.left) {\n        sum += rob(root.left.left, map)\n        sum += rob(root.left.right, map)\n    }\n    \n    if (root.right) {\n        sum += rob(root.right.right, map)\n        sum += rob(root.right.left, map)\n    }\n    \n    let nextSum = rob(root.left, map) + rob(root.right, map)\n    let res = Math.max(sum, nextSum)\n    \n    map.set(root, res)\n  \n    return res\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-iii","has_notes":false}