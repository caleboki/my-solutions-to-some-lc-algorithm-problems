{"id":584668153,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 7 months","timestamp":1636492287,"status":10,"status_display":"Accepted","runtime":"244 ms","url":"/submissions/detail/584668153/","is_pending":"Not Pending","title":"Substring with Concatenation of All Words","memory":"47.5 MB","code":"/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n    if (words.length === 0 || words[0].length === 0) {\n        return [];\n    }\n\n    wordFrequency = {};\n\n      words.forEach((word) => {\n        if (!(word in wordFrequency)) {\n          wordFrequency[word] = 0;\n        }\n        wordFrequency[word] += 1;\n      });\n\n  const resultIndices = [],\n    wordsCount = words.length;\n  wordLength = words[0].length;\n\n  for (i = 0; i < (s.length - wordsCount * wordLength) + 1; i++) {\n    const wordsSeen = {};\n    for (j = 0; j < wordsCount; j++) {\n      next_word_index = i + j * wordLength;\n      // Get the next word from the string\n      word = s.substring(next_word_index, next_word_index + wordLength);\n      if (!(word in wordFrequency)) { // Break if we don't need this word\n        break;\n      }\n\n      // Add the word to the 'wordsSeen' map\n      if (!(word in wordsSeen)) {\n        wordsSeen[word] = 0;\n      }\n      wordsSeen[word] += 1;\n\n\n      // no need to process further if the word has higher frequency than required\n      if (wordsSeen[word] > (wordFrequency[word] || 0)) {\n        break;\n      }\n\n      if (j + 1 === wordsCount) { // Store index if we have found all the words\n        resultIndices.push(i);\n      }\n    }\n  }\n\n  return resultIndices;\n    \n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"substring-with-concatenation-of-all-words","has_notes":false}