{"id":571395185,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1634262238,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/571395185/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"N/A","code":"// /**\n//  * @param {number} k\n//  */\n// var MyCircularQueue = function(k) {\n    \n// };\n\n// /** \n//  * @param {number} value\n//  * @return {boolean}\n//  */\n// MyCircularQueue.prototype.enQueue = function(value) {\n    \n// };\n\n// /**\n//  * @return {boolean}\n//  */\n// MyCircularQueue.prototype.deQueue = function() {\n    \n// };\n\n// /**\n//  * @return {number}\n//  */\n// MyCircularQueue.prototype.Front = function() {\n    \n// };\n\n// /**\n//  * @return {number}\n//  */\n// MyCircularQueue.prototype.Rear = function() {\n    \n// };\n\n// /**\n//  * @return {boolean}\n//  */\n// MyCircularQueue.prototype.isEmpty = function() {\n    \n// };\n\n// /**\n//  * @return {boolean}\n//  */\n// MyCircularQueue.prototype.isFull = function() {\n    \n// };\n\n/** \n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = new MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */\n\n// class MyCircularQueue {\n//     constructor(k) {\n//         this.data = []\n//         this.p_start = 0\n//         this.p_end = 0\n//         this.size = k\n//     }\n    \n//     enQueue(value) {\n        \n//         if (!this.isFull()) {\n//             this.data.push(value)\n//             this.p_end++\n//             return true \n//         }\n        \n//         if (this.p_start > 0 && this.p_end === this.size - 1) {\n//             this.p_end = 0\n//             this.data[this.p_end] = value\n//             //this.p_end++\n//             return true\n//         }\n        \n//         let i = this.p_start - this.p_end\n        \n//         if (i > 1) {\n//             this.data[i-1] = value\n//             this.p_end++\n//             return true\n//         }\n//         return false\n//     }\n    \n//     deQueue() {\n//         if (!this.isEmpty()) {\n//             this.p_start++\n//             return true\n//         }\n        \n//     }\n    \n//     Front() {\n//         if (this.isEmpty()) return -1\n//         return this.data[this.p_start]\n//     }\n    \n//     Rear() {\n//         if (this.isEmpty()) return -1\n//         return this.data[this.size - 1] //???\n//     }\n    \n//     isEmpty() {\n//         return this.p_start >= this.size\n//     }\n    \n//     isFull() {\n//         if (this.p_end === this.size-1 && this.p_start === 0) return true\n//         return false\n//     }\n// }\n\n\nclass MyCircularQueue {\n  constructor(k) {\n      this.k = k\n      this.data = []\n  }\n\n  enQueue(value) {\n      if (!this.isFull()) {\n        this.data.push(value)\n        return true\n      }\n      return false\n  }\n\n  deQueue() {\n    if (this.isEmpty()) return false\n    this.data.shift()\n    return true\n  }\n\n  Front() {\n    if (this.isEmpty()) return -1\n    return this.data[0]\n  }\n\n  Rear() {\n    if (this.isEmpty()) return -1\n    return this.data[this.k - 1]\n  }\n\n  isEmpty() {\n    return this.data.length === 0\n  }\n\n  isFull() {\n    return this.k === this.data.length\n  }\n}\n\n\n","compare_result":"1000110101011100000000000000000000000000000000000000011110","title_slug":"design-circular-queue","has_notes":false}