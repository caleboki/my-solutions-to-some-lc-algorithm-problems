{"id":730349019,"lang":"javascript","lang_name":"JavaScript","time":"12Â months","timestamp":1656098047,"status":10,"status_display":"Accepted","runtime":"129 ms","url":"/submissions/detail/730349019/","is_pending":"Not Pending","title":"Longest Repeating Character Replacement","memory":"42.7 MB","code":"/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\n// First we need to build a freq. map of all characters in s\n//  Then we will need to know how many letters in our substring that we need to replace.\n// To find out the lettersToReplace = (end - start + 1) - maxRepeatLetter;       \n// Now that we know how many characters that need to be replaced in our window, we can deduce that if lettersToReplace > k than the window is invalid and we decrease the window size from the left.\n\nvar characterReplacement = function(s, k) {\n    let map = {}, maxRepeatLetter = 0, j = 0, max = 0\n    \n    for (let i = 0; i < s.length; i++) {\n        //Setting up a freq. counter for all characters in s\n        if (!(s[i] in map)) map[s[i]] = 0\n        map[s[i]]++\n        \n        maxRepeatLetter = Math.max(maxRepeatLetter, map[s[i]])\n        \n        let lettersToReplace = i - j + 1 - maxRepeatLetter\n        if ((lettersToReplace) > k) {\n            map[s[j]]--\n            j++\n        }\n        \n        max = Math.max(max, i - j + 1)\n    }\n    return max\n    \n};","compare_result":"1111111111111111111111111111111111111","title_slug":"longest-repeating-character-replacement","has_notes":false}