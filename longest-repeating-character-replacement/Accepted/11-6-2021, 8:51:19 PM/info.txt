{"id":583161502,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 7 months","timestamp":1636246279,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/583161502/","is_pending":"Not Pending","title":"Longest Repeating Character Replacement","memory":"40.7 MB","code":"/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar characterReplacement = function(s, k) {\n    let map = {}, maxRepeatLetter = 0, j = 0, max = 0\n    \n    for (let i = 0; i < s.length; i++) {\n        if (!(s[i] in map)) {\n            map[s[i]] = 0\n        }\n        map[s[i]]++\n        maxRepeatLetter = Math.max(maxRepeatLetter, map[s[i]])\n        \n//Current window size is from windowStart to windowEnd, overall we have a letter which is\n// repeating 'maxRepeatLetterCount' times, this means we can have a window which has one  letter\n// repeating 'maxRepeatLetterCount' times and the remaining letters we should replace.\n// if the remaining letters are more than 'k', it is the time to shrink the window as we\n// are not allowed to replace more than 'k' letters\n        \n        if ((i - j + 1 - maxRepeatLetter) > k) {\n            map[s[j]]--\n            j++\n        }\n        \n        max = Math.max(max, i - j + 1)\n    }\n    return max\n    \n};","compare_result":"11111111111111111111111111111111111","title_slug":"longest-repeating-character-replacement","has_notes":false}