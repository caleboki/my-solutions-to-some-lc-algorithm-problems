{"id":506405427,"lang":"javascript","lang_name":"JavaScript","time":"2Â years","timestamp":1623421907,"status":10,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/506405427/","is_pending":"Not Pending","title":"Analyze User Website Visit Pattern","memory":"46 MB","code":"/**\n * @param {string[]} username\n * @param {number[]} timestamp\n * @param {string[]} website\n * @return {string[]}\n */\n// var mostVisitedPattern = function(username, timestamp, website) {\n    \n//     let userMap = {}\n    \n//     for (let i = 0; i < username.length; i++) { \n//         userMap[username[i]] = []  \n//     }\n//     for (let i = 0; i < username.length; i++) { \n//         userMap[username[i]].push([timestamp[i], website[i]]) \n//     }\n    \n//     console.log(userMap)\n// };\n\nvar mostVisitedPattern = function(username, timestamp, website) {\n    // set a map by username\n    const userMap = username.reduce((map, curr, i) => {\n        const time = timestamp[i], web = website[i];\n        if(map.has(curr)) {\n            map.get(curr).push([time, web]);\n        } else {\n            map.set(curr, [[time, web]]);\n        }\n        return map;\n    }, new Map())\n    const getPath = val => {\n        const paths = [];\n        const backTrack = (ind, arr) => {\n            if(arr.length === 3) {\n                paths.push(arr.slice());\n                return;\n            }\n            for(let i = ind; i < val.length; i++) {\n                arr.push(val[i][1]);\n                backTrack(i + 1, arr);\n                arr.pop();\n            }\n        }\n        backTrack(0, []);\n        return paths;\n    }\n    const getFreqOfPaths = () => {\n        const freq = new Map();\n        for(const [name, val] of [...userMap.entries()]) {\n            // get all unique paths for the user\n            const pathSet = new Set(\n                getPath(val.sort((a, b) => a[0] - b[0])) // sort by timestamp before back tracking\n                .map(([one, two, three]) => `${one},${two},${three}`)); // convert to string \n            for(const pathStr of [...pathSet.values()]) {\n                freq.set(pathStr, freq.get(pathStr) + 1 || 1);\n            }\n        }\n        return freq;\n    }\n    const freqOfPaths = getFreqOfPaths();\n    let max = 0;\n    // get the most frequent path\n    return [...freqOfPaths.keys()].reduce((prev, str) => {\n        if(freqOfPaths.get(str) > max) {\n            max = freqOfPaths.get(str);\n            return str;\n        } else if(freqOfPaths.get(str) === max) {\n            return str < prev ? str : prev;\n        }\n        return prev;\n    }, '').split(',');\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"analyze-user-website-visit-pattern","has_notes":false}