{"id":732163108,"lang":"javascript","lang_name":"JavaScript","time":"12Â months","timestamp":1656292777,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/732163108/","is_pending":"Not Pending","title":"Text Justification","memory":"42.4 MB","code":"/**\n * @param {string[]} words\n * @param {number} maxWidth\n * @return {string[]}\n */\nvar fullJustify = function(words, maxWidth) {\n    let width = maxWidth, buf = [], res = []\n    \n    // Helper method: Max words are on each line now pad them with spaces\n    const addWordToResult = (res, buf, maxWidth) => {\n        // How many spaces are needed\n        let spaces = maxWidth - buf.reduce((acc, cur) => acc + cur.length, 0)\n        \n        // If there is only one word on the line\n        //then just add the padding to the end and return\n        if (buf.length === 1) {\n            buf[0] += ' '.repeat(spaces)\n            res.push(buf[0])\n            return\n        }\n        \n        // If the line has more than one word,\n        // decrement the spaces which are created during the buf.join(' ')\n        // which is n - 1 spaces\n        spaces -= buf.length - 1\n        \n        // All words except the last should have spaces added to their string\n        const end = buf.length - 1\n        let index = 0\n        \n        // If there are spaces to distribute, distribute them\n        // evenly looping back to the beginning of the buffer\n        while (spaces-- > 0) {\n            buf[index] += ' '\n            index = (index + 1) % end\n        }\n        \n        res.push(buf.join(' '))\n    }\n    \n    \n    // Greedy pack each line\n    // when that fails add the line to the result with the added padding\n    // and start a new line\n    words.forEach(word => {\n        // Check if the word fits in the current line\n        // A word fits if theres enough room for the word and\n        // a space between it and the word to the left\n        \n        if (word.length <= (width - buf.length)) {\n            buf.push(word)\n            width -= word.length\n        } else {\n            // The word did not fit on the line, send this line for padding\n            addWordToResult(res, buf.slice(), maxWidth) //???\n            \n            // Start a new line with the current word\n            buf = [word]\n            //set the current line width\n            width = maxWidth - word.length\n        }\n    })\n    \n    // This is the final lines processing\n    // According the rules this should only be left justified\n    // so add all padding to the right not between the words\n    \n    if (buf.length) {\n        let str = buf.join(' ')\n        str += ' '.repeat(maxWidth - str.length)\n        res.push(str)\n    }\n    \n    return res\n};","compare_result":"111111111111111111111111111","title_slug":"text-justification","has_notes":false}