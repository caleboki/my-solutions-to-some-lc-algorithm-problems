{"id":706091787,"lang":"javascript","lang_name":"JavaScript","time":"1Â year","timestamp":1653384021,"status":10,"status_display":"Accepted","runtime":"190 ms","url":"/submissions/detail/706091787/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"53.5 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    const nodeValues = []\n    \n    const dfs = (node) => {\n        \n        if (!node) {\n            nodeValues.push('NULL')\n            return\n        }\n        \n        nodeValues.push(node.val), dfs(node.left), dfs(node.right)\n    }\n    dfs(root)\n    return nodeValues.toString()\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    data = data.split(',')\n    \n    let i = 0\n    \n    const dfs = () => {\n        if (data[i] === 'NULL') {\n            i++\n            return null\n        }\n        \n        let tree = new TreeNode(+data[i])\n        i++\n        tree.left = dfs()\n        tree.right = dfs()\n        \n        return tree\n    }\n    return dfs()\n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false}