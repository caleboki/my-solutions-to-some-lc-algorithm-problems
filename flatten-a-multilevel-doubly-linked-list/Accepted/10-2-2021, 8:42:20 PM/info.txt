{"id":564771078,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1633221740,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/564771078/","is_pending":"Not Pending","title":"Flatten a Multilevel Doubly Linked List","memory":"40.1 MB","code":"/**\n * // Definition for a Node.\n * function Node(val,prev,next,child) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n *    this.child = child;\n * };\n */\n\n/**\n * @param {Node} head\n * @return {Node}\n */\n\n//IDEA\n//Traverse thru the list \n//Any node with a child pointer, sever the link\n//Replace child link with next pointer\n//figure out what to do with the orphan nodes:\n//store orphan nodes in a stack because we want the most recent orphan nodes to come first\n//upon encountering a tail node, append the first element in stack to link tail\n//when stack is empty we are done\n//O(N) time and O(N) space\n\n//See: https://www.youtube.com/watch?v=N5MUtk_NRIw for more info\nvar flatten = function(head) {\n    //no need to check if head exist because we are given a linked list of @ least length 1\n    \n    let stack = []\n    let current = head\n    \n    //traversing the list\n    while (current) {\n        if (current.child) {\n            //check if current node is a tail node otherwise there is a possibility of orphans\n            if (current.next) {\n                stack.push(current.next) //store orphan nodes\n                current.next.prev = null //remove link to previous node\n                \n            }\n            current.next = current.child\n            current.child.prev = current\n            current.child = null\n        }\n        \n        //check if we are in a tail node\n        if (current.next) {\n            current = current.next\n        } else {\n            break\n        }\n    }\n    \n    while (stack.length > 0) {\n        current.next = stack.pop()\n        current.next.prev = current\n        //check for other adjacent nodes\n        while (current.next) {\n            current = current.next\n        }\n    }\n        \n    return head\n};","compare_result":"11111111111111111111111111","title_slug":"flatten-a-multilevel-doubly-linked-list","has_notes":false}