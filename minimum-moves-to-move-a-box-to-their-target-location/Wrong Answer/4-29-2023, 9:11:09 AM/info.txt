{"id":941543648,"lang":"javascript","lang_name":"JavaScript","time":"1 month, 3 weeks","timestamp":1682773869,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/941543648/","is_pending":"Not Pending","title":"Minimum Moves to Move a Box to Their Target Location","memory":"N/A","code":"/**\n * @param {character[][]} grid\n * @return {number}\n */\n// var minPushBox = function(grid) {\n// \tconst n = grid.length\n// \tconst m = grid[0].length\n\n// \tconst directions = [\n// \t\t[1, 0],\n// \t\t[0, 1],\n// \t\t[-1, 0],\n// \t\t[0, -1],\n// \t]\n\n// \tconst person = { x: 0, y: 0 }\n// \tconst box = { x: 0, y: 0 }\n// \tconst exit = { x: 0, y: 0 }\n\n// \tfor (let y = 0; y < n; y++) {\n// \t\tfor (let x = 0; x < m; x++) {\n// \t\t\tif (grid[y][x] === 'S') {\n// \t\t\t\tperson.x = x\n// \t\t\t\tperson.y = y\n// \t\t\t} else if (grid[y][x] === 'B') {\n// \t\t\t\tbox.x = x\n// \t\t\t\tbox.y = y\n// \t\t\t} else if (grid[y][x] === 'T') {\n// \t\t\t\texit.x = x\n// \t\t\t\texit.y = y\n// \t\t\t}\n// \t\t}\n// \t}\n\n// \tconst canPersonMoveToLocation = (startX, startY, endX, endY, boxX, boxY) => {\n// \t\treturn false\n\n// \t}\n\n// \tconst v = []\n// \tconst q = [[box.x, box.y, person.x, person.y, 0]]\n\n// \twhile (q.length) {\n// \t\tconst [boxX, boxY, personX, personY, pushCount] = q.shift()\n\n// \t\tif (boxX === exit.x && boxY === exit.y) return pushCount\n\n// \t\tconst boxKey = boxX + boxY * m\n// \t\tconst personKey = personX + personY * m\n\t\t\n\n// \t}\n\n\n\n//   return -1\n    \n// };\n\nvar minPushBox = function (grid) {\n\tconst n = grid.length;\n\tconst m = grid[0].length;\n\n\tconst directions = [\n\t\t[1, 0],\n\t\t[0, 1],\n\t\t[-1, 0],\n\t\t[0, -1],\n\t];\n\n\tconst person = { x: 0, y: 0 };\n\tconst box = { x: 0, y: 0 };\n\tconst exit = { x: 0, y: 0 };\n\n\tfor (let y = 0; y < n; ++y) {\n\t\tfor (let x = 0; x < m; ++x) {\n\t\t\tif (grid[y][x] === 'S') {\n\t\t\t\tperson.x = x;\n\t\t\t\tperson.y = y;\n\t\t\t} else if (grid[y][x] === 'B') {\n\t\t\t\tbox.x = x;\n\t\t\t\tbox.y = y;\n\t\t\t} else if (grid[y][x] === 'T') {\n\t\t\t\texit.x = x;\n\t\t\t\texit.y = y;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction canPersonMoveToLocation(startX, startY, endX, endY, boxX, boxY) {\n\t\tconst v = [];\n\t\tconst q = [[startX, startY]];\n\t\tv[startX + startY * m] = 1;\n\t\twhile (q.length) {\n\t\t\tconst [x, y] = q.shift();\n\t\t\tif (x === endX && y === endY) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfor (const [mx, my] of directions) {\n\t\t\t\tconst nx = mx + x;\n\t\t\t\tconst ny = my + y;\n\t\t\t\tconst nkey = nx + ny * m;\n\t\t\t\tconst nextSpot = grid[ny]?.[nx] ?? '#';\n\t\t\t\tif (!v[nkey] && nextSpot !== '#') {\n\t\t\t\t\tv[nkey] = 1;\n\t\t\t\t\tif (nx !== boxX || ny !== boxY) {\n\t\t\t\t\t\tq.push([nx, ny]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tconst v = [];\n\tconst q = [[box.x, box.y, person.x, person.y, 0]];\n\n\twhile (q.length) {\n\t\tconst [boxX, boxY, personX, personY, pushCount] = q.shift();\n\n\t\tif (boxX === exit.x && boxY === exit.y) {\n\t\t\treturn pushCount;\n\t\t}\n\n\t\tconst boxKey = boxX + boxY * m;\n\t\tconst personKey = personX + personY * m;\n\t\t//console.log(boxKey, personKey)\n\t\tif (v[boxKey]) continue;\n\n\t\tif (!v[boxKey]) v[boxKey] = {};\n\t\tv[boxKey] = 1;\n\t\tconsole.log(v)\n\t\tfor (const [moveX, moveY] of directions) {\n\t\t\tconst nextBoxX = boxX + moveX;\n\t\t\tconst nextBoxY = boxY + moveY;\n\t\t\tconst nextSpot = grid[nextBoxY]?.[nextBoxX] ?? '#';\n\t\t\tif (nextSpot !== '#') {\n\t\t\t\t//check if person can be positioned from the other side of the box\n\t\t\t\tconst targetX = boxX - moveX;\n\t\t\t\tconst targetY = boxY - moveY;\n\t\t\t\tif (canPersonMoveToLocation(personX, personY, targetX, targetY, boxX, boxY)) {\n\t\t\t\t\tq.push([nextBoxX, nextBoxY, targetX, targetY, pushCount + 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n};","compare_result":"111110111111111111101110111111","title_slug":"minimum-moves-to-move-a-box-to-their-target-location","has_notes":false}