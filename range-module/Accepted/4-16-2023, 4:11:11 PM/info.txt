{"id":934905182,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 1 week","timestamp":1681675871,"status":10,"status_display":"Accepted","runtime":"264 ms","url":"/submissions/detail/934905182/","is_pending":"Not Pending","title":"Range Module","memory":"54.5 MB","code":"// var RangeModule = function() {\n    \n// };\n\n// /** \n//  * @param {number} left \n//  * @param {number} right\n//  * @return {void}\n//  */\n// RangeModule.prototype.addRange = function(left, right) {\n    \n// };\n\n// /** \n//  * @param {number} left \n//  * @param {number} right\n//  * @return {boolean}\n//  */\n// RangeModule.prototype.queryRange = function(left, right) {\n    \n// };\n\n// /** \n//  * @param {number} left \n//  * @param {number} right\n//  * @return {void}\n//  */\n// RangeModule.prototype.removeRange = function(left, right) {\n    \n// };\n\n/** \n * Your RangeModule object will be instantiated and called as such:\n * var obj = new RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */\n\n class RangeModule {\n    constructor() {\n       this.intervals = []\n    }\n    addRange(left, right) { \n        let newInterval = [left, right]\n        let i = 0\n        // skip all the intervals until starts\n        while(i < this.intervals.length && this.intervals[i][1] < newInterval[0]) {\n            i++\n        }\n        // merge all overlapping intervals to one considering newInterval\n        while(i < this.intervals.length && this.intervals[i][0] <= newInterval[1]) {\n            newInterval = [Math.min(newInterval[0], this.intervals[i][0]), Math.max(newInterval[1], this.intervals[i][1])]\n            this.intervals.splice(i, 1)\n            // no need to increment i because we spliced\n        }\n        // add the union of intervals we got\n        this.intervals.splice(i, 0, newInterval)\n        // the rest are fine so we finished  \n    }\n    queryRange(left, right) {\n        let low = 0, high = this.intervals.length-1\n        while(low <= high) {\n            let mid = low + (Math.floor((high - low) / 2));\n            if(this.intervals[mid][0] <= left && this.intervals[mid][1] >= right) {\n                return true;\n            } else if (this.intervals[mid][0] > left) {\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        return false\n    }\n    removeRange(left, right) {\n        let i = 0;\n        while(i < this.intervals.length && this.intervals[i][1] < left) {\n            i++\n        }\n        if(i < this.intervals.length && this.intervals[i][0] < left) {\n            let newIntervalBefore = [this.intervals[i][0], left]\n            // the interval to delete is between one of the intervals\n            if(right < this.intervals[i][1]) {\n                let newIntervalAfter = [right, this.intervals[i][1]]\n                this.intervals.splice(i, 1, newIntervalBefore, newIntervalAfter)\n                return;\n            }\n            this.intervals.splice(i, 1, newIntervalBefore)\n            i++\n        }\n        while(i < this.intervals.length && right >= this.intervals[i][1]) {\n            this.intervals.splice(i, 1);\n        }\n        if(i < this.intervals.length && right > this.intervals[i][0]) {\n            let newIntervalAfter = [right, this.intervals[i][1]];\n            this.intervals.splice(i, 1, newIntervalAfter);\n        }\n\n    }\n }","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"range-module","has_notes":false}