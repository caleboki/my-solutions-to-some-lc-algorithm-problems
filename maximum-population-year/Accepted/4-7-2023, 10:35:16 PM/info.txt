{"id":929913544,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 2 weeks","timestamp":1680921316,"status":10,"status_display":"Accepted","runtime":"81 ms","url":"/submissions/detail/929913544/","is_pending":"Not Pending","title":"Maximum Population Year","memory":"44.9 MB","code":"/**\n * @param {number[][]} logs\n * @return {number}\n */\n// var maximumPopulation = function(logs) {\n//     logs.sort(function(a, b){return a[0] - b[0]})\n//     console.log(logs)\n//     let earliest = logs[0][0]\n\n//     for (let i = 1; i < logs.length; i++) {\n//         let [birth, death] = logs[i]\n//         let [prevBirth, prevDeath] = logs[i-1]\n        \n//         if (birth < prevDeath) {\n//             if (prevBirth < birth) earliest = prevBirth\n//         }\n//     }\n\n//     return earliest\n// };\n\nconst maximumPopulation = (logs) => {\n    const yearCounts = {}\n\n    // iterate over logs to populate yearCounts\n    for (let [birth, death] of logs) {\n        for (let year = birth; year < death; year++) {\n            yearCounts[year] = (yearCounts[year] || 0) + 1\n        }\n    }\n\n    // iterate over yearCounts to find the year(s) with the maximum population\n    let maxYear = -1, maxCount = -1\n    for (let [year, count] of Object.entries(yearCounts)) {\n        if (count > maxCount || (count === maxCount && year < maxYear)) {\n            maxYear = year\n            maxCount = count\n        }\n    }\n\n  return parseInt(maxYear)\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"maximum-population-year","has_notes":false}