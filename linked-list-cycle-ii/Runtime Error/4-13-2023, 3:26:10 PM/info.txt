{"id":933259031,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 1 week","timestamp":1681413970,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/933259031/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\n// var detectCycle = function(head) {\n//     let current = head\n//     let seen = new Map()\n    \n//     while(current) {\n//         seen.set(current)\n//         if (seen.has(current.next)) return current.next\n//         current = current.next\n//     }\n//     return current\n// };\n\nconst detectCycle = (head) => {\n    console.log(head)\n    if (!head || !head.next) return null\n    \n    let slow = head, fast = head.next, node\n    \n    while (slow !== fast) {\n        if (!fast || !fast.next) return null\n        node = slow\n        slow = slow.next\n        fast = fast.next.next\n    }\n    return node\n    \n}","compare_result":"11110000000000000","title_slug":"linked-list-cycle-ii","has_notes":false}