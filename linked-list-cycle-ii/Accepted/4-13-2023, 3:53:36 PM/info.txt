{"id":933270336,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 1 week","timestamp":1681415616,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/933270336/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"45.7 MB","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar detectCycle = function(head) {\n    let current = head\n    let seen = new Map()\n    \n    while(current) {\n        seen.set(current)\n        if (seen.has(current.next)) return current.next\n        current = current.next\n    }\n    return current\n};\n\n// const detectCycle = (head) => {\n    \n//     if (!head) return null\n//     if (!head.next) return null\n    \n//     let slow = head, fast = head.next, node\n    \n//     while (slow !== fast && fast.next) {\n//         if (!fast || !fast.next) return null\n//         node = slow\n//         slow = slow.next\n//         fast = fast.next.next\n//     }\n//     return node\n// }","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false}