{"id":803280498,"lang":"javascript","lang_name":"JavaScript","time":"9Â months","timestamp":1663548738,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/803280498/","is_pending":"Not Pending","title":"Boundary of Binary Tree","memory":"45.8 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar boundaryOfBinaryTree = function(root) {\n    let result = []\n    \n    const addLeaves = (node) => {\n        if (!node.left && !node.right) {\n            result.push(node.val)\n        } else {\n            if (node.left) addLeaves(node.left)\n            if (node.right) addLeaves(node.right)\n        }\n    }\n    \n    if (!root) return result\n    \n    if (root.left || root.right) result.push(root.val)\n    \n    let t = root.left\n    \n    while (t) {\n        if (t.left || t.right) result.push(t.val)\n        if (t.left) {\n            t = t.left\n        } else {\n            t = t.right\n        }\n    }\n    \n    addLeaves(root)\n   \n    let stack = []\n    \n    t = root.right\n    while (t) {\n        if (t.left || t.right) stack.push(t.val)\n        if (t.right) {\n            t = t.right\n        } else {\n            t = t.left\n        } \n    }\n    \n    while (stack.length) {\n        result.push(stack.pop())\n    }\n    \n    return result\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"boundary-of-binary-tree","has_notes":false}