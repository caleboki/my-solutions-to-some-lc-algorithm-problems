{"id":749575938,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 1 week","timestamp":1658078787,"status":10,"status_display":"Accepted","runtime":"109 ms","url":"/submissions/detail/749575938/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"42.2 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n// var inorderTraversal = function(root) {\n//     //Inorder traversal: Left, Root, Right\n    \n//     const nodeValues = []\n    \n//     const dfs = (node) => {\n//         if (!node) return\n        \n//         dfs(node.left)\n//         nodeValues.push(node.val)\n//         dfs(node.right)\n//     }\n    \n//     dfs(root)\n    \n//     return nodeValues  \n// };\n\nconst inorderTraversal = (root, result = []) => {\n    if (!root) return result\n    result.push(...inorderTraversal(root.left), root.val, ...inorderTraversal(root.right))\n    return result\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false}