{"id":942430178,"lang":"javascript","lang_name":"JavaScript","time":"1 month, 3 weeks","timestamp":1682918266,"status":10,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/942430178/","is_pending":"Not Pending","title":"Maximum Sum of Two Non-Overlapping Subarrays","memory":"42.1 MB","code":"/**\n * @param {number[]} nums\n * @param {number} firstLen\n * @param {number} secondLen\n * @return {number}\n */\nvar maxSumTwoNoOverlap = function(nums, firstLen, secondLen) {\n    const n = nums.length;\n    for (let i = 1; i < n; i++) {\n        nums[i] += nums[i - 1];\n    }\n    \n    let firstMax = nums[firstLen - 1];\n    let secondMax = nums[secondLen - 1];\n    let result = nums[firstLen + secondLen - 1];\n\n    for (let i = firstLen + secondLen; i < n; ++i) {\n        firstMax = Math.max(firstMax, nums[i - secondLen] - nums[i - firstLen - secondLen]);\n        secondMax = Math.max(secondMax, nums[i - firstLen] - nums[i - firstLen - secondLen]);\n        result = Math.max(result, firstMax + nums[i] - nums[i - secondLen], secondMax + nums[i] - nums[i - firstLen]);\n    }\n\n  return result;\n    \n};","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-of-two-non-overlapping-subarrays","has_notes":false}