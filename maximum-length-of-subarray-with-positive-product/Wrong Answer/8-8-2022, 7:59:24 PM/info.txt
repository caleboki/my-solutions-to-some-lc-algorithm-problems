{"id":768848907,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 2 weeks","timestamp":1660003164,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/768848907/","is_pending":"Not Pending","title":"Maximum Length of Subarray With Positive Product","memory":"N/A","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\n// var getMaxLen = function(nums) {\n    \n//     let neg = nums.filter(f => f < 0)\n//     if (neg.length % 2 === 0 )  return nums.length\n    \n//     let stack = [], max = 0, negNum = 0\n    \n//     for (let i = 0; i < nums.length; i++) {\n//         if (nums[i] === 0) {\n//             max = Math.max(max, stack.length)\n//             stack = []\n//             continue\n//         }\n//         if (nums[i] < 0) negNum++\n        \n//         if (negNum > 2) {\n//             max = Math.max(max, stack.length)\n//             stack = []\n//             negNum = 0\n//             continue\n//         }\n        \n//         stack.push(nums[i])\n//     }\n//     stack = stack.filter(f => f > 0 )\n//     max = Math.max(max, stack.length)\n    \n//     return max\n// };\n\n\nconst getMaxLen = function(nums) {\n    let neg = nums.filter(f => f < 0)\n    if (neg.length % 2 === 0 )  return nums.length\n    neg = neg.length\n    \n    let stack = [], max = 0\n    \n    for (let i in nums) {\n        if (nums[i] < 0) {\n            if (neg === 1) {\n                max = Math.max(max, stack.length)\n                stack = []\n                neg--\n                continue \n            }\n            neg--\n            \n        }\n        stack.push(nums[i])\n    }\n    max = Math.max(max, stack.length)\n    \n    return max\n    \n   \n};","compare_result":"1011110111000101000010000110000000000000000000000000000000000000000000000000000000000000000000000000000000000011","title_slug":"maximum-length-of-subarray-with-positive-product","has_notes":false}