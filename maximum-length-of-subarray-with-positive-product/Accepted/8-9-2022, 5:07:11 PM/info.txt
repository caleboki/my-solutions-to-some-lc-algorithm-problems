{"id":769686855,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 2 weeks","timestamp":1660079231,"status":10,"status_display":"Accepted","runtime":"750 ms","url":"/submissions/detail/769686855/","is_pending":"Not Pending","title":"Maximum Length of Subarray With Positive Product","memory":"50.9 MB","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\n// var getMaxLen = function(nums) {\n    \n//     let neg = nums.filter(f => f < 0)\n//     if (neg.length % 2 === 0 )  return nums.length\n    \n//     let stack = [], max = 0, negNum = 0\n    \n//     for (let i = 0; i < nums.length; i++) {\n//         if (nums[i] === 0) {\n//             max = Math.max(max, stack.length)\n//             stack = []\n//             continue\n//         }\n//         if (nums[i] < 0) negNum++\n        \n//         if (negNum > 2) {\n//             max = Math.max(max, stack.length)\n//             stack = []\n//             negNum = 0\n//             continue\n//         }\n        \n//         stack.push(nums[i])\n//     }\n//     stack = stack.filter(f => f > 0 )\n//     max = Math.max(max, stack.length)\n    \n//     return max\n// };\n\n// const getMaxLen = function(nums) {\n//     let neg = nums.filter(f => f < 0)\n   \n//     if (neg.length && neg.length % 2 === 0 )  return nums.length\n//     neg = neg.length\n    \n//     let stack = [], max = 0\n    \n//     for (let i = 0; i < nums.length; i++) {\n//         if (nums[i] === 0) {\n//             max = Math.max(max, stack.length)\n//             stack = []\n//             continue\n//         }\n//         if (nums[i] < 0) {\n//             if (neg === 1) {\n//                 max = Math.max(max, stack.length)\n//                 stack = []\n//                 neg--\n//                 continue \n//             }\n//             neg--\n            \n//         }\n//         stack.push(nums[i])\n        \n//     }\n\n//     max = Math.max(max, stack.length)\n    \n//     return max\n// };\nconst getMaxLen = (nums) => {\n    let max = 0\n    \n    for (let i = 0; i < nums.length; i++) {\n        if (nums.length - i <= max) return max\n        \n        if (nums[i] !== 0) {\n            let neg = nums[i] < 0 ? 1 : 0\n            max = Math.max(max, nums[i] < 0 ? 0 : 1)\n            \n            for (let j = i + 1; j < nums.length; j++) {\n                if (nums[j] < 0) {\n                    neg++\n                } else if (nums[j] === 0) break\n                \n                if (neg % 2 === 0) max = Math.max(max, j - i + 1)\n                \n            }\n            \n        }\n    }\n    return max\n    \n  \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-length-of-subarray-with-positive-product","has_notes":false}