{"id":685207521,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 2 months","timestamp":1650602290,"status":10,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/685207521/","is_pending":"Not Pending","title":"Validate IP Address","memory":"42.7 MB","code":"/**\n * @param {string} queryIP\n * @return {string}\n */\nconst isDigit = (c) => '0123456789'.indexOf(c) != -1;\nconst isHexadecimal = (c) => '0123456789abcdefABCDEF'.indexOf(c) != -1;\n\nconst validIPAddress = (ss) => {\n    let cnt = firstCheck(ss, '.'), a = ss.split('.');\n    if (cnt == 3) { // 3 '.' appears (no begin, end or consecutive) for start checking ipv4\n        let ok = true;\n        for (const s of a) {\n            if (!IPV4(s)) {\n                ok = false;\n                break;\n            }\n        }\n        if (ok) return 'IPv4';\n    }\n    cnt = firstCheck(ss, ':'), a = ss.split(':');\n    if (cnt == 7) { // 7 ':' appears (no begin, end or consecutive) for start checking ipv6\n        let ok = true;\n        for (const s of a) {\n            if (!IPV6(s)) {\n                ok = false;\n                break;\n            }\n        }\n        if (ok) return 'IPv6';\n    }\n    return 'Neither';\n};\n\nconst firstCheck = (s, mark) => { // '.' count and ':' count for ipv4 and ipv6 respectively\n    let cnt = 0, n = s.length;\n    if (s[0] == mark || s[n - 1] == mark) return false; // mark cannot be show in begin or end\n    for (let i = 0; i < n; i++) {\n        if (s[i] == mark) {\n            if (i - 1 >= 0 && s[i - 1] == mark) { // cannot has '..' or '::'\n                cnt = false;\n                break;\n            }\n            cnt++;\n        }\n    }\n    return cnt;\n};\n\nconst IPV4 = (s) => {\n    if (s[0] == '0' && s.length > 1) return false; // cannot has leading zero, but '0' is valid\n    for (let c of s) {\n        if (!isDigit(c)) return false;\n    }\n    let x = s - '0';\n    return x >= 0 && x <= 255;\n};\n\nconst IPV6 = (s) => {\n    for (let c of s) {\n        if (!isHexadecimal(c)) return false;\n    }\n    return s.length >= 1 && s.length <= 4;\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"validate-ip-address","has_notes":false}