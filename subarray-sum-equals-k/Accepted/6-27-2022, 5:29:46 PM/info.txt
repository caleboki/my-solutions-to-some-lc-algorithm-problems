{"id":732909625,"lang":"javascript","lang_name":"JavaScript","time":"12Â months","timestamp":1656365386,"status":10,"status_display":"Accepted","runtime":"124 ms","url":"/submissions/detail/732909625/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"54.4 MB","code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\n// var subarraySum = function(nums, k) {\n   \n//     let sum = 0;\n//     let count = 0;\n    \n//     //Frequency map with 0 initialized to 1 as we already have subarray Sum of size 0 by        //default\n    \n//     let map = {0 : 1};\n    \n//     for (let i = 0; i < nums.length; i++) {\n               \n//         sum += nums[i]; //Calculate the cummulative sum\n        \n//         //if the subarray is found\n//         if ((sum - k) in map) {\n//             count += map[sum - k]; //increment counter with the frequency of sum-k in map\n//         }\n        \n//         //Frequency map implementation \n//         if (sum in map) {\n//             map[sum]++;\n//         } else {\n//             map[sum] = 1;\n//         }   \n        \n//     }\n    \n//     return count;    \n// };\n\nconst subarraySum = (nums, k) => {\n    let hash = {}, count = 0, sum = 0\n    \n    hash[0] = 1\n    \n    for (let i = 0; i < nums.length; i++) {\n        \n        sum += nums[i]\n        \n        if (hash[sum - k]) count += hash[sum - k]\n        \n        hash[sum] = (hash[sum] || 0) + 1\n    }\n    \n    return count\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subarray-sum-equals-k","has_notes":false}