{"id":587722883,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 7 months","timestamp":1637010848,"status":10,"status_display":"Accepted","runtime":"136 ms","url":"/submissions/detail/587722883/","is_pending":"Not Pending","title":"Find All Anagrams in a String","memory":"46.2 MB","code":"/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\n// var findAnagrams = function(s, p) {\n//     let resultIndices = [], j = 0, map = new Map(), matched = 0\n    \n//     for (let i = 0; i < p.length; i++) {\n//         if (!map.has(p[i])) {\n//             map.set(p[i], 0)\n//         }\n//         map.set(p[i], map.get(p[i]) + 1) \n//     }\n    \n//     for (let i = 0; i < s.length; i++) {\n//         if (map.has(s[i])) {\n//             map.set(s[i], map.get(s[i]) - 1)\n            \n//             if (map[s[i]] === 0) matched++\n//         }\n        \n//         if (matched === Object.keys(map).length) resultIndices.push(j)\n        \n//         if (i >= p.length - 1) {\n//             let left = s[j]\n//             j++\n//             if(map.get(s[left]) === 0) matched--\n//             map.set(s[left], map.get(s[left]) + 1)  \n//         }\n//     }\n    \n//     return resultIndices  \n// };\n\n\nvar findAnagrams = function(s, p) {\n    let windowStart = 0,\n    matched = 0,\n    charFrequency = {};\n\n  for (let i = 0; i < p.length; i++) {\n    const chr = p[i];\n    if (!(chr in charFrequency)) {\n      charFrequency[chr] = 0;\n    }\n    charFrequency[chr] += 1;\n  }\n\n  const resultIndices = [];\n  // our goal is to match all the characters from the 'charFrequency' with the current window\n  // try to extend the range [windowStart, windowEnd]\n  for (let windowEnd = 0; windowEnd < s.length; windowEnd++) {\n    const rightChar = s[windowEnd];\n    if (rightChar in charFrequency) {\n      // decrement the frequency of matched character\n      charFrequency[rightChar] -= 1;\n      if (charFrequency[rightChar] === 0) {\n        matched += 1;\n      }\n    }\n\n    if (matched === Object.keys(charFrequency).length) { // have we found an anagram?\n      resultIndices.push(windowStart);\n    }\n\n    // shrink the sliding window\n    if (windowEnd >= p.length - 1) {\n      let leftChar = s[windowStart];\n      windowStart += 1;\n      if (leftChar in charFrequency) {\n        if (charFrequency[leftChar] === 0) {\n          matched -= 1; // before putting the character back, decrement the matched count\n        }\n        charFrequency[leftChar] += 1; // put the character back\n      }\n    }\n  }\n\n  return resultIndices;\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"find-all-anagrams-in-a-string","has_notes":false}