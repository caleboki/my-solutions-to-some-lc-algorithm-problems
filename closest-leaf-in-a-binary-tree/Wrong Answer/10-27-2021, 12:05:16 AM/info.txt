{"id":577837595,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 7 months","timestamp":1635307516,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/577837595/","is_pending":"Not Pending","title":"Closest Leaf in a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */\nvar findClosestLeaf = function(root, k) {\n    \n    const findK = (root, k) => {\n        if (!root) return null\n        if (root.val === k) return root\n        \n        const left = findK(root.left, k)\n        const right = findK(root.right, k)\n        \n        if (left) return left\n        if (right) return right\n        \n        return null\n    }\n    \n    const node = findK(root, k)\n    \n    if (!node) return null\n    const queue = [node]\n    \n    while (queue.length) {\n        const current = queue.shift()\n        \n        if (current.left === null && current.right === null) return current\n        \n        if (current.left) queue.push(current.left)\n        if (current.right) queue.push(current.right)\n    }\n    return root.val\n};","compare_result":"101101000100001000000000000000000010000000000000000000000001000000000000000100001000100000000000000110000000000000110001000010100101000000000000000000100000000000000100000000000001000000000000001100011000000000000011000110001000010100101001010010100000000000000000000000100000000000000000000000010000000000000000000000000000000000000010","title_slug":"closest-leaf-in-a-binary-tree","has_notes":false}