{"id":577988250,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 7 months","timestamp":1635332984,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/577988250/","is_pending":"Not Pending","title":"Closest Leaf in a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */\nvar findClosestLeaf = function(root, k) {\n    \n    const findK = (root, k) => {\n        if (!root) return null\n        if (root.val === k) return root\n        \n        const left = findK(root.left, k)\n        const right = findK(root.right, k)\n        \n        if (left) return left\n        if (right) return right\n        \n        return null\n    }\n    \n    const node = findK(root, k)\n    \n    if (!root) return null\n    const queue = [root]\n    \n    while (queue.length) {\n        const current = queue.shift()\n        if (current.left === null && current.right === null) return current.val\n        \n        if (current.left) queue.push(current.left)\n        if (current.right) queue.push(current.right)\n    }\n    return root.val\n};","compare_result":"111101010101001010011010110101101010100110101101011010110101100011010110101111011110101001101011010111001101011010111001100011100111001101011010111001111011111111111111011111111111010011010110101110011100110101101011100111001100011100111001110011100110101101011100111001111011111111111111111111111101111111111111111111111110101100000010","title_slug":"closest-leaf-in-a-binary-tree","has_notes":false}