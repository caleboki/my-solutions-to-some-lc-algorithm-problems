{"id":577329690,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 7 months","timestamp":1635224954,"status":10,"status_display":"Accepted","runtime":"126 ms","url":"/submissions/detail/577329690/","is_pending":"Not Pending","title":"Redundant Connection","memory":"43.7 MB","code":"/**\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findRedundantConnection = function(edges) {\n    const map = {};\n    \n    for(let [u, v] of edges) {\n        if(!(u in map)) map[u] = new Set([v]);\n        if(!(v in map)) map[v] = new Set([u]);\n        map[u].add(v);\n        map[v].add(u);\n    }\n    \n    for(let i = edges.length - 1; i >= 0; i--) {\n        const u = edges[i][0];\n        const v = edges[i][1];\n        map[u].delete(v);\n        map[v].delete(u);\n        \n        let stack = [u];\n        let visited = new Set();\n        while(stack.length) {\n            const curNode = stack.pop();\n            visited.add(curNode);\n            for(let neighbor of map[curNode]) {\n                if(!visited.has(neighbor)) {\n                    stack.push(neighbor);\n                }\n            }\n        }\n        if(visited.size == Object.keys(map).length) {\n            return edges[i];\n        } \n                \n        map[u].add(v);\n        map[v].add(u);\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection","has_notes":false}