{"id":564336820,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1633153209,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/564336820/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar isPalindrome = function(head) {\n    let seen = new Set()\n    \n    seen.add(head)\n    \n    const reverse = () => {\n        \n        let previous = null; //stores already reversed nodes\n        let current = head;\n\n        while (current !== null) {\n        let temp = current.next; //save next pointer to a temp variable\n        current.next = previous; // change current node's next to already reversed node therefore                                  // reversing current\n      \n        previous = current; //set new reversed node\n        current = temp;\n\n        }\n        return previous;  \n    }\n    \n    let headB = reverse()\n    let current = head\n    \n    \n    while (current && headB) {\n        if (current.val !== headB.val) {\n            return false\n        }\n        current = current.next\n        headB = headB.next\n    }\n    return true\n    \n    \n    \n};","compare_result":"1111111010011101000111111111111111111111111111111111111111111111111111111110111111111","title_slug":"palindrome-linked-list","has_notes":false}