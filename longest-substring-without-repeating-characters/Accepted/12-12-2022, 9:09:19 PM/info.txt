{"id":858919755,"lang":"javascript","lang_name":"JavaScript","time":"6 months, 1 week","timestamp":1670897359,"status":10,"status_display":"Accepted","runtime":"155 ms","url":"/submissions/detail/858919755/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"46.5 MB","code":"/**\n * @param {string} s\n * @return {number}\n */\n// var lengthOfLongestSubstring = function(s) {\n//     let map = {}, j = 0, max = 0\n    \n//     for (let i = 0; i < s.length; i++) {\n//         // if the map already contains the 's[i]', shrink the window from the beginning so that\n//         // we have only one occurrence of 's[i]'\n//         if (s[i] in map) j = Math.max(j, map[s[i]] + 1)\n        \n//         map[s[i]] = i\n        \n//         max = Math.max(max, i - j + 1)\n//     }\n//     return max\n// };\n\n// \"abcabcbb\"\n// i = 0\n// j = 0, max = 0\n// {a: 0}, max = Math.max(0, 0-0+1) = 1\n\n// i = 1\n// j = 0\n// {a: 0, b:1}, max = Math.max(1, 1-0+1) = 2\n\n// i = 2\n// j = 0\n// {a: 0, b:1, c:2},  max = Math.max(2, 2 - 0 + 1) = 3\n\n// i = 3\n// j = Math.max(0, 3+1) = 4\n// {a: 0, b:1, c:2}, max = Math.max(3, 3-4+1) = 3\n\n// i = 4\n// j = math.max(4, 1+1) = 4\n// {a: 0, b:4, c:2}, max = Math.max(3, 4-4+1) = 3\n\n// const lengthOfLongestSubstring = (s) => {\n//     let max = 0, j = 0, map = new Map()\n    \n//     for (let i = 0; i < s.length; i++) {\n//         if (map.has(s[i])) j = Math.max(j, map.get(s[i]) + 1)\n        \n//         map.set(s[i], i)\n//         max = Math.max(max, i-j+1)\n//     }\n//     return max\n// }\n\n// const lengthOfLongestSubstring = (s) => {\n//     let res = 0\n    \n//     const checkRepetition = (s, start, end) => {\n//         let map = {}\n        \n//         for (let i = start; i <= end; i++) {\n//             if (!(s[i] in map)) map[s[i]] = 0\n//             map[s[i]]++\n            \n//             if (map[s[i]] > 1) return false\n//         }\n        \n// //         let keys = Object.keys(map)\n        \n// //         for (let i = 0; i < keys.length; i++) {\n// //             if (map[keys[i]] > 1) return false\n// //         }\n//         return true\n\n//     }\n    \n//     for (let i = 0; i < s.length; i++) {\n//         for (let j = i; j < s.length; j++) {\n//             if (checkRepetition(s, i, j)) res = Math.max(res, j - i + 1)\n//         }\n//     }\n    \n//     return res\n// }\n\n\nfunction lengthOfLongestSubstring(s) {\n  // Create a set to keep track of the characters we have seen in the current\n  // substring\n  let seen = new Set();\n\n  // Keep track of the longest substring we have found so far\n  let longest = 0;\n\n  // Create two pointers to keep track of the current substring\n  let start = 0;\n  let end = 0;\n\n  while (end < s.length) {\n    // If we have not seen the character at the end pointer before,\n    // add it to the set of seen characters and move the end pointer\n    // to the right to expand the current substring\n    if (!seen.has(s[end])) {\n      seen.add(s[end]);\n      end++;\n    } else {\n      // If we have seen the character at the end pointer before,\n      // remove the character at the start pointer from the set\n      // of seen characters and move the start pointer to the right\n      // to shrink the current substring\n      seen.delete(s[start]);\n      start++;\n    }\n\n    // Update the longest substring if the current substring is longer\n    longest = Math.max(longest, end - start);\n  }\n\n  return longest;\n}\n\n\n\n\n\n\n\n","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false}