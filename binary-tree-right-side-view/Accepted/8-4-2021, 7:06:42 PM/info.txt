{"id":533423727,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 10 months","timestamp":1628118402,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/533423727/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"40.3 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n\n//inspired from: https://leetcode.com/problems/binary-tree-right-side-view/discuss/1191984/Clean-and-Simple-JavaScript-DFS\n\nvar rightSideView = function(root) {\n    let result = []\n    \n    const dfs = (node, depth = 0) => {\n        if (!node) return\n        \n        if (!result[depth]) result[depth] = node.val //depth ensures that left nodes are not saved unless a right node is NOT present\n        \n        dfs(node.right, depth + 1)\n        dfs(node.left, depth + 1)\n        \n    }\n    dfs(root)\n    return result\n    \n    \n    \n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false}