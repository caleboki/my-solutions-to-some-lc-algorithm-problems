{"id":744749761,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 2 weeks","timestamp":1657590956,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/744749761/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"N/A","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {boolean}\n */\nvar validTree = function(n, edges) {\n    let adjList = {}\n    \n    const buildGraph = (edges) => {\n        for (let edge of edges) {\n            let [node, child] = edge\n            if (!adjList[node]) adjList[node] = []\n            if (!adjList[child]) adjList[child] = []\n            adjList[node].push(child)\n            adjList[child].push(node)\n            \n           \n        }\n    }\n    \n    buildGraph(edges)\n    console.log(adjList)\n    \n    const dfs = (graph, node, target, visited = new Set()) => {\n        \n        if (node === target) return true\n        visited.add(node)\n        \n        console.log(node)\n        for (let child of graph[node]) {\n            if (visited.has(child)) continue\n            let isFound = dfs(graph, child, target, visited)\n            if (isFound) return true\n        }\n        return false\n        \n    }\n    \n    \n    if (dfs(adjList, 0, n-1)) return true\n    \n    return false\n    \n};","compare_result":"101011000000000000000000000000000000000000000","title_slug":"graph-valid-tree","has_notes":false}