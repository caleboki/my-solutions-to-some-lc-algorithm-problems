{"id":745220807,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 2 weeks","timestamp":1657635497,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/745220807/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"N/A","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {boolean}\n */\nvar validTree = function(n, edges) {\n    let adjList = {}\n    \n    const buildGraph = (edges) => {\n        for (let edge of edges) {\n            let [node, child] = edge\n            if (!adjList[node]) adjList[node] = []\n            if (!adjList[child]) adjList[child] = []\n            adjList[node].push(child)\n            \n            \n           \n        }\n    }\n    \n    buildGraph(edges)\n    console.log(adjList)\n    \n    const dfs = (graph, node, visited = new Set()) => {\n        if (visited.has(node)) return false\n        visited.add(node)\n        \n        for (let child of graph[node]) {\n            dfs(graph, child, visited)\n        }\n        return true\n    }\n    \n    for (let i = 0; i < n; i++) {\n        if (!dfs(adjList, i)) return false\n    }\n    \n    return true\n    \n};","compare_result":"101000000000000000000000000000000000000000000","title_slug":"graph-valid-tree","has_notes":false}