{"id":745364922,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 2 weeks","timestamp":1657647021,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/745364922/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"N/A","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {boolean}\n */\n// var validTree = function(n, edges) {\n//     let adjList = {}\n    \n//     const buildGraph = (edges) => {\n//         for (let i = 0; i < n; i++) adjList[i] = []\n        \n//         for (let edge of edges) {\n//             let [node, child] = edge\n//             adjList[node].push(child)\n//         }\n//     }\n    \n//     const dfs = (node, visited = new Set()) => {\n//         if (visited.has(node)) return false\n//         if (!adjList[node].length) return true\n        \n//         visited.add(node)\n        \n//         for (let child of adjList[node]) {\n//             if (!dfs(child, visited)) return false\n//         }\n//         visited.delete(node)\n//         adjList[node] = []\n//         return true\n        \n//     }\n    \n//     buildGraph(edges)\n//     console.log(adjList)\n    \n//     for (let i = 0; i < n; i++) {\n//         if (!dfs(i)) return false\n//     }\n//     return true\n// };\n\nconst validTree = (n, edges) => {\n    let adjList = {}, visited = new Set(), parent = {}\n    parent[0] = -1\n    \n    const buildGraph = (edges) => {\n        for (let i = 0; i < n; i++) {\n            adjList[i] = []\n        }\n        for (let edge of edges) {\n            let [node, child] = edge\n            adjList[node].push(child)\n            adjList[child].push(node)\n        }\n    }\n    buildGraph(edges)\n    console.log(adjList)\n    \n    const dfs = (startNode) => {\n        let stack = [startNode]\n        \n        while (stack.length > 0) {\n            let node = stack.pop()\n            \n            for (let child of adjList[node]) {\n                if (parent[node] === child) continue\n                \n                if (child in parent) return false\n                stack.push(child)\n                parent[child] = node\n                \n                \n            }\n        }\n    }\n    \n    dfs(0)\n    \n    return Object.keys(parent).length === n\n    \n}","compare_result":"101111011111111111111000111111111101111111101","title_slug":"graph-valid-tree","has_notes":false}