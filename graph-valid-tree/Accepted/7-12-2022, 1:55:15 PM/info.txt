{"id":745385416,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 2 weeks","timestamp":1657648515,"status":10,"status_display":"Accepted","runtime":"245 ms","url":"/submissions/detail/745385416/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"51.8 MB","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {boolean}\n */\n// var validTree = function(n, edges) {\n//     let adjList = {}\n    \n//     const buildGraph = (edges) => {\n//         for (let i = 0; i < n; i++) adjList[i] = []\n        \n//         for (let edge of edges) {\n//             let [node, child] = edge\n//             adjList[node].push(child)\n//         }\n//     }\n    \n//     const dfs = (node, visited = new Set()) => {\n//         if (visited.has(node)) return false\n//         if (!adjList[node].length) return true\n        \n//         visited.add(node)\n        \n//         for (let child of adjList[node]) {\n//             if (!dfs(child, visited)) return false\n//         }\n//         visited.delete(node)\n//         adjList[node] = []\n//         return true\n        \n//     }\n    \n//     buildGraph(edges)\n//     console.log(adjList)\n    \n//     for (let i = 0; i < n; i++) {\n//         if (!dfs(i)) return false\n//     }\n//     return true\n// };\n\nconst validTree = (n, edges) => {\n    let adjList = {}, visited = new Set(), parent = {}\n    parent[0] = -1 //parent node to detect cycles. Initialized 0 to -1 because 0 node has no parent\n    \n    const buildGraph = (edges) => {\n        for (let i = 0; i < n; i++) {\n            adjList[i] = []\n        }\n        for (let edge of edges) {\n            let [node, child] = edge\n            adjList[node].push(child)\n            adjList[child].push(node)\n        }\n    }\n    buildGraph(edges)\n    console.log(adjList)\n    \n    const dfs = (currentNode, parent) => {\n        // mark current node as visited\n        visited.add(currentNode)\n        \n        /** explore child nodes via dfs**/\n        for (let child of adjList[currentNode]) {\n            if (visited.has(child)) {\n                if (child !== parent) return true\n            } else {\n                if (dfs(child, currentNode)) return true\n            }\n        }\n        return false\n    }\n    \n    if (dfs(0, -1)) return false\n    \n    /**\n     * do we have unconnected components?\n     * at this point we should have seen all the nodes by DFS traversal\n     * if there are nodes that aren't visited, theres an unconnected component\n     **/\n    \n    for (let i = 0; i < n; i++) {\n        if (!visited.has(i)) return false\n    }\n    \n    return true\n    \n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"graph-valid-tree","has_notes":false}