{"id":563982928,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 8 months","timestamp":1633090740,"status":10,"status_display":"Accepted","runtime":"148 ms","url":"/submissions/detail/563982928/","is_pending":"Not Pending","title":"Design Linked List","memory":"46.9 MB","code":"\n// var MyLinkedList = function() {\n    \n// };\n\n// /** \n//  * @param {number} index\n//  * @return {number}\n//  */\n// MyLinkedList.prototype.get = function(index) {\n    \n// };\n\n// /** \n//  * @param {number} val\n//  * @return {void}\n//  */\n// MyLinkedList.prototype.addAtHead = function(val) {\n    \n// };\n\n// /** \n//  * @param {number} val\n//  * @return {void}\n//  */\n// MyLinkedList.prototype.addAtTail = function(val) {\n    \n// };\n\n// /** \n//  * @param {number} index \n//  * @param {number} val\n//  * @return {void}\n//  */\n// MyLinkedList.prototype.addAtIndex = function(index, val) {\n    \n// };\n\n// /** \n//  * @param {number} index\n//  * @return {void}\n//  */\n// MyLinkedList.prototype.deleteAtIndex = function(index) {\n    \n// };\n\n/** \n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index,val)\n * obj.deleteAtIndex(index)\n */\n\nclass ListNode {\n  constructor(val, next = null) {\n    this.val = val\n    this.next = next \n  }\n}\n\nclass MyLinkedList {\n  constructor() {\n    this.head = null\n    this.len = 0\n  }\n\n  get(index) {\n    if (index < 0 || index >= this.len) return -1\n\n    let cur = this.head\n    for (let i = 0; i < index; i++) {\n      cur = cur.next;\n    }\n    return cur.val\n  }\n\n  addAtHead(val) {\n    let node = new ListNode(val)\n    node.next = this.head\n    this.head = node\n    this.len++\n  }\n\n  addAtTail(val) {\n    if (this.head === null) {\n      this.addAtHead(val)\n      return\n    }\n\n    let node = new ListNode(val)\n    let cur = this.head\n    for (let i = 0; i < this.len - 1; i++) {\n      cur = cur.next\n    }\n    cur.next = node\n    this.len++\n  }\n\n  addAtIndex(index, val) {\n    if (this.head === null || index === 0) {\n      this.addAtHead(val)\n      return\n    }\n    if (index === this.len) {\n      this.addAtTail(val)\n      return\n    }\n    if (index > this.len) return\n\n    let node = new ListNode(val)\n    let cur = this.head\n    for (let i = 0; i < index - 1; i++) {\n      cur = cur.next\n    }\n    node.next = cur.next\n    cur.next = node\n    this.len++\n  }\n\n  deleteAtIndex(index) {\n    if (index < 0 || index >= this.len) return\n    if (index === 0) {\n      this.head = this.head.next\n      return this.len--\n    }\n\n    let cur = this.head\n    for (let i = 0; i < index - 1; i++) {\n      cur = cur.next\n    }\n    cur.next = cur.next.next\n    this.len--\n  }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"design-linked-list","has_notes":false}