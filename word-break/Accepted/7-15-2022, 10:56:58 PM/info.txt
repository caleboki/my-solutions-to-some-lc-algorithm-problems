{"id":748199944,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 1 week","timestamp":1657940218,"status":10,"status_display":"Accepted","runtime":"125 ms","url":"/submissions/detail/748199944/","is_pending":"Not Pending","title":"Word Break","memory":"44.4 MB","code":"/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {boolean}\n */\nvar wordBreak = function(s, wordDict, memo={}) {\n    if (s in memo) return memo[s];\n    if (s === '') return true;\n\n    for (let word of wordDict) {\n        //check if some substring is a prefix of another string (i.e, s)\n        if (s.indexOf(word) === 0) {\n          //get everything after the prefix\n          const suffix = s.slice(word.length) //word.length is the length of the prefix\n          if (wordBreak(suffix, wordDict, memo) === true) {\n            memo[s] = true;\n            return true;\n          };\n        }\n    }\n    memo[s] = false;\n    return false;\n};\n\n// const wordBreak = (s, wordDict) => {\n//     const queue = [...wordDict]\n    \n//     while (queue.length) {\n//         const size = queue.length\n        \n//         for (let i = 0; i < size; i++) {\n//             const current = queue.shift()\n//             if (current.length === 0) return true\n            \n//             if (s.indexOf(current) === 0) {\n                \n//                 queue.push(s.slice(current.length))\n//                 console.log(queue)\n//             }\n//         }\n//     }\n//     return false\n// }","compare_result":"111111111111111111111111111111111111111111111","title_slug":"word-break","has_notes":false}