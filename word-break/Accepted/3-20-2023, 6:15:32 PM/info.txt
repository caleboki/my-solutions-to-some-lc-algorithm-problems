{"id":919104528,"lang":"javascript","lang_name":"JavaScript","time":"3Â months","timestamp":1679350532,"status":10,"status_display":"Accepted","runtime":"61 ms","url":"/submissions/detail/919104528/","is_pending":"Not Pending","title":"Word Break","memory":"44.5 MB","code":"/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {boolean}\n */\n// var wordBreak = function(s, wordDict, memo={}) {\n//     if (s in memo) return memo[s]\n//     if (s === '') return true\n\n//     for (let word of wordDict) {\n//         //check if some substring is a prefix of another string (i.e, s)\n//         if (s.indexOf(word) === 0) {\n//           //get everything after the prefix\n//           const suffix = s.slice(word.length) //word.length is the length of the prefix\n//           if (wordBreak(suffix, wordDict, memo) === true) {\n//             memo[s] = true\n//             return true\n//           }\n//         }\n//     }\n//     memo[s] = false\n//     return false\n// };\n\nconst wordBreak = (s, wordDict, memo = new Map()) => {\n    if (memo.has(s)) return memo.get(s)\n    if (s === '') return true\n\n    for (let word of wordDict) {\n        if (s.indexOf(word) === 0) {\n            const suffix = s.slice(word.length)\n            memo.set(suffix, wordBreak(suffix, wordDict, memo))\n            if (wordBreak(suffix, wordDict, memo)) return true\n        }\n    }\n\n    return false\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"word-break","has_notes":false}