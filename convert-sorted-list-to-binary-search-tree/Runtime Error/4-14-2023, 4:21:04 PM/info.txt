{"id":933822348,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 1 week","timestamp":1681503664,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/933822348/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {TreeNode}\n */\nvar sortedListToBST = function(head) {\n    let current = head, arr = []\n\n    while (current) {\n        arr.push(current.val)\n        current = current.next\n    }\n\n    const createBST = (left, right) => {\n        if (left > right) return null\n        const mid = Math.floor((left + right) / 2)\n\n        const root = new TreeNode(arr[mid])\n        root.left = new TreeNode(left, mid-1)\n        root.right = new TreeNode(mid+1, right)\n\n        return root\n    }\n\n    return createBST(0, arr.length - 1)\n    \n};\n\n// var sortedArrayToBST = function(nums) {\n//     let head = new TreeNode()\n    \n//     const insertNode = (head, data) => {\n//         if (!head) {\n//             head = new TreeNode(data, null, null)\n//             return head   \n//         }\n        \n//         if (head.val < data) {\n//             head.right = insertNode(head.right, data)\n//         } else {\n//             head.left = insertNode(head.left, data)\n//         }\n        \n//         return head\n//     }\n\n//     const mid = Math.floor(nums.length/2)\n    \n//     for (let num of nums) insertNode(head, num)\n    \n//     return head\n// };","compare_result":"00000000000000000000000000000000","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false}