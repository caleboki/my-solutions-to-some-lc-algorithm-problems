{"id":747080985,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 1 week","timestamp":1657817047,"status":10,"status_display":"Accepted","runtime":"116 ms","url":"/submissions/detail/747080985/","is_pending":"Not Pending","title":"Merge Intervals","memory":"48.4 MB","code":"/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\n// var merge = function(intervals) {    \n//     intervals.sort((a, b) => {return a[0] - b[0]}) //sort by start time\n//     let merged = []\n    \n//     for (let interval of intervals) {\n//         if (merged.length === 0 || merged[merged.length - 1][1] < interval[0]) {\n//             merged.push(interval)\n//         }\n//         else {\n//             merged[merged.length - 1][1] = Math.max(merged[merged.length - 1][1], interval[1])\n//         }\n//     }\n//     return merged\n// };\n\nconst merge = (intervals) => {\n\tlet merged = []\n    intervals.sort((a, b) => {return a[0] - b[0]})\n\n\tfor (let interval of intervals) {\n\t\tif (merged.length === 0 || merged[merged.length - 1][1] < interval[0]) {\n\t\t\tmerged.push(interval)\n        } \n        else {\n            merged[merged.length - 1][1] = Math.max(merged[merged.length - 1][1], interval[1])\n        }\n    }\n    return merged\n}\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false}