{"id":743582556,"lang":"javascript","lang_name":"JavaScript","time":"11 months, 2 weeks","timestamp":1657474826,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/743582556/","is_pending":"Not Pending","title":"Merge Intervals","memory":"N/A","code":"/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\n// var merge = function(intervals) {    \n//     intervals.sort((a, b) => {return a[0] - b[0]}) //sort by start time\n//     let merged = []\n    \n//     for (let interval of intervals) {\n//         if (merged.length === 0 || merged[merged.length - 1][1] < interval[0]) {\n//             merged.push(interval)\n//         }\n//         else {\n//             merged[merged.length - 1][1] = Math.max(merged[merged.length - 1][1], interval[1])\n//         }\n//     }\n//     return merged\n// };\n\nconst merge = (intervals) => {\n\tintervals = intervals.sort((a, b) => {return a[0] - b[0]})\n\tlet merged = []\n\n\tfor (let interval of intervals) {\n\t\tif (merged.length === 0 || merged[merged.length - 1][1] < interval[0]) {\n\t\t\tmerged.push(interval)\n\n    } else {\n            merged[merged.length - 1][1] = interval[1]\n        }\n    }\n\n    return merged\n}\n","compare_result":"1111111111001110000010000011001101111010010110000100111110111110100001100100010010110000010110101000001000001001110111000000000010000100000000010000000000000000000000010","title_slug":"merge-intervals","has_notes":false}