{"id":691885763,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 1 month","timestamp":1651530240,"status":10,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/691885763/","is_pending":"Not Pending","title":"Number of Islands","memory":"44.3 MB","code":"/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n    let nIslands = 0\n    let rows = grid.length\n    \n    if(rows === 0) return 0\n    \n    //number of matrix columns. 0 because at least 1 row would always exist\n    let cols = grid[0].length \n    \n    //traverse grid\n    for (let i = 0; i < rows; i++) {\n        for(let j = 0; j < cols; j++) {\n            if (grid[i][j] === '1') {\n                dfs(grid, i, j, rows, cols)\n                nIslands++\n            }\n        }\n    }\n    return nIslands\n};\n\nconst dfs = (matrix, x, y, r, c) => {\n    //handling out of bound and base case\n    if (x < 0 || x >= r || y < 0 || y>=c || matrix[x][y] !== '1') return \n    \n    matrix[x][y] = '2'\n    \n    dfs(matrix, x+1, y, r, c) //right\n    dfs(matrix, x-1, y, r, c) //left\n    dfs(matrix, x, y+1, r, c) //up\n    dfs(matrix, x, y-1, r, c) //down\n}\n\n\n\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false}