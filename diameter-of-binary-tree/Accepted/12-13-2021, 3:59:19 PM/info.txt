{"id":601400373,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 6 months","timestamp":1639429159,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/601400373/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"42.8 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar diameterOfBinaryTree = function(root) {\n    let diameter = 0\n    \n    const dfs = (node) => {\n        if (!node) return 0\n       \n        let left = dfs(node.left)\n        let right = dfs(node.right)\n        \n        diameter = Math.max(diameter, left + right)\n        return Math.max(left, right) + 1\n    }\n    \n    dfs(root)\n    return diameter  \n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false}