{"id":785965926,"lang":"javascript","lang_name":"JavaScript","time":"9 months, 3 weeks","timestamp":1661742132,"status":10,"status_display":"Accepted","runtime":"123 ms","url":"/submissions/detail/785965926/","is_pending":"Not Pending","title":"Reorganize String","memory":"44.1 MB","code":"/**\n * @param {string} s\n * @return {string}\n */\n\n// Time Complexity: O(n log(n))\n// Space Complexity: O(n)\nvar reorganizeString = function(s) {\n    let map = {}, result = []\n    \n    for (let c of s) {\n        map[c] = (map[c] || 0) + 1\n    }\n    \n    let sortedMap = Object.entries(map).sort((a, b) => b[1] - a[1])\n    \n    // Check if we can distribute the first char by every other position.\n    // We only need to check the first char because the chars are ordered by count\n    // so if the first char succeeds, all following chars will succeed\n    if (sortedMap[0][1] > Math.floor((s.length + 1) / 2)) return ''\n    \n    let position = 0\n    \n    for (let entry of sortedMap) {\n        let [char, count] = entry\n        \n        for (let j = 0; j < count; j++) {\n            // Distribute the current char every other position. The same char\n            // will never be placed next to each other even on the 2nd loop\n            // for placing chars in odd positions\n            result[position] = char\n            position += 2\n            \n            // This will only happen once since total number of chars\n            // will be exactly equal to the length of s\n            if (position >= s.length) position = 1\n            \n        }\n        \n    }\n    return result.join('')\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reorganize-string","has_notes":false}