{"id":765398843,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 3 weeks","timestamp":1659648893,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/765398843/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"N/A","code":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxDistance = function(grid) {\n    if (grid.length === 0) return -1\n    \n    let rows = grid.length, cols = grid[0].length, queue = [], directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]\n    \n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 1) queue.push([i, j, 0])\n        }\n    }\n    \n    if (queue.length === 0) return -1\n    \n    let result = 0\n    \n    while (queue.length > 0) {\n        let length = queue.length\n        let currentLevel = []\n        \n        for (let i = 0; i < length; i++) {\n            const [row, col, distance] = queue.shift()\n            \n            if (grid[row][col] === '#') continue\n            grid[row][col] = '#'\n            \n            result = distance\n            \n            for (let [r, c] of directions) {\n                let newR = row + r, newC = col + c\n                if (newR < 0 || newC < 0 || newR >= grid.length || newC >= grid[0].length) continue\n                //only interested in directions with zeroes hence discarding ones\n                if (grid[newR][newC] === 0) currentLevel.push([newR, newC, distance + 1])\n            }\n        }\n        queue = currentLevel\n    }\n    return result \n   \n};","compare_result":"1110111111111111111111111111111111111","title_slug":"as-far-from-land-as-possible","has_notes":false}