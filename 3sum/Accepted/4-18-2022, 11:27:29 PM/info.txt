{"id":683204354,"lang":"javascript","lang_name":"JavaScript","time":"1Â year, 2Â months","timestamp":1650338849,"status":10,"status_display":"Accepted","runtime":"131 ms","url":"/submissions/detail/683204354/","is_pending":"Not Pending","title":"3Sum","memory":"52.2 MB","code":"/**\n * @param {number[]} nums\n * @return {number[][]}\n */\n// var threeSum = function(nums) {\n//     //sorting required to check for duplicates more efficiently as duplicates would be adjacent    //to each other\n    \n//     nums = nums.sort((a, b) => {\n//         return (a-b)\n//     })\n    \n//     const res = []\n    \n//     const twoSum = (pos) => {\n//         const seen = new Set()\n        \n//         for (let j = pos + 1; j < nums.length; j++) {\n            \n//             //checking if value is in map/set and making sure of no duplicates in next                     // value (j+1)\n            \n//             if (seen.has(nums[j]) && nums[j] !== nums[j+1]) {\n//                 res.push([nums[pos], nums[j], -nums[pos]-nums[j]])\n//             }\n//             seen.add(-nums[pos]-nums[j])\n//         }\n//     }\n    \n//     for (let i = 0; i < nums.length; i++) {\n//         //if (nums[i] > 0) continue\n//         if (nums[i] === nums[i-1]) continue //checking for duplicates in previous value\n        \n//         twoSum(i)\n//     }\n    \n//     return res\n// };\n\nvar threeSum = function(nums) {\n    nums.sort((a, b) => a-b)\n    \n    const triplets = []\n    \n    const findPairs = (arr, target, left, res) => {\n        let right = arr.length - 1\n        \n        while (left < right) {\n            let current = arr[left] + arr[right]\n            \n            if (current === target) {\n                res.push([-target, arr[left], arr[right]])\n                \n                left++, right++\n                \n                 //skip elements to avoid duplicates\n                while(left < right && arr[left] === arr[left-1]) left++\n                \n                while(left < right && arr[right] === arr[right+1]) right--\n            }\n            \n            if (target > current) left++ // we need a pair with a bigger sum\n            if (target < current) right-- // we need a pair with a smaller sum\n        }\n    }\n    \n    for (let i = 0; i < nums.length; i++) {\n        if (i > 0 && nums[i] === nums[i-1]) continue //avoid duplicate\n        \n        findPairs(nums, -nums[i], i+1, triplets)\n    }\n    return triplets\n}\n\n// var threeSum = function(nums) {\n//     let res = [], map = new Map()\n    \n//    const twoSum = (nums, target) => {\n//         const pairs = {}\n\n//         for (let i in nums) {\n//             if (nums[i] in pairs) return [pairs[nums[i]], i]\n\n//             pairs[target - nums[i]] = i\n//         }\n//     }\n   \n//    for (let i = 1; i < nums.length; i++) {\n//        if (i > 0 && nums[i] === nums[i-1]) {\n//            //map.set(nums[i], 0)\n//            continue\n//        }\n//        let index = twoSum(nums, -nums[i])\n       \n//        if (index && map.has(nums[i]) && map.has(nums[index[0]]) && map.has(nums[index[1]])) \n//            {\n//                continue\n//            }\n       \n       \n//        map.set(nums[i], 0)\n//        if (index) map.set(nums[index[0]], 0)\n//        if (index) map.set(nums[index[1]], 0)\n//        console.log(map)\n//        if (index) res.push([nums[i], nums[index[0]], nums[index[1]]])\n//    }\n    \n              \n//   return res  \n// }\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum","has_notes":false}