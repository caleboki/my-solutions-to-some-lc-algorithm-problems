{"id":600903887,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 6 months","timestamp":1639345240,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/600903887/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"/**\n * @param {number[]} nums\n * @return {number[][]}\n */\n// var threeSum = function(nums) {\n//     //sorting required to check for duplicates more efficiently as duplicates would be adjacent    //to each other\n    \n//     nums = nums.sort((a, b) => {\n//         return (a-b)\n//     })\n    \n//     const res = []\n    \n//     const twoSum = (pos) => {\n//         const seen = new Set()\n        \n//         for (let j = pos + 1; j < nums.length; j++) {\n            \n//             //checking if value is in map/set and making sure of no duplicates in next                     // value (j+1)\n            \n//             if (seen.has(nums[j]) && nums[j] !== nums[j+1]) {\n//                 res.push([nums[pos], nums[j], -nums[pos]-nums[j]])\n//             }\n//             seen.add(-nums[pos]-nums[j])\n//         }\n//     }\n    \n//     for (let i = 0; i < nums.length; i++) {\n//         //if (nums[i] > 0) continue\n//         if (nums[i] === nums[i-1]) continue //checking for duplicates in previous value\n        \n//         twoSum(i)\n//     }\n    \n//     return res\n// };\n\nvar threeSum = function(nums) {\n    nums.sort((a, b) => a-b)\n    \n    const triplets = []\n    \n    const findPairs = (arr, target, left, res) => {\n        let right = arr.length - 1\n        \n        while (left < right) {\n            let current = arr[left] + arr[right]\n            \n            if (current === target) {\n                res.push([-target, arr[left], arr[right]])\n                \n                left++, right++\n                \n                 //skip elements to avoid duplicates\n                while(left < right && arr[left] === arr[left-1]) left++\n                \n                while(left < right && arr[right] === arr[right+1]) right--\n            }\n            \n            if (target > current) left++ // we need a pair with a bigger sum\n            if (target < current) right-- // we need a pair with a bigger sum\n        }\n    }\n    \n    for (let i = 0; i < nums.length; i++) {\n        if (i > 0 && nums[i] === nums[i-1]) continue //avoid duplicate\n        \n        findPairs(nums, -nums[i], i, triplets)\n    }\n    return triplets\n}\n","compare_result":"111101111111111111011101100011100101100000011001000110111100000101111011111011011101000111000110010101110110101000001000010100111000000010001001001001000001000000011101000100010110000100100010101000001011000100100000100011100000100100111000011001011011001001101000010111010010101110110101001101111100000010101001000011","title_slug":"3sum","has_notes":false}