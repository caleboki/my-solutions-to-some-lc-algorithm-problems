{"id":932115009,"lang":"javascript","lang_name":"JavaScript","time":"2 months, 1 week","timestamp":1681242812,"status":10,"status_display":"Accepted","runtime":"118 ms","url":"/submissions/detail/932115009/","is_pending":"Not Pending","title":"Insertion Sort List","memory":"44.8 MB","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\n// const insertionSortList = (head) => {\n//     const extractValues = (head) => {\n//         let values = [], current = head\n    \n//         while (current) {\n//             values.push(current.val)\n//             current = current.next\n//         }\n//         return values\n//     }\n    \n//     const sortList = (arr) => {\n//         for (let i = 1; i < arr.length; i++) {\n//             let currentIndex = i\n//             while (currentIndex > 0 && arr[currentIndex - 1] > arr[currentIndex]) {\n//                 let temp = arr[currentIndex]\n//                 arr[currentIndex] = arr[currentIndex - 1]\n//                 arr[currentIndex - 1] = temp\n//                 currentIndex--\n//             }\n//         }\n//         return arr\n//     }\n    \n//     const buildList = (arr) => {\n//         arr = sortList(arr)\n        \n//         let head = null, ln = null\n        \n//         for (let i = 0; i < arr.length; i++) {\n//             if (head === null) {\n//                 head = new ListNode(arr[i])\n//                 ln = head\n//             } else {\n//                 ln.next = new ListNode(arr[i])\n//                 ln = ln.next\n//             }\n//         }\n//         return head\n//     }\n    \n//     const values = extractValues(head)\n//     return buildList(values)\n// }\n\n// const insertionSortList = (head) => {\n//     let dummy = new ListNode(), current = head\n\n//     while (current) {\n//         let prev = dummy\n\n//         while (prev.next && prev.next.val <= current.val) {\n//             prev = prev.next\n//         }\n\n//         let temp = current.next\n//         current.next = prev.next\n//         prev.next = current\n\n//         current = temp\n//     }\n//     return dummy.next\n// }\n\nvar insertionSortList = function(head) {\n    if (!head || !head.next) {\n        return head;\n    }\n    \n    // Check for cycles\n    let visited = new Set();\n    let current = head;\n    while (current) {\n        if (visited.has(current)) {\n            // Found a cycle\n            throw new Error('Found cycle in the ListNode');\n        }\n        visited.add(current);\n        current = current.next;\n    }\n    \n    // Sort the list\n    let dummy = new ListNode(-1);\n    let prev = dummy;\n    let curr = head;\n    \n    while (curr) {\n        let nextNode = curr.next;\n        \n        // Find the right position to insert curr\n        while (prev.next && prev.next.val < curr.val) {\n            prev = prev.next;\n        }\n        \n        // Insert curr\n        curr.next = prev.next;\n        prev.next = curr;\n        \n        // Reset prev for the next iteration\n        prev = dummy;\n        curr = nextNode;\n    }\n    \n    return dummy.next;\n};\n\n\n\n\n","compare_result":"1111111111111111111","title_slug":"insertion-sort-list","has_notes":false}