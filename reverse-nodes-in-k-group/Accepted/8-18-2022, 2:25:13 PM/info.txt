{"id":777151012,"lang":"javascript","lang_name":"JavaScript","time":"10 months, 1 week","timestamp":1660847113,"status":10,"status_display":"Accepted","runtime":"112 ms","url":"/submissions/detail/777151012/","is_pending":"Not Pending","title":"Reverse Nodes in k-Group","memory":"45 MB","code":"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\n// var reverseKGroup = function(head, k) {\n    \n//     let newHead = null, ln = null, current = head, count = 1\n    \n//     const reverseList = (list) => {}\n    \n//     const mergeList = (l1, l2) => {\n//         return l1\n//     }\n    \n//     while (current) {\n//         if (newHead === null) {\n//             newHead = new ListNode(current.val)\n//             ln = newHead\n//         } else {\n//             ln.next = new ListNode(current.val)\n//             ln = ln.next\n//         }\n//         current = current.next\n//         count++ \n        \n//         if (count === k) {\n//             let reversed = reverseList(newHead)\n//             mergeList(null, reversed)\n            \n//         }\n//     }\n    \n// };\n\n// const reverseKGroup = (head, k) => {\n//     let dummy = new ListNode(0, head)\n//     let groupPrev = dummy\n    \n//     const getKth = (curr, k) => {\n//         while (curr && k > 0) {\n//             curr = curr.next\n//             k--\n//         }\n//         return curr\n//     }\n    \n//     while () {\n//            getKth(groupPrev, k)\n//            }\n// }\n\nconst reverseKGroup = (head, k) => {\n    let count = 0, current = head\n    \n    const reverseLinkedList = (list, n) => {\n        let previous = null\n        let current = list\n        \n        while (n > 0) {\n            let temp = current.next\n            current.next = previous\n            previous = current\n            \n            current = temp\n            \n            n--\n        }\n        \n        return previous\n    }\n    \n    while (count < k && current !== null) {\n        current = current.next\n        count++\n    }\n    \n    if (count === k) {\n        let reversedHead = reverseLinkedList(head, k)\n        head.next = reverseKGroup(current, k)\n        return reversedHead\n    }\n    \n    return head\n    \n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-nodes-in-k-group","has_notes":false}