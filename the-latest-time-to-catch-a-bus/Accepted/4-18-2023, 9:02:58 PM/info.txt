{"id":936095019,"lang":"javascript","lang_name":"JavaScript","time":"2Â months","timestamp":1681866178,"status":10,"status_display":"Accepted","runtime":"185 ms","url":"/submissions/detail/936095019/","is_pending":"Not Pending","title":"The Latest Time to Catch a Bus","memory":"55 MB","code":"/**\n * @param {number[]} buses\n * @param {number[]} passengers\n * @param {number} capacity\n * @return {number}\n */\n// var latestTimeCatchTheBus = function(buses, passengers, capacity) {\n//     buses.sort((a, b) => a-b)\n//     passengers.sort((a, b) => a-b)\n\n//     let j = 0, spots = capacity, currentPassenger, latest = passengers[0]\n\n//     for (let i = 0; i < buses.length; i++) {\n//         while (spots > 0) {\n//             if (passengers[i] > buses[i]) {\n//                 break\n//             }\n//             currentPassenger = passengers[j]\n//             latest = Math.max(latest, currentPassenger)\n//             j++\n//             spots--\n//         }\n//         spots = capacity\n//     }\n//     return latest-1\n// };\n\n// var latestTimeCatchTheBus = function(buses, pass, cap) {\n//     buses = buses.sort((a,b) => a-b);\n//     pass = pass.sort((a,b) => a-b);\n//     let p = 0;\n//     for(let b = 0; b < buses.length; b++) {\n//         let c = 0;\n//         while(p < pass.length && pass[p] <= buses[b] && c < cap) {\n//             p++;\n//             c++;\n//         }\n//         if(b === buses.length-1){\n//             let t = (c === cap)? (pass[--p] -1) : buses[b];\n//             while(p>0 && pass[--p] === t){\n//                 t--\n//             }\n//             return t;\n//         }\n//     }\n//     return -1;\n// };\n\nfunction latestTimeCatchTheBus(buses, passengers, capacity) {\n    // Sort the arrays in ascending order\n    buses = buses.sort((a, b) => a - b);\n    passengers = passengers.sort((a, b) => a - b);\n    \n    let passengerIndex = 0;\n    for (let busIndex = 0; busIndex < buses.length; busIndex++) {\n        let passengersOnBus = 0;\n        while (passengerIndex < passengers.length && passengers[passengerIndex] <= buses[busIndex] && passengersOnBus < capacity) {\n            // Count the number of passengers who can get on the current bus\n            passengerIndex++;\n            passengersOnBus++;\n        }\n        \n        if (busIndex === buses.length - 1) {\n            // If this is the last bus, calculate the latest time to catch it\n            let latestArrivalTime = (passengersOnBus === capacity) ? (passengers[--passengerIndex] - 1) : buses[busIndex];\n            \n            // Check if there are any passengers who arrived at the latest arrival time\n            while (passengerIndex > 0 && passengers[passengerIndex - 1] === latestArrivalTime) {\n                latestArrivalTime--;\n                passengerIndex--;\n            }\n            \n            return latestArrivalTime;\n        }\n    }\n    \n    // If all buses have been checked and no bus can be caught, return -1\n    return -1;\n}\n\n\n\n\n\n\n\n\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-latest-time-to-catch-a-bus","has_notes":false}