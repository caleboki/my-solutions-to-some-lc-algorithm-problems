{"id":503448797,"lang":"javascript","lang_name":"JavaScript","time":"2Â years","timestamp":1622912704,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/503448797/","is_pending":"Not Pending","title":"LFU Cache","memory":"N/A","code":"/**\n * @param {number} capacity\n */\nvar LFUCache = function(capacity) {\n    this.capacity = capacity;\n    this.cache = new Map();\n    this.useCounter = {};\n    \n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLFUCache.prototype.get = function(key) {\n    if (!this.cache.has(key)) return -1\n    \n    if (this.useCounter[key] !== undefined) {\n        this.useCounter[key] = 1  \n    } else {\n        this.useCounter[key]++ \n    }\n    \n    let access = this.cache.get(key)\n    this.cache.delete(key)\n    this.cache.set(key, access)\n    \n    return access  \n    \n    \n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLFUCache.prototype.put = function(key, value) {\n    \n    \n    if (this.capacity <= this.cache.size) {\n        let least = Math.min(...Object.values(this.useCounter))\n        let leastKeys = Object.keys(this.useCounter).filter(f => f === least)\n        \n        if (leastKeys.length === 1) {\n            this.cache.delete(leastKeys[0])\n        } else {\n            this.cache.delete(this.cache.keys().next().value)\n        }\n        this.cache.set(key, value) \n         \n    } else {\n        if (this.cache.has(key)) {\n            this.cache.delete(key)\n            this.cache.set(key, value)\n        } else {\n            this.cache.set(key, value) \n        } \n    }\n    \n     \n};\n\n/** \n * Your LFUCache object will be instantiated and called as such:\n * var obj = new LFUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */","compare_result":"10110111101110111000000","title_slug":"lfu-cache","has_notes":false}