{"id":919508747,"lang":"javascript","lang_name":"JavaScript","time":"3Â months","timestamp":1679406610,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/919508747/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"43.2 MB","code":"/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\n// var minWindow = function(s, t) {\n    \n//     let windowStart = 0, matched = 0, substrStart = 0, minLength = s.length + 1, charFrequency = {}\n    \n//     //build a frequency map for the characters in t\n\n//   for (let i = 0; i < t.length; i++) {\n//     const chr = t[i]\n//     if (!(chr in charFrequency)) {\n//       charFrequency[chr] = 0\n//     }\n//     charFrequency[chr]++\n//   }\n\n//   // try to extend the range [windowStart, windowEnd]\n//   for (let windowEnd = 0; windowEnd < s.length; windowEnd++) {\n//     const rightChar = s[windowEnd]\n//     if (rightChar in charFrequency) {\n//       charFrequency[rightChar]--\n    \n//       // Count every matching of a character\n//       if (charFrequency[rightChar] >= 0) matched++ \n//     }\n   \n//     // Shrink the window if we can, finish as soon as we remove a matched character\n//     while (matched === t.length) {\n//       if (minLength > windowEnd - windowStart + 1) {\n//         minLength = windowEnd - windowStart + 1\n//         substrStart = windowStart\n//       }\n\n//       const leftChar = s[windowStart]\n//       windowStart++\n//       if (leftChar in charFrequency) {\n//         // Note that we could have redundant matching characters, therefore we'll decrement the\n//         // matched count only when a useful occurrence of a matched character is going out of the window\n//         if (charFrequency[leftChar] === 0) matched--\n        \n//         charFrequency[leftChar]++\n//       }\n//     }\n//   }\n\n//   if (minLength > s.length) return ''\n  \n//   return s.substring(substrStart, substrStart + minLength)\n// };\n\nconst minWindow = (s, t) => {\n  let windowStart = 0, substrStart = 0, map = {}, matched = 0, minLength = s.length + 1\n\n  for (let c of t) {\n    map[c] = (map[c] || 0) + 1\n  }\n\n  for (let windowEnd = 0; windowEnd < s.length; windowEnd++) {\n    const rightChar = s[windowEnd]\n    if (rightChar in map) {\n      map[rightChar]--\n      if (map[rightChar] >= 0) matched++\n    }\n\n     //shrink window\n    while(matched === t.length) {\n      if (minLength > windowEnd - windowStart + 1) {\n        minLength = windowEnd - windowStart + 1\n        substrStart = windowStart\n      }\n\n      const leftChar = s[windowStart]\n      windowStart++\n      if (leftChar in map) {\n        if (map[leftChar] === 0) matched--\n        map[leftChar]++\n      }\n    }\n  }\n \n\n  if (minLength > s.length) return ''\n  return s.substring(substrStart, substrStart + minLength)\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring","has_notes":false}