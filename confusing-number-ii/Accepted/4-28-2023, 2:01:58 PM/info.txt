{"id":941222144,"lang":"javascript","lang_name":"JavaScript","time":"1 month, 3 weeks","timestamp":1682704918,"status":10,"status_display":"Accepted","runtime":"410 ms","url":"/submissions/detail/941222144/","is_pending":"Not Pending","title":"Confusing Number II","memory":"49.3 MB","code":"/**\n * @param {number} n\n * @return {number}\n */\n// var confusingNumberII = function(n) {\n//     let count = 0\n\n//     const confusingNumber = (n) => {\n//         if (n === \"\") return true\n//         let map = new Map()\n//         let result = []\n        \n//         map.set(0, 0)\n//         map.set(1, 1)\n//         map.set(6, 9)\n//         map.set(8, 8)\n//         map.set(9, 6)\n\n//         n = n.toString().split('')\n\n//         for (let i of n) {\n//             if (!map.has(Number(i))) return false\n//             result.unshift(map.get(Number(i)))\n//         }\n//         n = Number(n.join(''))\n        \n//         return Number(result.join('')) !== n\n//     }\n\n//     for (let i = 1; i < n + 1; i++) {\n//         if (confusingNumber(i)) count++\n//     }\n\n//     return count\n// };\n\nfunction confusingNumberII(n) {\n    const pairs = [\n        [0, 0],\n        [1, 1],\n        [6, 9],\n        [8, 8],\n        [9, 6]\n    ];\n\n    let count = 0;\n\n    function dfs(num, rotatedNum, digitValue) {\n        if (num > n) return;\n        if (num !== rotatedNum) count++;\n        \n        for (const [digit, rotatedDigit] of pairs) {\n            const newNum = num * 10 + digit;\n \n            if (newNum === 0) continue; // Skip leading zeros\n\n            dfs(newNum, (rotatedDigit * digitValue) + rotatedNum, digitValue * 10);\n        }\n    }\n\n    dfs(0, 0, 1);\n\n    return count;\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"confusing-number-ii","has_notes":false}