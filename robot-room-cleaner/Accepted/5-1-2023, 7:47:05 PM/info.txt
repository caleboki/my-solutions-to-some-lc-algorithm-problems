{"id":942903574,"lang":"javascript","lang_name":"JavaScript","time":"1 month, 3 weeks","timestamp":1682984825,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/942903574/","is_pending":"Not Pending","title":"Robot Room Cleaner","memory":"46.5 MB","code":"/**\n * // This is the robot's control interface.\n * // You should not implement it, or speculate about its implementation\n * function Robot() {\n *     // Returns true if the cell in front is open and robot moves into the cell.\n *     // Returns false if the cell in front is blocked and robot stays in the current cell.\n *     @return {boolean}\n *     this.move = function() {\n *         ...\n *     };\n *\n *     // Robot will stay in the same cell after calling turnLeft/turnRight.\n *     // Each turn will be 90 degrees.\n *     @return {void}\n *     this.turnLeft = function() {\n *         ...\n *     };\n * \n *     // Robot will stay in the same cell after calling turnLeft/turnRight.\n *     // Each turn will be 90 degrees.\n *     @return {void} \n *     this.turnRight = function() {\n *         ...\n *     };\n *\n *     // Clean the current cell.\n *     @return {void}\n *     this.clean = function() {\n *         ...\n *     };\n * };\n */\n\n/**\n * @param {Robot} robot\n * @return {void}\n */\n// var cleanRoom = function(robot) {\n//     //must be clockwise or anti-clockwise and not random\n//     let directions = [[-1, 0], [0, 1], [1, 0], [0, -1]], visited = new Set()\n\n//     const goBack = () => {\n//         Robot.turnRight()\n//         Robot.turnRight()\n//         Robot.move()\n//         Robot.turnRight()\n//         Robot.turnRight()\n//     }\n//     const backTrack = (x, y, direction) => {\n//         let pos = x + ',' + y\n//         visited.add(pos)\n//         Robot.clean()\n\n//         for (let i of directions) {\n\n//         }\n//     }    \n// };\n\nconst cleanRoom = robot => {\n    const visited = new Set()\n    const directions = [[-1, 0], [0, 1], [1, 0], [0, -1]]\n    \n    const key = (x, y) => x + '_' + y\n    \n    const goBack = () => {\n        robot.turnRight()\n        robot.turnRight()\n        robot.move()\n        robot.turnRight()\n        robot.turnRight()\n    }\n    \n    const backtrack = (row = 0, col = 0, direction = 0) => {\n        visited.add(key(row, col))\n        robot.clean()\n        \n        for (let i = 0; i < directions.length; i++) {\n            const newDirection  = (i + direction) % 4\n            \n            const x = row + directions[newDirection][0]\n            const y = col + directions[newDirection][1]\n            \n            if (!visited.has(key(x, y)) && robot.move()) {\n                backtrack(x, y, newDirection)\n                goBack()\n            }\n        \n            robot.turnRight()\n        }\n    }\n    \n    backtrack()\n}","compare_result":"11111111111111111111111111111","title_slug":"robot-room-cleaner","has_notes":false}