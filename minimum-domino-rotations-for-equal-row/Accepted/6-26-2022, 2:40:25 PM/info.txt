{"id":731958733,"lang":"javascript","lang_name":"JavaScript","time":"12Â months","timestamp":1656268825,"status":10,"status_display":"Accepted","runtime":"160 ms","url":"/submissions/detail/731958733/","is_pending":"Not Pending","title":"Minimum Domino Rotations For Equal Row","memory":"50.8 MB","code":"/**\n * @param {number[]} tops\n * @param {number[]} bottoms\n * @return {number}\n */\n\n// Algorithm\n\n// Pick up the first element. It has two sides: A[0] and B[0].\n\n// Check if one could make all elements in A row or B row to be equal to A[0]. If yes, return the minimum number of rotations needed.\n\n// Check if one could make all elements in A row or B row to be equal to B[0]. If yes, return the minimum number of rotations needed.\n\n// Otherwise return -1.\n\nconst minDominoRotations = (tops, bottoms) => {\n    const check = (x, tops, bottoms) => {\n        let countTops = 0, countBottoms = 0\n        \n        for (let i = 0; i < tops.length; i++) {\n            if (tops[i] !== x && bottoms[i] !== x) {\n                return -1\n            } else if (tops[i] !== x) {\n                countTops++\n            } else if (bottoms[i] !== x) {\n                countBottoms++\n            }\n        }\n        \n        return Math.min(countTops, countBottoms)\n    }\n    \n    \n    let rotations = check(tops[0], tops, bottoms)\n    \n    if (rotations !== -1 || tops[0] === bottoms[0]) {\n        return rotations\n    } else {\n        return check(bottoms[0], bottoms, tops)\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-domino-rotations-for-equal-row","has_notes":false}