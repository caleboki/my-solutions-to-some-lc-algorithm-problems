{"id":532740860,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 10 months","timestamp":1628009228,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/532740860/","is_pending":"Not Pending","title":"Valid Palindrome III","memory":"N/A","code":"/**\n * @param {string} s\n * @param {number} k\n * @return {boolean}\n */\n// var isValidPalindrome = function(s, k) {\n    \n//     return k - longestSubstring(s) >= 0\n// };\n\n// function isPal(s, i, j) {  \n//     while(i < j){\n//         if(s[i] != s[j]) return false;\n//         i++;\n//         j--;\n//     }\n//     return true;\n// }\n\n// function longestSubstring(s) {\n//     for (let t = 0; t < s.length; t++) {\n//         let j = s.length - 1 - t;\n//         let i = 0;\n        \n//         while(j < s.length) {\n//             if (isPal(s, i, j)) {\n//                 //console.log(s.substring(i, j+1))\n//                 return s.substring(i, j+1).length\n//             }\n//             i++;\n//             j++\n//         }\n//     }\n//     return s.length; \n// }\n\nvar isValidPalindrome = function(s, k) {\n    const len = s.length;\n    const memo = [...Array(len)].map(() => Array(len).fill(0));\n    \n    const isPal = (s, i, j) => {\n        // Base case, only 1 letter remaining\n        if (i === j) return 0\n        \n        //Base case 2, only 2 letters remaining\n        if (i === j - 1) return s[i] !== s[j] ? 1 : 0 //i.e at most one character needs to be deleted\n        \n        if (memo[i][j] !== undefined) return memo[i][j]\n        \n        // Case 1: Character at `i` equals character at `j`\n        \n        if (s[i] === s[j]) return memo[i][j] = isPal(s, i + 1, j - 1)\n        \n        // Case 2: Character at `i` does not equal character at `j`.\n        // Either delete character at `i` or delete character at `j`\n        // and try to match the two pointers using recursion.\n        // We need to take the minimum of the two results and add 1\n        // representing the cost of deletion.\n        \n        return memo[i][j] = 1 + Math.min(isPal(s, i + 1, j), isPal(s, i, j - 1))\n    }\n    return isPal(s, 0, s.length - 1) <= k\n}\n\n","compare_result":"111110111101100100110000000000000000001111111111010","title_slug":"valid-palindrome-iii","has_notes":false}